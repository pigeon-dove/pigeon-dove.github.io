<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2023-04-23小红书春招算法题</title>
    <url>//post/11408/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>原文地址：<a href="https://xuedongyun.cn/post/11408/">https://xuedongyun.cn/post/11408/</a></p>
<h2 id="第一题-小红的数组增值"><a href="#第一题-小红的数组增值" class="headerlink" title="第一题: 小红的数组增值"></a>第一题: 小红的数组增值</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><strong>时间限制:</strong> 3000MS<br><strong>内存限制:</strong> 589824KB<br><strong>题目描述:</strong><br>小红拿到了一个数组，她准备不断进行如下操作<br>1、若a_0=0，则直接删除a_0，并将数组其余的所有元素向左移动来填补空缺。<br>2、否则在数组的未尾添加a_0个a_0-1，然后使得a_0减1。<br>小红想知道，从开始进行操作直到数组为空，她一共进行了多少次操作？答案请对10^9+7取模。<br><strong>输入描述</strong></p>
<blockquote>
<p>第一行输入一个正整数n，代表数组的长度。<br>第二行输入n个正整数a_i，代表数组的元素。<br>1 &lt;= n &lt;= 10^5<br>1 &lt;= a_i &lt;= 10^5</p>
</blockquote>
<p><strong>输出描述</strong></p>
<blockquote>
<p>一个整数，代表操作的次数对10^9+7取模的值。</p>
</blockquote>
<p><strong>样例输入</strong></p>
<blockquote>
<p>2</p>
<p>1 2</p>
</blockquote>
<p><strong>样例输出</strong></p>
<blockquote>
<p>13</p>
</blockquote>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>这道题暴力肯定会超时，我们不妨分析一下将数组中一个数彻底消除需要多少步。设数的值为n，将其完全消除需要dp[n]步。n经过1步，变为n+1个n-1。现在有状态转移方程：</p>
<p><code>dp[n] = (n+1)dp[n-1]+1</code></p>
<p>最后对数组中所有值求和即可</p>
<h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">long</span> <span class="variable">MOD</span> <span class="operator">=</span> <span class="number">1_000_000_000</span> + <span class="number">7</span>;</span><br><span class="line">Integer[] ints = <span class="keyword">new</span> <span class="title class_">Integer</span>[]{<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>};</span><br><span class="line"></span><br><span class="line"><span class="type">Integer</span> <span class="variable">maxValue</span> <span class="operator">=</span> Stream.of(ints).max(Integer::compareTo).get();</span><br><span class="line"><span class="type">long</span>[] dp = <span class="keyword">new</span> <span class="title class_">long</span>[maxValue+<span class="number">1</span>];</span><br><span class="line">dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= maxValue; i++) {</span><br><span class="line">    dp[i] = ((i + <span class="number">1</span>) * dp[i - <span class="number">1</span>] + <span class="number">1</span>) % MOD;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">long</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (Integer i : ints) {</span><br><span class="line">    result += dp[i];</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">System.out.println(result);</span><br></pre></td></tr></table></figure></div>



<h2 id="第三题-小红的字符串权值"><a href="#第三题-小红的字符串权值" class="headerlink" title="第三题: 小红的字符串权值"></a>第三题: 小红的字符串权值</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p><strong>时间限制:</strong> 3000MS<br><strong>内存限制:</strong> 589824KB<br><strong>题目描述:</strong><br>小红很喜欢’red”字符串，她定义一个字符串的美丽度为: 该字符串包含的”red”子序列的数量。注意子序列是可以不连续的，例<br>如”rreed”包含了4个”red”子序列，因此美丽度为4。<br>小红定义一个字符串的权值为: 该字符用所有连续子串的美丽度之和。例如，”redd”的权值为3，因为它包含了一个”red”连续子串，美<br>丽度为1，包含了一个”redd”连续子串，美丽度为2，其它连续子串的美丽度都为0。<br>小红想知道，长度为n的、仅由字符’r、’e’、’d”构成的所有字符串(共有3个字符串)的权值之和是多少？答案请对10^9+7取模。<br><strong>输入描述</strong></p>
<blockquote>
<p>一个正整数<br>1&lt;= n &lt;= 1000</p>
</blockquote>
<p><strong>输出描述</strong></p>
<blockquote>
<p>长度为n的、仅由字符’r、’e’、’d’构成的所有字符串的权值之和。</p>
</blockquote>
<p><strong>样例输入</strong></p>
<blockquote>
<p>3</p>
</blockquote>
<p><strong>样例输出</strong></p>
<blockquote>
<p>1</p>
</blockquote>
<p><strong>提示</strong></p>
<blockquote>
<p>说明: </p>
<p>长度为3的字符串，仅有”red”权值为1，其余字符串权值为0</p>
</blockquote>
<h3 id="解法-1"><a href="#解法-1" class="headerlink" title="解法"></a>解法</h3><p>这道题有一点绕，刚开始可能理不太清除。我们简单来理理: </p>
<ul>
<li>美丽度: 是一个字符串的属性。即包含”red”子序列的数量(子序列可以<strong>不连续</strong>)</li>
<li>权重: 也是一个字符串的属性。即字符串所有<strong>连续</strong>子序列的”美丽度”之合</li>
</ul>
<p>现在我们要求的是: 给定长度n的字符串，所有排列组合可能的”权值”之和。毋庸置疑，这种计算量的题目必定是用动态规划做的。下面分享一下我的做法，我们可以将问题拆分为若干个子问题: </p>
<p><strong>第一步: 给定长度n的字符串，所有排列组合中，会出现多少对”re”(r和e可以不连续)</strong></p>
<p>这可以通过动态规划来求，假设<code>re[n]</code>表示长度为n的字符串，所有排列中”re”(可以不连续)出现的次数。那么<code>re[n+1]</code>其实就是在原有”re”对的基础上，增加之前的r搭配后面的e的组合。因此，可以列出状态转移方程: </p>
<p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="31.403ex" height="2.452ex" role="img" focusable="false" viewBox="0 -833.9 13880.3 1083.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(451,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mo" transform="translate(917,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(1195,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(2017.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(3017.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(3517.4,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(4073.2,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(5129,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="mo" transform="translate(5851.2,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mi" transform="translate(6851.4,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(7302.4,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mo" transform="translate(7768.4,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(8046.4,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(8646.4,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(9146.7,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(10146.9,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(10969.1,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="msup" transform="translate(11969.3,0)"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1378,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g></g></svg></mjx-container></p>
<blockquote>
<p>解释: </p>
<ul>
<li>因为新增了一位(r，e，d三种可能)，所以原有”re”对的数量会翻三倍</li>
<li>至于前面的”r”搭配后面的”e”的情况，我们只需要看前面长度为n的序列中能产生多少”r”即可。具体来说，前面n位一共有<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="2.279ex" height="1.578ex" role="img" focusable="false" viewBox="0 -675.5 1007.3 697.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="mi" transform="translate(533,363) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container>种排列，每种排列包含n个字母。又因为每个字母出现概率均等，因此”r”出现的次数为<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.081ex;" xmlns="http://www.w3.org/2000/svg" width="10.299ex" height="1.61ex" role="img" focusable="false" viewBox="0 -675.5 4552.2 711.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="mi" transform="translate(533,363) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(1229.5,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mi" transform="translate(2229.7,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(3051.9,0)"><path data-c="F7" d="M318 466Q318 500 339 518T386 537Q418 537 438 517T458 466Q458 438 440 417T388 396Q355 396 337 417T318 466ZM56 237T56 250T70 270H706Q721 262 721 250T706 230H70Q56 237 56 250ZM318 34Q318 68 339 86T386 105Q418 105 438 85T458 34Q458 6 440 -15T388 -36Q355 -36 337 -15T318 34Z"></path></g><g data-mml-node="mn" transform="translate(4052.2,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g></g></svg></mjx-container></li>
</ul>
</blockquote>
<p>现在我们能计算: 给定长度的序列的所有排列中，能找到多少”re”对</p>
<p><img lazyload="" src="/images/loading.svg" data-src="https://s2.loli.net/2023/04/24/DNK7TwFtbGsR8MC.png" alt="image-20230424141054981"></p>
<p><strong>第二步: 给定长度n的字符串，所有排列组合中，会出现多少组”red”(r，e和d可以不连续)</strong></p>
<p>同样的思路，假设<code>red[n]</code>表示长度为n的字符串，所有排列中”red”(可以不连续)出现的次数。给出状态转移方程: </p>
<p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="30ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 13259.9 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(451,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(917,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mo" transform="translate(1437,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(1715,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(2537.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(3537.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(4037.4,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(4593.2,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(5649,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="mo" transform="translate(6371.2,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mi" transform="translate(7371.4,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(7822.4,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(8288.4,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mo" transform="translate(8808.4,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(9086.4,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(9686.4,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(10186.7,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(11186.9,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(11637.9,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mo" transform="translate(12103.9,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(12381.9,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(12981.9,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></svg></mjx-container></p>
<blockquote>
<p>解释: </p>
<ul>
<li>因为新增了一位(r，e，d三种可能)，所以原有”red”的数量会翻三倍</li>
<li>如果新增一个”d”，会导致前面”re”加上新增的”d”产生新的”red”</li>
</ul>
</blockquote>
<p><img lazyload="" src="/images/loading.svg" data-src="https://s2.loli.net/2023/04/24/mo9JUMTctQEA2L7.png" alt="image-20230424143448006"></p>
<p><strong>第三步: 给定长度n的字符串，所有排列组合，”权重”之和</strong></p>
<p>我们继续用动态规划的思路来做。我们重点关注多了一位后，会导致所有连续子序列的”美丽度”多多少。</p>
<ul>
<li>考虑一: 原有美丽度会多多少</li>
</ul>
<p>我们先什么都不管，只考虑在末尾多了一个字母后，原有的所有连续子序列种”red”会变多多少？很明显，由于多了一个字母(r，e，d三种可能)，原有”美丽度会翻三倍”。</p>
<p><strong>考虑一中新增的美丽度:</strong> <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="8.827ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 3901.4 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="mo" transform="translate(722.2,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mi" transform="translate(1722.4,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(2242.4,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mo" transform="translate(2745.4,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(3023.4,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(3623.4,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></svg></mjx-container></p>
<ul>
<li>考虑二: 现在末尾多了一位，暂时不算它。现在会产生新的连续子序列，导致”美丽度”增加。</li>
</ul>
<p>增加的”美丽度”其实就是长度为1, 2, 3, 4…n这几个连续子序列中“red”产生的。</p>
<blockquote>
<p>举例说明:<code>"red"</code></p>
<p>连续子序列有: “red”(美丽度1)，因此总权重为1。</p>
<p>多一个”r”，变为<code>"redr"</code>，连续子序列有: “red”(美丽度1)，”redr”(美丽度1)，因此总权重为2。</p>
<p>前后虽然”red”没有变多，但是”美丽度”却变多了，导致权重增加。</p>
</blockquote>
<p>举例来说，对于长度为5的，在末尾位置结束的连续子序列，新增美丽度为:  <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="59.338ex" height="2.452ex" role="img" focusable="false" viewBox="0 -833.9 26227.3 1083.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="mo" transform="translate(500,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(889,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">多</text></g><g data-mml-node="mi" transform="translate(1889,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">的</text></g><g data-mml-node="mi" transform="translate(2889,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">一</text></g><g data-mml-node="mi" transform="translate(3889,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">位</text></g><g data-mml-node="mi" transform="translate(4889,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">有</text></g><g data-mml-node="mi" transform="translate(5889,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">三</text></g><g data-mml-node="mi" transform="translate(6889,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">种</text></g><g data-mml-node="mi" transform="translate(7889,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">可</text></g><g data-mml-node="mi" transform="translate(8889,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">能</text></g><g data-mml-node="mo" transform="translate(9889,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(10500.2,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mi" transform="translate(11500.4,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(11951.4,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(12417.4,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mo" transform="translate(12937.4,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mn" transform="translate(13215.4,0)"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path></g><g data-mml-node="mo" transform="translate(13715.4,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(14215.7,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="msup" transform="translate(15215.9,0)"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1378,0)"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path></g></g></g><g data-mml-node="mo" transform="translate(17126.8,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(17515.8,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">前</text></g><g data-mml-node="mi" transform="translate(18515.8,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(19338.1,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(20338.3,0)"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path></g><g data-mml-node="mi" transform="translate(20838.3,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">位</text></g><g data-mml-node="mi" transform="translate(21838.3,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">随</text></g><g data-mml-node="mi" transform="translate(22838.3,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">便</text></g><g data-mml-node="mi" transform="translate(23838.3,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">排</text></g><g data-mml-node="mi" transform="translate(24838.3,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">列</text></g><g data-mml-node="mo" transform="translate(25838.3,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container> ，最终所有新增量相加即可。</p>
<p><strong>考虑二中新增的美丽度:</strong> <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.663ex;" xmlns="http://www.w3.org/2000/svg" width="19.942ex" height="2.542ex" role="img" focusable="false" viewBox="0 -830.4 8814.2 1123.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="munderover"><g data-mml-node="mo"><path data-c="2211" d="M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z"></path></g><g data-mml-node="mi" transform="translate(1089,477.1) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1089,-285.4) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1729.9,0)"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="mo" transform="translate(722.2,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mi" transform="translate(1722.4,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(2173.4,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(2639.4,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mo" transform="translate(3159.4,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(3437.4,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(3782.4,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(4282.7,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="msup" transform="translate(5282.9,0)"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(1378,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></g></g></svg></mjx-container></p>
<p><img lazyload="" src="/images/loading.svg" data-src="https://s2.loli.net/2023/04/24/l6OYoGzXFZLACJb.png" alt="image-20230424150621083"></p>
<ul>
<li>考虑三: 末尾多了一位”d”，与前面”re”新组合为”red”，导致”美丽度增多”</li>
</ul>
<p>和考虑二中思路类似。增加的”美丽度”其实就是长度为1, 2, 3, 4…n这几个连续子序列中“re”产生的。</p>
<p>举例来说，对于长度为5的，在末尾位置结束的连续子序列，新增美丽度为:<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="32.142ex" height="2.452ex" role="img" focusable="false" viewBox="0 -833.9 14206.8 1083.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(451,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mo" transform="translate(917,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mn" transform="translate(1195,0)"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path></g><g data-mml-node="mo" transform="translate(1695,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(2195.2,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="msup" transform="translate(3195.4,0)"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1378,0)"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path></g></g></g><g data-mml-node="mo" transform="translate(5106.4,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(5495.4,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">前</text></g><g data-mml-node="mi" transform="translate(6495.4,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(7317.6,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(8317.8,0)"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path></g><g data-mml-node="mi" transform="translate(8817.8,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">位</text></g><g data-mml-node="mi" transform="translate(9817.8,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">随</text></g><g data-mml-node="mi" transform="translate(10817.8,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">便</text></g><g data-mml-node="mi" transform="translate(11817.8,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">排</text></g><g data-mml-node="mi" transform="translate(12817.8,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">列</text></g><g data-mml-node="mo" transform="translate(13817.8,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></p>
<p><strong>考虑三中新增的美丽度:</strong> <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.663ex;" xmlns="http://www.w3.org/2000/svg" width="14.868ex" height="2.542ex" role="img" focusable="false" viewBox="0 -830.4 6571.7 1123.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="munderover"><g data-mml-node="mo"><path data-c="2211" d="M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z"></path></g><g data-mml-node="mi" transform="translate(1089,477.1) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1089,-285.4) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1729.9,0)"><g data-mml-node="mi"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(451,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mo" transform="translate(917,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(1195,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1540,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(2040.2,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="msup" transform="translate(3040.4,0)"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(1378,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></g></g></svg></mjx-container></p>
<p><img lazyload="" src="/images/loading.svg" data-src="https://s2.loli.net/2023/04/24/EBY1eRal9qvt5r7.png" alt="image-20230424152217263"></p>
<ul>
<li>最终我们得到状态转移方程</li>
</ul>
<p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.663ex;" xmlns="http://www.w3.org/2000/svg" width="61.012ex" height="2.542ex" role="img" focusable="false" viewBox="0 -830.4 26967.2 1123.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(520,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mo" transform="translate(1023,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(1301,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(2123.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(3123.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(3623.4,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(4179.2,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(5235,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="mo" transform="translate(5957.2,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mi" transform="translate(6957.4,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(7477.4,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mo" transform="translate(7980.4,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(8258.4,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(8858.4,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(9358.7,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="munderover" transform="translate(10358.9,0)"><g data-mml-node="mo"><path data-c="2211" d="M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z"></path></g><g data-mml-node="mi" transform="translate(1089,477.1) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1089,-285.4) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mn" transform="translate(12088.8,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="mo" transform="translate(12811,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mi" transform="translate(13811.3,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(14262.3,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(14728.3,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mo" transform="translate(15248.3,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(15526.3,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(15871.3,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(16371.5,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="msup" transform="translate(17371.7,0)"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(1378,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g><g data-mml-node="mo" transform="translate(19395.3,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="munderover" transform="translate(20395.5,0)"><g data-mml-node="mo"><path data-c="2211" d="M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z"></path></g><g data-mml-node="mi" transform="translate(1089,477.1) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1089,-285.4) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(22125.4,0)"><g data-mml-node="mi"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(451,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mo" transform="translate(917,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(1195,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1540,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(2040.2,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="msup" transform="translate(3040.4,0)"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(1378,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></g></g></svg></mjx-container></p>
<h4 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h4><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">MOD = <span class="number">10</span>**<span class="number">9</span> + <span class="number">7</span></span><br><span class="line">n = <span class="number">1000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1-&gt;0, 2-&gt;0, 3-&gt;1可以直接返回</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 步骤一</span></span><br><span class="line">re = [<span class="number">0</span>] * n</span><br><span class="line">re[<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">re[<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, n):</span><br><span class="line">    re[i] = (<span class="number">3</span>*re[i-<span class="number">1</span>] + <span class="number">3</span>**(i-<span class="number">1</span>) * i) % MOD</span><br><span class="line"></span><br><span class="line"><span class="comment"># 步骤二</span></span><br><span class="line">red = [<span class="number">0</span>] * n</span><br><span class="line">red[<span class="number">2</span>] = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>, n):</span><br><span class="line">    red[i] = (<span class="number">3</span>*red[i-<span class="number">1</span>] + re[i-<span class="number">1</span>]) % MOD</span><br><span class="line"></span><br><span class="line"><span class="comment"># 步骤三</span></span><br><span class="line">dp = [<span class="number">0</span>] * n</span><br><span class="line">dp[<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">dp[<span class="number">1</span>] = <span class="number">0</span></span><br><span class="line">dp[<span class="number">2</span>] = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>, n):</span><br><span class="line">    value = <span class="number">3</span> * dp[i-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, i):</span><br><span class="line">        value += <span class="number">3</span> * red[j] * <span class="number">3</span>**(i - j - <span class="number">1</span>) + re[j] * <span class="number">3</span>**(i - j - <span class="number">1</span>)</span><br><span class="line">        value = value % MOD</span><br><span class="line">    dp[i] = value</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(dp)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">1000</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">MOD</span> <span class="operator">=</span> <span class="number">1_000_000_000</span> + <span class="number">7</span>;</span><br><span class="line"><span class="type">BigInteger</span> <span class="variable">MOD_BIG</span> <span class="operator">=</span> BigInteger.valueOf(MOD);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1-&gt;0, 2-&gt;0, 3-&gt;1可以直接返回</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 步骤1</span></span><br><span class="line"><span class="type">long</span>[] re = <span class="keyword">new</span> <span class="title class_">long</span>[n];</span><br><span class="line">re[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt; n; i++) {</span><br><span class="line">    re[i] = (<span class="number">3</span> * re[i - <span class="number">1</span>] + i * BigInteger.valueOf(<span class="number">3</span>).pow(i - <span class="number">1</span>).mod(MOD_BIG).longValue()) % MOD;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 步骤2</span></span><br><span class="line"><span class="type">long</span>[] red = <span class="keyword">new</span> <span class="title class_">long</span>[n];</span><br><span class="line">red[<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">3</span>; i &lt; n; i++) {</span><br><span class="line">    red[i] = ((<span class="number">3</span> * red[i - <span class="number">1</span>]) % MOD + re[i - <span class="number">1</span>]) % MOD;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 步骤三</span></span><br><span class="line"><span class="type">long</span>[] dp = <span class="keyword">new</span> <span class="title class_">long</span>[n];</span><br><span class="line">dp[<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">3</span>; i &lt; n; i++) {</span><br><span class="line">    dp[i] = <span class="number">3</span> * dp[i-<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt; i; j++) {</span><br><span class="line">        dp[i] += ((<span class="number">3</span> * red[j] + re[j]) % MOD) * BigInteger.valueOf(<span class="number">3</span>).pow(i - j - <span class="number">1</span>).mod(MOD_BIG).longValue();</span><br><span class="line">        dp[i] = dp[i] % MOD;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">System.out.println(dp[n - <span class="number">1</span>]);</span><br></pre></td></tr></table></figure></div>

<h3 id="更优解法"><a href="#更优解法" class="headerlink" title="更优解法"></a>更优解法</h3><p>仔细思考后发现一个更优解法。我们之前其实已经能拿到<code>red[i]</code>，那么对于一个长度为n的任意排列的序列来说，其中长度为i的连续序列产生的”美丽度”就应当为：</p>
<p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="25.457ex" height="2.444ex" role="img" focusable="false" viewBox="0 -830.4 11252.1 1080.4"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(451,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(917,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mo" transform="translate(1437,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(1715,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(2060,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(2560.2,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="msup" transform="translate(3560.4,0)"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(1378,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g><g data-mml-node="mo" transform="translate(5584,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mo" transform="translate(6584.2,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(6973.2,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(7795.5,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(8795.7,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(9362.9,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(10363.1,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(10863.1,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></p>
<blockquote>
<p>解释：</p>
<p>长度为i的连续子序列，所有排列中的”美丽度”总和<code>red[i]</code>在上一个解法，我们已详细探讨。</p>
<p>现在，剩下的<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="4.904ex" height="1.681ex" role="img" focusable="false" viewBox="0 -661 2167.4 743"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(822.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(1822.4,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container>个位置一共有<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="4.075ex" height="1.929ex" role="img" focusable="false" viewBox="0 -830.4 1801.3 852.4"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(1378,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></g></svg></mjx-container>种可能</p>
<p>同时，这个长度为i的连续子序列的位置未知，一共有<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="8.801ex" height="1.692ex" role="img" focusable="false" viewBox="0 -666 3889.9 748"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(822.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(1822.4,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(2389.7,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(3389.9,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container>种可能</p>
</blockquote>
<p>我们现在只需要遍历i，最后求和就可以了</p>
<p><img lazyload="" src="/images/loading.svg" data-src="https://s2.loli.net/2023/04/24/q74jucZEBvAa9XU.png" alt="image-20230424215811928"></p>
<h4 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h4><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">MOD = <span class="number">10</span>**<span class="number">9</span> + <span class="number">7</span></span><br><span class="line">n = <span class="number">1000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1-&gt;0, 2-&gt;0, 3-&gt;1可以直接返回</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 步骤一</span></span><br><span class="line">re = [<span class="number">0</span>] * n    </span><br><span class="line">re[<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, n):</span><br><span class="line">    re[i] = (<span class="number">3</span>*re[i-<span class="number">1</span>] + <span class="number">3</span>**(i-<span class="number">1</span>) * i) % MOD</span><br><span class="line"></span><br><span class="line"><span class="comment"># 步骤二</span></span><br><span class="line">red = [<span class="number">0</span>] * n</span><br><span class="line">red[<span class="number">2</span>] = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>, n):</span><br><span class="line">    red[i] = (<span class="number">3</span>*red[i-<span class="number">1</span>] + re[i-<span class="number">1</span>]) % MOD</span><br><span class="line"></span><br><span class="line"><span class="comment"># 步骤三</span></span><br><span class="line">result = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n):</span><br><span class="line">    result = (result + red[i] * <span class="number">3</span>**(n-i-<span class="number">1</span>) * (n - i)) % MOD</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">1000</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">MOD</span> <span class="operator">=</span> <span class="number">1_000_000_000</span> + <span class="number">7</span>;</span><br><span class="line"><span class="type">BigInteger</span> <span class="variable">MOD_BIG</span> <span class="operator">=</span> BigInteger.valueOf(MOD);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1-&gt;0, 2-&gt;0, 3-&gt;1可以直接返回</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 步骤1</span></span><br><span class="line"><span class="type">long</span>[] re = <span class="keyword">new</span> <span class="title class_">long</span>[n];</span><br><span class="line">re[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt; n; i++) {</span><br><span class="line">    re[i] = (<span class="number">3</span> * re[i - <span class="number">1</span>] + i * BigInteger.valueOf(<span class="number">3</span>).pow(i - <span class="number">1</span>).mod(MOD_BIG).longValue()) % MOD;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 步骤2</span></span><br><span class="line"><span class="type">long</span>[] red = <span class="keyword">new</span> <span class="title class_">long</span>[n];</span><br><span class="line">red[<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">3</span>; i &lt; n; i++) {</span><br><span class="line">    red[i] = ((<span class="number">3</span> * red[i - <span class="number">1</span>]) % MOD + re[i - <span class="number">1</span>]) % MOD;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 步骤三</span></span><br><span class="line"><span class="type">long</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">    <span class="type">long</span> <span class="variable">temp</span> <span class="operator">=</span> (red[i] * (n - i)) % MOD;</span><br><span class="line">    temp = (temp * BigInteger.valueOf(<span class="number">3</span>).pow(n - i - <span class="number">1</span>).mod(MOD_BIG).longValue()) % MOD;</span><br><span class="line">    result += temp;</span><br><span class="line">    result %= MOD;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">System.out.println(result);</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>算法题</category>
        <category>动态规划</category>
      </categories>
  </entry>
  <entry>
    <title>JDK8到JDK17新特性</title>
    <url>//post/54344/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>SpringBoot3.0开始强制使用JDK17，想必会迎来一波JDK8到JKD17的更新热潮。本文总结了JDK8-JDK17所有重要的更新内容，以供查阅。</p>
<p>原文地址：<a href="https://xuedongyun.cn/post/54344/">https://xuedongyun.cn/post/54344/</a></p>
<h2 id="带资源的try"><a href="#带资源的try" class="headerlink" title="带资源的try"></a>带资源的try</h2><blockquote>
<p>JDK7新特性</p>
</blockquote>
<ul>
<li>在try的后面可以增加()，括号中可以声明流对象并初始化</li>
<li>try中的代码执行完毕，自动把流对象释放，不用写finally了</li>
</ul>
<blockquote>
<p>说明：</p>
<ul>
<li><p>声明的类必须实现<code>AutoCloseable</code>或<code>Closeable</code>接口，实现了其中的<code>close</code>方法。Java7几乎把所有的资源类都实现了这些接口。</p>
</li>
<li><p>写到括号中的变量默认是final的，无法更改。</p>
</li>
</ul>
</blockquote>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> (</span><br><span class="line">    <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">"d:/1.txt"</span>);</span><br><span class="line">    <span class="type">InputStreamReader</span> <span class="variable">isr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(fis, <span class="string">"utf-8"</span>);</span><br><span class="line">    <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(isr);</span><br><span class="line"></span><br><span class="line">    <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">"1.txt"</span>);</span><br><span class="line">    <span class="type">OutputStreamWriter</span> <span class="variable">osw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(fos, <span class="string">"gbk"</span>);</span><br><span class="line">    <span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(osw);</span><br><span class="line">) {</span><br><span class="line">    String str;</span><br><span class="line">    <span class="keyword">while</span> ((str = br.readLine()) != <span class="literal">null</span>) {</span><br><span class="line">        bw.write(str);</span><br><span class="line">        bw.newLine();</span><br><span class="line">    }</span><br><span class="line">} <span class="keyword">catch</span> (FileNotFoundException e) {</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">} <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>JDK9语法有增强</p>
</blockquote>
<p>此时可以在外部初始化变量，括号中引用外部名称即可，用分号隔开。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">InputStreamReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in);</span><br><span class="line"><span class="type">OutputStreamWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(System.out);</span><br><span class="line"><span class="keyword">try</span> (reader; writer) {</span><br><span class="line">    <span class="comment">// 主要流程</span></span><br><span class="line">} <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h2 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h2><blockquote>
<p>JDK8新特性</p>
</blockquote>
<p>在启动线程时，需要传入一个实现<code>java.lang.Runnable</code>接口的对象，来定义线程中的工作。通常，我们使用匿名内部类来实现。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> {</span><br><span class="line">        System.out.println(<span class="string">"Hello from thread"</span>);</span><br><span class="line">    }</span><br><span class="line">}).start();</span><br></pre></td></tr></table></figure></div>

<p>但是本质上，我们需要的其实只是一个函数。lambda表达式就是为解决这个问题而出现的。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">Comparator&lt;Integer&gt; com1 = (Integer o1, Integer o2) -&gt; {</span><br><span class="line">    <span class="keyword">return</span> o1.compareTo(o2);</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类型推断：类型可以由编译器推理出来，可以不写</span></span><br><span class="line">Comparator&lt;Integer&gt; com1 = (o1, o2) -&gt; {</span><br><span class="line">    <span class="keyword">return</span> o1.compareTo(o2);</span><br><span class="line">};</span><br></pre></td></tr></table></figure></div>

<h3 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h3><ul>
<li>只包含<strong>一个抽象方法</strong>的接口称为函数式接口（当然可以包含其他非抽象方法）</li>
<li>可以用lambda表达式创建接口的对象</li>
<li>可以在接口上标注<code>@FunctionalInterface</code>注解，用于检查是否满足条件</li>
</ul>
<blockquote>
<p>函数式编程思想：</p>
<ul>
<li>函数是一等公民，注重获取结果</li>
</ul>
</blockquote>
<h3 id="内置的函数式接口"><a href="#内置的函数式接口" class="headerlink" title="内置的函数式接口"></a>内置的函数式接口</h3><ul>
<li><p>之前常见的函数式接口</p>
<ul>
<li><code>java.lang.Runnable</code>，方法：<code>public void run()</code></li>
<li><code>java.lang.Iterable&lt;T&gt;</code>，方法：<code>public Iterator&lt;T&gt; iterate()</code></li>
<li><code>java.lang.Comparable&lt;T&gt;</code>，方法：<code>public int compareTo(T t)</code></li>
<li><code>java.util.Comparator&lt;T&gt;</code>，方法：<code>public int compare(T t1, T t2)</code></li>
</ul>
</li>
<li><p>四大核心函数接口</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>函数式接口</th>
<th>称谓</th>
<th>抽象方法</th>
<th>用途</th>
</tr>
</thead>
<tbody><tr>
<td><code>Consumer&lt;T&gt;  </code></td>
<td>消费型接口</td>
<td><code>void accept(T t)</code></td>
<td>对类型为T的对象进行操作</td>
</tr>
<tr>
<td><code>Supplier&lt;T&gt;  </code></td>
<td>供给型接口</td>
<td><code>T get()</code></td>
<td>返回类型为T的对象</td>
</tr>
<tr>
<td><code>Function&lt;T, R&gt;  </code></td>
<td>函数型接口</td>
<td><code>R apply(T t)</code></td>
<td>对对象进行操作，返回结果</td>
</tr>
<tr>
<td><code>Predicate&lt;T&gt;  </code></td>
<td>判断型接口</td>
<td><code>boolean test(T t)</code></td>
<td>判断对象是否满足某条件</td>
</tr>
</tbody></table>
<ul>
<li>消费型接口</li>
</ul>
<table>
<thead>
<tr>
<th>函数式接口</th>
<th>抽象方法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>BiConsumer&lt;T,U&gt;</code></td>
<td><code>void accept(T t, U u)</code></td>
<td>接收两个对象，用于完成功能</td>
</tr>
<tr>
<td><code>DoubleConsumer</code></td>
<td><code>void accept(double value)</code></td>
<td>接收一个double值</td>
</tr>
<tr>
<td><code>IntConsumer</code></td>
<td><code>void accept(int value)</code></td>
<td>接收一个int值</td>
</tr>
<tr>
<td><code>LongConsumer</code></td>
<td><code>void accept(long value)</code></td>
<td>接收一个long值</td>
</tr>
<tr>
<td><code>ObjDoubleConsumer&lt;T&gt;</code></td>
<td><code>void accept(T t, double value)</code></td>
<td>接收一个对象和一个double值</td>
</tr>
<tr>
<td><code>ObjIntConsumer&lt;T&gt;</code></td>
<td><code>void accept(T t, int value)</code></td>
<td>接收一个对象和一个int值</td>
</tr>
<tr>
<td><code>ObjLongConsumer&lt;T&gt;</code></td>
<td><code>void accept(T t, long value)</code></td>
<td>接收一个对象和一个long值</td>
</tr>
</tbody></table>
<ul>
<li>供给型接口</li>
</ul>
<table>
<thead>
<tr>
<th>接口名</th>
<th>抽象方法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>BooleanSupplier</code></td>
<td><code>boolean getAsBoolean()</code></td>
<td>返回一个boolean值</td>
</tr>
<tr>
<td><code>DoubleSupplier</code></td>
<td><code>double getAsDouble()</code></td>
<td>返回一个double值</td>
</tr>
<tr>
<td><code>IntSupplier</code></td>
<td><code>int getAsInt()</code></td>
<td>返回一个int值</td>
</tr>
<tr>
<td><code>LongSupplier</code></td>
<td><code>long getAsLong()</code></td>
<td>返回一个long值</td>
</tr>
</tbody></table>
<ul>
<li>判断型接口</li>
</ul>
<table>
<thead>
<tr>
<th>接口名</th>
<th>抽象方法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>BiPredicate&lt;T,U&gt;</code></td>
<td><code>boolean test(T t, U u)</code></td>
<td>接收两个对象</td>
</tr>
<tr>
<td><code>DoublePredicate</code></td>
<td><code>boolean test(double value)</code></td>
<td>接收一个double值</td>
</tr>
<tr>
<td><code>IntPredicate</code></td>
<td><code>boolean test(int value)</code></td>
<td>接收一个int值</td>
</tr>
<tr>
<td><code>LongPredicate</code></td>
<td><code>boolean test(long value)</code></td>
<td>接收一个long值</td>
</tr>
</tbody></table>
<ul>
<li>函数型接口（看套路总结即可）</li>
</ul>
<table>
<thead>
<tr>
<th>接口名</th>
<th>抽象方法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>UnaryOperator&lt;T&gt;</code></td>
<td><code>T apply(T t)</code></td>
<td>接收T类型，返回T类型</td>
</tr>
<tr>
<td><code>DoubleFunction&lt;R&gt;</code></td>
<td><code>R apply(double value)</code></td>
<td>接收double，返回R类型</td>
</tr>
<tr>
<td><code>IntFunction&lt;R&gt;</code></td>
<td><code>R apply(int value)</code></td>
<td>接收int，返回R类型</td>
</tr>
<tr>
<td><code>LongFunction&lt;R&gt;</code></td>
<td><code>R apply(long value)</code></td>
<td>接收long，返回类型</td>
</tr>
<tr>
<td><code>ToDoubleFunction&lt;T&gt;</code></td>
<td><code>double applyAsDouble(T value)</code></td>
<td>接收T类型，返回double</td>
</tr>
<tr>
<td><code>ToIntFunction&lt;T&gt;</code></td>
<td><code>int applyAsInt(T value)</code></td>
<td>接收T类型，返回int</td>
</tr>
<tr>
<td><code>ToLongFunction&lt;T&gt;</code></td>
<td><code>long applyAsLong(T value)</code></td>
<td>接收类型T，返回long</td>
</tr>
<tr>
<td><code>DoubleToIntFunction</code></td>
<td><code>int applyAsInt(double value)</code></td>
<td>接收double，返回int</td>
</tr>
<tr>
<td><code>DoubleToLongFunction</code></td>
<td><code>long applyAsLong(double value)</code></td>
<td>接收double，返回long</td>
</tr>
<tr>
<td><code>IntToDoubleFunction</code></td>
<td><code>double applyAsDouble(int value)</code></td>
<td>接收int，返回double</td>
</tr>
<tr>
<td><code>IntToLongFunction</code></td>
<td><code>long applyAsLong(int value)</code></td>
<td>接收int，返回long</td>
</tr>
<tr>
<td><code>LongToDoubleFunction</code></td>
<td><code>double applyAsDouble(long value)</code></td>
<td>接收long，返回double</td>
</tr>
<tr>
<td><code>LongToIntFunction</code></td>
<td><code>int applyAsInt(long value)</code></td>
<td>接收long，返回int</td>
</tr>
<tr>
<td><code>DoubleUnaryOperator</code></td>
<td><code>double applyAsDouble(double operand)</code></td>
<td>接收double，返回double</td>
</tr>
<tr>
<td><code>IntUnaryOperator</code></td>
<td><code>int applyAsInt(int operand)</code></td>
<td>接收int，返回int</td>
</tr>
<tr>
<td><code>LongUnaryOperator</code></td>
<td><code>long applyAsLong(long operand)</code></td>
<td>接收long，返回long</td>
</tr>
<tr>
<td><code>BiFunction&lt;T,U,R&gt;</code></td>
<td><code>R apply(T t, U u)</code></td>
<td>接收T类型和U类型，返回一个R类型</td>
</tr>
<tr>
<td><code>BinaryOperator&lt;T&gt;</code></td>
<td><code>T apply(T t, T u)</code></td>
<td>接收两个T类型，返回T类型</td>
</tr>
<tr>
<td><code>ToDoubleBiFunction&lt;T,U&gt;</code></td>
<td><code>double applyAsDouble(T t, U u)</code></td>
<td>接收T类型和U类型，返回double</td>
</tr>
<tr>
<td><code>ToIntBiFunction&lt;T,U&gt;</code></td>
<td><code>int applyAsInt(T t, U u)</code></td>
<td>接收T类型和U类型，返回int</td>
</tr>
<tr>
<td><code>ToLongBiFunction&lt;T,U&gt;</code></td>
<td><code>long applyAsLong(T t, U u)</code></td>
<td>接收T类型和U类型，返回long</td>
</tr>
<tr>
<td><code>DoubleBinaryOperator</code></td>
<td><code>double applyAsDouble(double left, double right)</code></td>
<td>接收两个double，返回double</td>
</tr>
<tr>
<td><code>IntBinaryOperator</code></td>
<td><code>int applyAsInt(int left, int right)</code></td>
<td>接收两个int，返回int</td>
</tr>
<tr>
<td><code>LongBinaryOperator</code></td>
<td><code>long applyAsLong(long left, long right)</code></td>
<td>接收两个long，返回long</td>
</tr>
</tbody></table>
<blockquote>
<p>命名套路：</p>
<p>Operator：参数返回值类型一致</p>
<p>Fucntion：参数返回值类型不一致</p>
<ul>
<li><p><code>Int</code>-UnaryOperator</p>
</li>
<li><p><code>Int</code>-Function</p>
</li>
<li><p><code>To-Int</code>-Function</p>
</li>
<li><p><code>Double-To-Int</code>-Function</p>
</li>
<li><p><code>Bi</code>-Function</p>
<ul>
<li><code>To-Int-Bi</code>-Function</li>
</ul>
</li>
<li><p><code>Binary</code>-Operator</p>
<ul>
<li><code>Int-Binary-</code>Operator</li>
</ul>
</li>
</ul>
</blockquote>
<h2 id="方法引用与构造器引用"><a href="#方法引用与构造器引用" class="headerlink" title="方法引用与构造器引用"></a>方法引用与构造器引用</h2><blockquote>
<p>JDK8新特性</p>
</blockquote>
<p>本质：使用已有方法赋值lambda表达式，只要类型一致就成立</p>
<h3 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h3><p>当要传给lambda体的操作，已经有实现的方法时：</p>
<ul>
<li><code>对象::实例方法</code></li>
<li><code>类::静态方法</code></li>
<li><code>类::实例方法</code></li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">Consumer&lt;String&gt; con = System.out::println;</span><br></pre></td></tr></table></figure></div>

<h3 id="构造器引用"><a href="#构造器引用" class="headerlink" title="构造器引用"></a>构造器引用</h3><p>当Lambda表达式是为了创建一个对象，且满足Lambda表达式形参时：</p>
<ul>
<li><code>类名::new</code></li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">Supplier&lt;Employee&gt; sup = Employee::<span class="keyword">new</span>;</span><br></pre></td></tr></table></figure></div>

<h3 id="数组构造引用"><a href="#数组构造引用" class="headerlink" title="数组构造引用"></a>数组构造引用</h3><p>当Lambda表达式是为了创建一个数组对象，且满足Lambda表达式形参时：</p>
<ul>
<li><code>数组类型名::new</code></li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Function&lt;Integer,String[]&gt; func = String[]::new;</span><br><span class="line">String[] arr = func.apply(10); // 数组的形参是数组大小</span><br></pre></td></tr></table></figure></div>

<h2 id="Stream-API"><a href="#Stream-API" class="headerlink" title="Stream API"></a>Stream API</h2><blockquote>
<p>JDK8新特性</p>
</blockquote>
<ul>
<li>使用Stream API对集合进行操作，就类似于使用SQL执行数据库查询</li>
<li>Stream和Collection的区别<ul>
<li>Collection是一种静态的内存数据结构，核心是数据</li>
<li>Stream是有关计算的，核心是计算</li>
</ul>
</li>
<li>Stream操作流程：创建-&gt;中间操作-&gt;终止操作</li>
</ul>
<h3 id="创建Stream实例"><a href="#创建Stream实例" class="headerlink" title="创建Stream实例"></a>创建Stream实例</h3><p><strong>方法一：通过集合</strong></p>
<p>java8种Collection接口被扩展，提供了两个新的方法</p>
<ul>
<li><code>default Stream&lt;E&gt; stream()</code>: 返回一个顺序流</li>
<li><code>default Stream&lt;E&gt; parallelStream()</code>: 返回一个并行流</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;Integer&gt; stream = list.stream();</span><br></pre></td></tr></table></figure></div>

<p><strong>方法二：通过数组</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;String&gt; stream = Arrays.stream(arr); </span><br></pre></td></tr></table></figure></div>

<p><strong>方法三：通过Stream.of()创建</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;Integer&gt; stream = Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br></pre></td></tr></table></figure></div>

<p><strong>方法四：创建无限流</strong></p>
<p>可以使用<code>Stream.iterate()</code>和<code>Stream.generate()</code>，创建无限流</p>
<ul>
<li>迭代：<code>public static&lt;T&gt; Stream&lt;T&gt; iterate(final T seed, final UnaryOperator&lt;T&gt; f)</code></li>
<li>生成：<code>public static&lt;T&gt; Stream&lt;T&gt; generate(Supplier&lt;T&gt; s)</code></li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;Integer&gt; stream = Stream.iterate(<span class="number">0</span>, x -&gt; x + <span class="number">2</span>);</span><br><span class="line">stream.limit(<span class="number">10</span>).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">Stream&lt;Double&gt; stream1 = Stream.generate(Math::random);</span><br><span class="line">stream1.limit(<span class="number">10</span>).forEach(System.out::println);</span><br></pre></td></tr></table></figure></div>

<h3 id="中间操作"><a href="#中间操作" class="headerlink" title="中间操作"></a>中间操作</h3><p>除非流水线上除法终止操作，否则中间操作不会执行任何处理。所有操作会一次性全部处理</p>
<ul>
<li><strong>筛选和切片</strong></li>
</ul>
<table>
<thead>
<tr>
<th><strong>方   法</strong></th>
<th><strong>描   述</strong></th>
</tr>
</thead>
<tbody><tr>
<td><code>filter(Predicatep)</code></td>
<td>接收Lambda，从流中排除某些元素</td>
</tr>
<tr>
<td><code>distinct()</code></td>
<td>筛选，通过流所生成元素的<code>hashCode()</code>和<code>equals()</code>去除重复元素</td>
</tr>
<tr>
<td><code>limit(long maxSize)</code></td>
<td>截断流，使其元素不超过给定数量</td>
</tr>
<tr>
<td><code>skip(long n)</code></td>
<td>跳过元素，返回一个扔掉了前  n 个元素的流。<br>若流中元素不足 n 个，则返回一个空流。与 limit(n) 互补</td>
</tr>
</tbody></table>
<ul>
<li><strong>映射</strong></li>
</ul>
<table>
<thead>
<tr>
<th><strong>方法</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td><code>map(Function f)</code></td>
<td>函数被应用到每个元素上，将其映射成新的元素</td>
</tr>
<tr>
<td><code>mapToDouble(ToDoubleFunction f)</code></td>
<td>函数被应用到每个元素上，产生新的<code>DoubleStream</code></td>
</tr>
<tr>
<td><code>mapToInt(ToIntFunction  f)</code></td>
<td>函数被应用到每个元素上，产生新的<code>IntStream</code></td>
</tr>
<tr>
<td><code>mapToLong(ToLongFunction  f)</code></td>
<td>函数被应用到每个元素上，产生新的<code>LongStream</code></td>
</tr>
<tr>
<td><code>flatMap(Function  f)</code></td>
<td>将流中的每个值都换成另一个流，然后把所有流连接成一个流</td>
</tr>
</tbody></table>
<ul>
<li><strong>排序</strong></li>
</ul>
<table>
<thead>
<tr>
<th><strong>方法</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td><code>sorted()</code></td>
<td>产生一个新流，其中按自然顺序排序</td>
</tr>
<tr>
<td><code>sorted(Comparator com)</code></td>
<td>产生一个新流，其中按比较器顺序排序</td>
</tr>
</tbody></table>
<h3 id="终止操作"><a href="#终止操作" class="headerlink" title="终止操作"></a>终止操作</h3><ul>
<li>匹配和查找</li>
</ul>
<table>
<thead>
<tr>
<th><strong>方法</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td><code>allMatch(Predicate  p)</code></td>
<td>检查是否匹配所有元素</td>
</tr>
<tr>
<td><code>anyMatch(Predicate  p)</code></td>
<td>检查是否至少匹配一个元素</td>
</tr>
<tr>
<td><code>noneMatch(Predicate  p)</code></td>
<td>检查是否没有匹配所有元素</td>
</tr>
<tr>
<td><code>findFirst()</code></td>
<td>返回第一个元素</td>
</tr>
<tr>
<td><code>findAny()</code></td>
<td>返回当前流中的任意元素</td>
</tr>
<tr>
<td><code>count()</code></td>
<td>返回流中元素总数</td>
</tr>
<tr>
<td><code>max(Comparator c)</code></td>
<td>返回流中最大值</td>
</tr>
<tr>
<td><code>min(Comparator c)</code></td>
<td>返回流中最小值</td>
</tr>
<tr>
<td><code>forEach(Consumer c)</code></td>
<td>内部迭代<br>(使用<code>Collection</code>接口需要用户去做迭代，称为外部迭代)</td>
</tr>
</tbody></table>
<ul>
<li>归约</li>
</ul>
<table>
<thead>
<tr>
<th><strong>方法</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td><code>reduce(T identity, BinaryOperator b)</code></td>
<td>带初始值，可以将流中元素反复结合起来，得到一个值。返回<code>T</code></td>
</tr>
<tr>
<td><code>reduce(BinaryOperator b)</code></td>
<td>不带初始值，可以将流中元素反复结合起来，得到一个值。返回<code>Optional&lt;T&gt;</code></td>
</tr>
</tbody></table>
<ul>
<li>收集</li>
</ul>
<table>
<thead>
<tr>
<th><strong>方   法</strong></th>
<th><strong>描   述</strong></th>
</tr>
</thead>
<tbody><tr>
<td><code>collect(Collector  c)</code></td>
<td>将流转换为其他形式。接收参数：Collector接口的实现</td>
</tr>
</tbody></table>
<p>Collectors类中帮我们实现了很多静态方法，可以帮助我们很方便的实现收集</p>
<table>
<thead>
<tr>
<th><strong>方法</strong></th>
<th><strong>返回类型</strong></th>
<th><strong>作用</strong></th>
<th>举例</th>
</tr>
</thead>
<tbody><tr>
<td><code>toList</code></td>
<td><code>Collector&lt;T, ?, List&lt;T&gt;&gt;</code></td>
<td>收集到List</td>
<td><code>.stream().collect(Collectors.toList());</code></td>
</tr>
<tr>
<td><code>toSet</code></td>
<td><code>Collector&lt;T, ?, Set&lt;T&gt;&gt;</code></td>
<td>收集到Set</td>
<td><code>.stream().collect(Collectors.toSet());</code></td>
</tr>
<tr>
<td><code>toCollection</code></td>
<td><code>Collector&lt;T, ?, C&gt;</code></td>
<td>收集到创建的集合</td>
<td><code>.stream().collect(Collectors.toCollection(ArrayList::new));</code></td>
</tr>
<tr>
<td><code>counting</code></td>
<td><code>Collector&lt;T, ?, Long&gt;</code></td>
<td>计算元素的个数</td>
<td><code>.stream().collect(Collectors.counting());</code></td>
</tr>
<tr>
<td><code>summingInt</code></td>
<td><code>Collector&lt;T, ?, Integer&gt;</code></td>
<td>对Integer属性求和</td>
<td><code>.stream().collect(Collectors.summingInt(Employee::getSalary));</code></td>
</tr>
<tr>
<td><code>averagingInt</code></td>
<td><code>Collector&lt;T, ?, Double&gt;</code></td>
<td>对Integer属性平均</td>
<td><code>.stream().collect(Collectors.averagingInt(Employee::getSalary));</code></td>
</tr>
<tr>
<td><code>summarizingInt</code></td>
<td><code>Collector&lt;T, ?, IntSummaryStatistics&gt;</code></td>
<td>收集流中Integer属性的统计值。如：平均值</td>
<td><code>.stream().collect(Collectors.summarizingInt(Employee::getSalary));</code></td>
</tr>
<tr>
<td><code>joining</code></td>
<td><code>Collector&lt;CharSequence, ?, String&gt;</code></td>
<td>连接流中每个字符串</td>
<td><code>.stream().map(Employee::getName).collect(Collectors.joining());</code></td>
</tr>
<tr>
<td><code>maxBy</code></td>
<td><code>Collector&lt;T, ?, Optional&lt;T&gt;&gt;</code></td>
<td>根据比较器选择最大值</td>
<td><code>.stream().collect(Collectors.maxBy(comparingInt(Employee::getSalary)));</code></td>
</tr>
<tr>
<td><code>minBy</code></td>
<td><code>Collector&lt;T, ?, Optional&lt;T&gt;&gt;</code></td>
<td>根据比较器选择最小值</td>
<td><code>.stream().collect(Collectors.minBy(comparingInt(Employee::getSalary)));</code></td>
</tr>
<tr>
<td><code>reducing</code></td>
<td><code>Collector&lt;T, ?, Optional&lt;T&gt;&gt;</code></td>
<td>从一个作为累加器的初始值开始，利用<code>BinaryOperator</code>逐个结合，从而归约成单个值</td>
<td><code>.stream().collect(Collectors.reducing(0, Employee::getSalar, Integer::sum));</code></td>
</tr>
<tr>
<td><code>collectingAndThen</code></td>
<td><code>Collector&lt;T,A,R&gt;</code></td>
<td>包裹另一个收集器，对其结果转换函数</td>
<td><code>.stream().collect(Collectors.collectingAndThen(Collectors.toList(), List::size));</code></td>
</tr>
<tr>
<td><code>groupingBy</code></td>
<td><code>Collector&lt;T, ?, Map&lt;K, List&lt;T&gt;&gt;&gt;</code></td>
<td>根据某属性值对流分组，属性为K，结果为V</td>
<td><code>.stream().collect(Collectors.groupingBy(Employee::getStatus));</code></td>
</tr>
<tr>
<td><code>partitioningBy</code></td>
<td><code>Collector&lt;T, ?, Map&lt;Boolean, List&lt;T&gt;&gt;&gt;</code></td>
<td>根据true或false进行分区</td>
<td><code>.stream().collect(Collectors.partitioningBy(Employee::getManage));</code></td>
</tr>
</tbody></table>
<h2 id="Optional类"><a href="#Optional类" class="headerlink" title="Optional类"></a>Optional类</h2><blockquote>
<p>JDK8新特性</p>
</blockquote>
<p><code>Optional&lt;T&gt;</code> 类<code>java.util.Optional</code> 是一个容器类，它可以保存类型T的值，代表这个值存在。或者仅仅保存null，表示这个值不存在。如果值存在，则isPresent()方法会返回true，调用get()方法会返回该对象。</p>
<ul>
<li>创建Optional类的方法：</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> &lt;T&gt; Optional&lt;T&gt; <span class="title function_">empty</span><span class="params">()</span>;				<span class="comment">// 创建空的Optional实例</span></span><br><span class="line"><span class="keyword">static</span> &lt;T&gt; Optional&lt;T&gt; <span class="title function_">of</span><span class="params">(T value)</span>;			<span class="comment">// 创建Optional实例，value必须非空</span></span><br><span class="line"><span class="keyword">static</span> &lt;T&gt; Optional&lt;T&gt; <span class="title function_">ofNullable</span><span class="params">(T value)</span>;	<span class="comment">// 创建Optional实例，value可以为空，也可能为非空</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li>判断Optional容器中是否包含对象：</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">boolean isPresent();	// 判断值是否存在</span><br><span class="line">void ifPresent(Consumer&lt;? super T&gt; consumer) //若值存在，就对它进行Consumer指定的操作</span><br></pre></td></tr></table></figure></div>

<ul>
<li>获取Optional容器的对象</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">T <span class="title function_">get</span><span class="params">()</span>				<span class="comment">// 存在则返回值，否则抛异常</span></span><br><span class="line">T <span class="title function_">orElse</span><span class="params">(T other)</span>	<span class="comment">// 存在则返回值，为空就用指定的默认值</span></span><br><span class="line">T <span class="title function_">orElseGet</span><span class="params">(Supplier&lt;? extends T&gt; other)</span>	<span class="comment">// 存在则返回值，为空就用Supplier接口提供的值</span></span><br><span class="line">T <span class="title function_">orElseThrow</span><span class="params">(Supplier&lt;? extends X&gt; exceptionSupplier)</span> <span class="comment">// 存在则返回值，为空就用抛出你指定的异常类型</span></span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>JDK9-11新增了特性</p>
</blockquote>
<table>
<thead>
<tr>
<th><strong>新增方法</strong></th>
<th><strong>描述</strong></th>
<th><strong>新增的版本</strong></th>
</tr>
</thead>
<tbody><tr>
<td><code>boolean isEmpty()</code></td>
<td>判断value是否为空</td>
<td>JDK  11</td>
</tr>
<tr>
<td><code>ifPresentOrElse(Consumer&lt;? super T&gt; action, Runnable emptyAction)</code></td>
<td>非空执行参数1；<br>否则空执行参数2</td>
<td>JDK  9</td>
</tr>
<tr>
<td><code>Optional&lt;T&gt; or(Supplier&lt;? extends Optional&lt;? extends T&gt;&gt; supplier)</code></td>
<td>非空返回对应的Optional；<br>否则返回参数封装的Optional</td>
<td>JDK  9</td>
</tr>
<tr>
<td><code>Stream&lt;T&gt; stream()</code></td>
<td>非空返回仅此value的Stream；<br>否则返回空Stream</td>
<td>JDK  9</td>
</tr>
<tr>
<td><code>T orElseThrow()</code></td>
<td>非空返回value；<br>否则抛异常<br>NoSuchElementException</td>
<td>JDK  10</td>
</tr>
</tbody></table>
<h2 id="可以创建空Stream"><a href="#可以创建空Stream" class="headerlink" title="可以创建空Stream"></a>可以创建空Stream</h2><blockquote>
<p>JDK9新特性</p>
</blockquote>
<p>Java8中Stream不能完全为空，否则会报空指针异常。Java9中的<code>ofNullable</code>方法允许创建一个单元素Stream，可以包含空元素</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 可以</span></span><br><span class="line">Stream&lt;String&gt; stringStream = Stream.of(<span class="string">"AA"</span>, <span class="string">"BB"</span>, <span class="literal">null</span>);</span><br><span class="line"><span class="type">Long</span> <span class="variable">num</span> <span class="operator">=</span> stringStream.collect(Collectors.counting()); <span class="comment">// 3</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// 不可以</span></span><br><span class="line">Stream&lt;String&gt; stringStream = Stream.of(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以</span></span><br><span class="line">Stream&lt;String&gt; stringStream = Stream.ofNullable(<span class="literal">null</span>);</span><br><span class="line"><span class="type">Long</span> <span class="variable">num</span> <span class="operator">=</span> stringStream.collect(Collectors.counting()); <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以</span></span><br><span class="line">Stream&lt;String&gt; stringStream = Stream.ofNullable(<span class="string">"AA"</span>);</span><br><span class="line"><span class="type">Long</span> <span class="variable">num</span> <span class="operator">=</span> stringStream.collect(Collectors.counting()); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></div>

<h2 id="iterator终止方式"><a href="#iterator终止方式" class="headerlink" title="iterator终止方式"></a>iterator终止方式</h2><blockquote>
<p>JDK9新特性</p>
</blockquote>
<p>定义了重载的新的iterator方法，可以定义终止条件</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 以前需要靠limit</span></span><br><span class="line">Stream.iterate(<span class="number">1</span>,i -&gt; i + <span class="number">1</span>).limit(<span class="number">10</span>).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 现在可以定义终止条件</span></span><br><span class="line">Stream.iterate(<span class="number">1</span>,i -&gt; i &lt; <span class="number">100</span>,i -&gt; i + <span class="number">1</span>).forEach(System.out::println);</span><br></pre></td></tr></table></figure></div>

<h2 id="jshell命令"><a href="#jshell命令" class="headerlink" title="jshell命令"></a>jshell命令</h2><blockquote>
<p>JDK9新特性</p>
</blockquote>
<ul>
<li>jShell命令是Java的REPL工具（交互式编程环境，read-evaluate-print-loop），可以像python那样一行一行执行</li>
<li>命令行输入<code>jshell</code>即可开始使用</li>
</ul>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">jshell</span><br></pre></td></tr></table></figure></div>

<ul>
<li>不是很常用，略过</li>
</ul>
<h2 id="String存储结构和API变更"><a href="#String存储结构和API变更" class="headerlink" title="String存储结构和API变更"></a>String存储结构和API变更</h2><blockquote>
<p>JDK9新特性</p>
</blockquote>
<h3 id="存储结构变化"><a href="#存储结构变化" class="headerlink" title="存储结构变化"></a>存储结构变化</h3><p>产生背景：</p>
<blockquote>
<p>The current implementation of the String class stores characters in a char array, using two bytes (sixteen bits) for each character. Data gathered from many different applications indicates that strings are a major component of heap usage and, moreover, that most String objects contain only Latin-1 characters. Such characters require only one byte of storage, hence half of the space in the internal char arrays of such String objects is going unused.</p>
</blockquote>
<p>使用说明：</p>
<blockquote>
<p>We propose to change the internal representation of the String class from a UTF-16 char array to a byte array plus an encoding-flag field. The new String class will store characters encoded either as ISO-8859-1/Latin-1 (one byte per character), or as UTF-16 (two bytes per character), based upon the contents of the string. The encoding flag will indicate which encoding is used.</p>
</blockquote>
<p>对StringBuilder，StringBuffer等来说也是如此</p>
<blockquote>
<p>String-related classes such as AbstractStringBuilder, StringBuilder, and StringBuffer will be updated to use the same representation, as will the HotSpot VM’s intrinsic string operations.</p>
</blockquote>
<p>结论：String 不用 char[] 来存储，改成了 byte[] 加上编码标记，节约了一些空间</p>
<h3 id="API变化"><a href="#API变化" class="headerlink" title="API变化"></a>API变化</h3><h4 id="新增字符串处理方法"><a href="#新增字符串处理方法" class="headerlink" title="新增字符串处理方法"></a>新增字符串处理方法</h4><blockquote>
<p>JDK11新特性</p>
</blockquote>
<table>
<thead>
<tr>
<th><strong>描述</strong></th>
<th><strong>举例</strong></th>
</tr>
</thead>
<tbody><tr>
<td>判断字符串是否为空白</td>
<td><code>.isBlank()</code></td>
</tr>
<tr>
<td>去除首尾空白</td>
<td><code>.strip()</code></td>
</tr>
<tr>
<td>去除尾部空格</td>
<td><code>.stripTrailing()</code></td>
</tr>
<tr>
<td>去除首部空格</td>
<td><code>.stripLeading()</code></td>
</tr>
<tr>
<td>复制字符串</td>
<td><code>.repeat(3)</code></td>
</tr>
<tr>
<td>字符串按行分为流</td>
<td><code>Stream&lt;String&gt; lines = str.lines();</code></td>
</tr>
</tbody></table>
<h4 id="实现了Constable接口"><a href="#实现了Constable接口" class="headerlink" title="实现了Constable接口"></a>实现了Constable接口</h4><blockquote>
<p>JDK12新特性</p>
</blockquote>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">String</span> <span class="keyword">implements</span> <span class="title class_">java</span>.io.Serializable, </span><br><span class="line">									Comparable&lt;String&gt;, </span><br><span class="line">									CharSequence, </span><br><span class="line">									Constable, </span><br><span class="line">									ConstantDesc {}</span><br></pre></td></tr></table></figure></div>

<ul>
<li>Constable接口</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Constable定义了方法，用于返回Optianl对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Constable</span> {</span><br><span class="line">	Optional&lt;? <span class="keyword">extends</span> <span class="title class_">ConstantDesc</span>&gt; describeConstable();</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<ul>
<li><code>JDK12</code>实现接口的，其实就是用了<code>Optional.of</code></li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Optional&lt;String&gt; <span class="title function_">describeConstable</span><span class="params">()</span> {</span><br><span class="line">	<span class="keyword">return</span> Optional.of(<span class="built_in">this</span>);</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">Optional&lt;String&gt; optional = str.describeConstable();</span><br></pre></td></tr></table></figure></div>

<h4 id="transform方法"><a href="#transform方法" class="headerlink" title="transform方法"></a>transform方法</h4><blockquote>
<p>JDK12新特性</p>
</blockquote>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;R&gt; R <span class="title function_">transform</span><span class="params">(Function&lt;? <span class="built_in">super</span> String, ? extends R&gt; f)</span> {</span><br><span class="line">	<span class="keyword">return</span> f.apply(<span class="built_in">this</span>);</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>例代码子：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 有一点类似流中的map</span></span><br><span class="line"><span class="string">"foo"</span>.transform(input -&gt; input + <span class="string">" bar"</span>).transform(String::toUpperCase)</span><br></pre></td></tr></table></figure></div>

<h2 id="局部变量类型推断"><a href="#局部变量类型推断" class="headerlink" title="局部变量类型推断"></a>局部变量类型推断</h2><blockquote>
<p>JDK10新特性</p>
</blockquote>
<p>本特性允许开发人员省略通常不必要的类型声明</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 局部变量</span></span><br><span class="line"><span class="type">var</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 增强for循环</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> v : list) {</span><br><span class="line">    System.out.println(v);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 普通for循环</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">var</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) {</span><br><span class="line">    System.out.println(i);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回值类型含复杂泛型结构</span></span><br><span class="line"><span class="comment">//Iterator&lt;Map.Entry&lt;Integer, Student&gt;&gt; iterator = set.iterator();</span></span><br><span class="line"><span class="type">var</span> <span class="variable">iterator</span> <span class="operator">=</span> set.iterator();</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>注意：</p>
<ul>
<li>var不是关键词，而是一个类型名</li>
<li>var不会改变Java是一门静态类型语言的事实。编译器负责推断出结果，将结果写入字节码文件。</li>
</ul>
</blockquote>
<h2 id="文本块"><a href="#文本块" class="headerlink" title="文本块"></a>文本块</h2><blockquote>
<p>JDK13新特性</p>
</blockquote>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 以前</span></span><br><span class="line"><span class="string">"line1\nline2\nline3\n"</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// 现在</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">line1</span></span><br><span class="line"><span class="string">line2</span></span><br><span class="line"><span class="string">line3</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// 如果最后不需要换行</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">line1</span></span><br><span class="line"><span class="string">line2</span></span><br><span class="line"><span class="string">line3"""</span></span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>JDK14预览版增加了两个新的语法，JDK15转正</p>
</blockquote>
<ul>
<li><code>\</code>：取消换行</li>
<li><code>\s</code>：表示一个空格</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">sql2</span> <span class="operator">=</span> <span class="string">"""</span></span><br><span class="line"><span class="string">        SELECT id,NAME,email \</span></span><br><span class="line"><span class="string">        FROM customers\s\</span></span><br><span class="line"><span class="string">        WHERE id &gt; 4 \</span></span><br><span class="line"><span class="string">        ORDER BY email DESC</span></span><br><span class="line"><span class="string">        """</span>;</span><br></pre></td></tr></table></figure></div>

<h2 id="switch表达式"><a href="#switch表达式" class="headerlink" title="switch表达式"></a>switch表达式</h2><blockquote>
<p>JDK12预览版特性，JDK14转正</p>
</blockquote>
<ul>
<li>使用<code>case L -&gt;</code></li>
<li>省略了break语句</li>
<li>可以将多个case合并在一起</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Fruit</span> <span class="variable">fruit</span> <span class="operator">=</span> Fruit.GRAPE;</span><br><span class="line"><span class="keyword">switch</span>(fruit){</span><br><span class="line">    <span class="keyword">case</span> PEAR -&gt; System.out.println(<span class="number">4</span>);</span><br><span class="line">    <span class="keyword">case</span> APPLE,MANGO,GRAPE -&gt; System.out.println(<span class="number">5</span>);</span><br><span class="line">    <span class="keyword">case</span> ORANGE,PAPAYA -&gt; System.out.println(<span class="number">6</span>);</span><br><span class="line">    <span class="keyword">default</span> -&gt; <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">"No Such Fruit:"</span> + fruit);</span><br><span class="line">};</span><br></pre></td></tr></table></figure></div>

<ul>
<li>更进一步，还可以处理返回值</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Fruit</span> <span class="variable">fruit</span> <span class="operator">=</span> Fruit.GRAPE;</span><br><span class="line"><span class="type">int</span> <span class="variable">numberOfLetters</span> <span class="operator">=</span> <span class="keyword">switch</span>(fruit){</span><br><span class="line">    <span class="keyword">case</span> PEAR -&gt; <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">case</span> APPLE,MANGO,GRAPE -&gt; <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">case</span> ORANGE,PAPAYA -&gt; <span class="number">6</span>;</span><br><span class="line">    <span class="keyword">default</span> -&gt; <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">"No Such Fruit:"</span> + fruit);</span><br><span class="line">};</span><br></pre></td></tr></table></figure></div>

<ul>
<li>JDK13中引入了yield语句。switch语句应使用yield，而不是return。return会直接跳出当前方法，而yield只会跳出当前switch块。</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">x</span> <span class="operator">=</span> <span class="string">"3"</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="keyword">switch</span> (x) {</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"1"</span> -&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"2"</span> -&gt; <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">default</span> -&gt; {</span><br><span class="line">        <span class="keyword">yield</span> <span class="number">3</span>;</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>JDK17预览特性：switch的模式匹配</p>
</blockquote>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 自动完成模式匹配，大大简化代码</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">switch</span> (o) {</span><br><span class="line">    <span class="keyword">case</span> Integer i -&gt; String.format(<span class="string">"int %d"</span>, i);</span><br><span class="line">    <span class="keyword">case</span> Long l    -&gt; String.format(<span class="string">"long %d"</span>, l);</span><br><span class="line">    <span class="keyword">case</span> Double d  -&gt; String.format(<span class="string">"double %f"</span>, d);</span><br><span class="line">    <span class="keyword">case</span> String s  -&gt; String.format(<span class="string">"String %s"</span>, s);</span><br><span class="line">    <span class="keyword">default</span>        -&gt; o.toString();</span><br><span class="line">};</span><br></pre></td></tr></table></figure></div>

<h2 id="instanceof的模式匹配"><a href="#instanceof的模式匹配" class="headerlink" title="instanceof的模式匹配"></a>instanceof的模式匹配</h2><blockquote>
<p>JDK14预览版特性，JDK16转正</p>
</blockquote>
<p>实现简洁的类型安全代码。使用该方法，可以减少Java中显示强制转换的数量。</p>
<ul>
<li>旧写法</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (obj <span class="keyword">instanceof</span> String) {</span><br><span class="line">    <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> (String) obj; <span class="comment">//需要强转</span></span><br><span class="line">    str.contains(..);</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<ul>
<li>现在的写法</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (obj <span class="keyword">instanceof</span> String str) {</span><br><span class="line">    str.contains(..);</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h2 id="Record"><a href="#Record" class="headerlink" title="Record"></a>Record</h2><blockquote>
<p>JDK14预览版推出，JDK16转正</p>
</blockquote>
<p>用<code>record</code> 声明一个类时，该类将自动拥有以下功能：</p>
<ul>
<li>获取成员变量的简单方法，比如例题中的 name() 和 partner() 。注意区别于我们平常getter()的写法。</li>
<li>一个 equals 方法的实现，执行比较时会比较该类的所有成员属性。</li>
<li>重写 hashCode() 方法。</li>
<li>一个可以打印该类所有成员属性的 toString() 方法。</li>
<li>包含所有参数的构造方法。</li>
</ul>
<p>此外：</p>
<ul>
<li><p>还可以定义静态字段、静态方法、构造器或实例方法。</p>
</li>
<li><p>不能定义实例字段；类不能声明为abstract；不能声明显式的父类等。</p>
</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//不可以将record定义的类声明为abstract</span></span><br><span class="line"><span class="comment">//不可以给record定义的类声明显式的父类</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">record</span> <span class="title class_">Person</span><span class="params">(String name,Person partner)</span> {</span><br><span class="line"></span><br><span class="line">    <span class="comment">//还可以声明静态的属性、静态的方法、构造器、实例方法</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String nation;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">showNation</span><span class="params">()</span>{</span><br><span class="line">        <span class="keyword">return</span> nation;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name)</span>{</span><br><span class="line">        <span class="built_in">this</span>(name,<span class="literal">null</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getNameInUpperCase</span><span class="params">()</span>{</span><br><span class="line">        <span class="keyword">return</span> name.toUpperCase();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不可以声明非静态的属性</span></span><br><span class="line">    <span class="comment">// private int id;</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h2 id="其它结构变化"><a href="#其它结构变化" class="headerlink" title="其它结构变化"></a>其它结构变化</h2><h3 id="下划线使用的限制"><a href="#下划线使用的限制" class="headerlink" title="下划线使用的限制"></a>下划线使用的限制</h3><blockquote>
<p>JDK9新特性</p>
</blockquote>
<p>现在不允许使用”_”作为变量名</p>
<h3 id="更简化的编译运行程序"><a href="#更简化的编译运行程序" class="headerlink" title="更简化的编译运行程序"></a>更简化的编译运行程序</h3><blockquote>
<p>JDK11新特性</p>
</blockquote>
<p>以前</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">// 编译</span><br><span class="line">javac JavaStack.java</span><br><span class="line"></span><br><span class="line">// 运行</span><br><span class="line">java JavaStack</span><br></pre></td></tr></table></figure></div>

<p>现在</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">java JavaStack.java</span><br></pre></td></tr></table></figure></div>

<h2 id="GC方面新特性"><a href="#GC方面新特性" class="headerlink" title="GC方面新特性"></a>GC方面新特性</h2><ul>
<li>此部分待更新</li>
</ul>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a class="link" href="https://zhuanlan.zhihu.com/p/458509231">https://zhuanlan.zhihu.com/p/458509231 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link" href="https://blog.csdn.net/best_luxi/article/details/122543074/">https://blog.csdn.net/best_luxi/article/details/122543074/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link" href="https://www.bilibili.com/video/BV1PY411e7J6">https://www.bilibili.com/video/BV1PY411e7J6 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java基础</tag>
      </tags>
  </entry>
  <entry>
    <title>2023阿里灵犀互娱春招算法题</title>
    <url>//post/50833/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>原文地址：<a href="https://xuedongyun.cn/post/50833/">https://xuedongyun.cn/post/50833/</a></p>
<h2 id="怪物砍法"><a href="#怪物砍法" class="headerlink" title="怪物砍法"></a>怪物砍法</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>题目已经找不到了，只能口述。怪物有n滴血，你有k个技能，每个技能能打1, 2, 3, 4, …, k滴落血。假设每个技能都能用无限次，每个回合用一次技能，不限回合数。问恰好能把怪物打死的打法。</p>
<p><strong>输入描述</strong></p>
<blockquote>
<p>输入两个正整数n和k，代表怪物的血量和技能的数量</p>
<p>1 &lt;= n &lt;= 1000</p>
<p>1 &lt;= k &lt;= 100</p>
</blockquote>
<p><strong>输出描述</strong></p>
<blockquote>
<p>一个整数，代表打法的数量对10^9+7取模的值。</p>
</blockquote>
<p><strong>样例输入</strong></p>
<blockquote>
<p>3 2</p>
</blockquote>
<p><strong>样例输出</strong></p>
<blockquote>
<p>3</p>
</blockquote>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>刚开始做这道题，一直在想打法可能会重复，该如何解决重复的问题。后面想到一种二维dp的方法。假设<code>dp(i, j)</code>表示怪物i滴血，j次打死的打法数量，那么有状态转移方程：</p>
<p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.663ex;" xmlns="http://www.w3.org/2000/svg" width="27.732ex" height="2.36ex" role="img" focusable="false" viewBox="0 -750 12257.5 1043.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(520,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mo" transform="translate(1023,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(1301,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1646,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(1924,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(2202,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(2614,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(3169.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="munder" transform="translate(4225.6,0)"><g data-mml-node="mo"><path data-c="2211" d="M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z"></path></g><g data-mml-node="mi" transform="translate(1089,-285.4) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g><g data-mml-node="mi" transform="translate(5899.6,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(6419.6,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mo" transform="translate(6922.6,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(7200.6,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(7767.8,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(8768.1,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(9289.1,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(9567.1,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(9845.1,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(10479.3,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(11479.5,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(11979.5,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></svg></mjx-container></p>
<p>因为最后一次伤害不同，所以一定不会出现重复的情况。打死一只n滴血的怪物需要的回合数最少为：<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.798ex;" xmlns="http://www.w3.org/2000/svg" width="3.964ex" height="2.495ex" role="img" focusable="false" viewBox="0 -750 1752.3 1102.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2308" d="M174 734Q178 746 190 750H298H369Q400 750 411 747T422 730T411 713T372 709Q365 709 345 709T310 710H214V-235Q206 -248 196 -250Q192 -250 189 -249T184 -247T180 -244T178 -241T176 -237T174 -234V734Z"></path></g><g data-mml-node="mfrac" transform="translate(444,0)"><g data-mml-node="mi" transform="translate(220,394) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(247.9,-345) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><rect width="624.3" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(1308.3,0)"><path data-c="2309" d="M21 717T21 730T32 746T75 750H147H256Q266 742 269 735V-235Q262 -248 251 -250Q247 -250 244 -249T239 -247T235 -244T233 -241T231 -237T229 -234V710H133Q119 710 99 710T71 709Q43 709 32 713Z"></path></g></g></g></svg></mjx-container>，最大为：<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.357ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 600 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container>。我们只需要将回合数在这个区间的打法求和即可。</p>
<h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">long</span> <span class="variable">MOD</span> <span class="operator">=</span> <span class="number">1_000_000_007</span>;</span><br><span class="line"></span><br><span class="line">k = k &gt; n ? n : k;</span><br><span class="line"><span class="type">int</span> <span class="variable">minSkillNum</span> <span class="operator">=</span> (<span class="type">int</span>) Math.ceil(n / k);</span><br><span class="line"><span class="type">int</span> <span class="variable">maxSkillNum</span> <span class="operator">=</span> n;</span><br><span class="line"></span><br><span class="line"><span class="comment">// i滴血，j刀砍死</span></span><br><span class="line"><span class="type">long</span>[][] dp = <span class="keyword">new</span> <span class="title class_">long</span>[n + <span class="number">1</span>][maxSkillNum + <span class="number">1</span>];</span><br><span class="line"><span class="comment">// 1刀砍死</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= k; i++) {</span><br><span class="line">    dp[i][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">// 血只有1滴</span></span><br><span class="line">dp[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt;= n; i++) {</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> Math.max((<span class="type">int</span>) Math.ceil(i / k), <span class="number">2</span>); j &lt;= i; j++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">1</span>; l &lt;= Math.min(k, i-<span class="number">1</span>); l++) {</span><br><span class="line">            dp[i][j] += dp[i - l][j - <span class="number">1</span>];</span><br><span class="line">            dp[i][j] = dp[i][j] % MOD;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">long</span> <span class="variable">total</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> minSkillNum; i &lt;= maxSkillNum; i++) {</span><br><span class="line">    total += dp[n][i];</span><br><span class="line">    total = total % MOD;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">System.out.println(total)</span><br></pre></td></tr></table></figure></div>

<p>算法复杂度：<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.798ex;" xmlns="http://www.w3.org/2000/svg" width="15.728ex" height="2.495ex" role="img" focusable="false" viewBox="0 -750 6951.6 1102.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(822.2,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mo" transform="translate(1822.4,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(2211.4,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(2954.7,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mfrac" transform="translate(3954.9,0)"><g data-mml-node="mi" transform="translate(220,394) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(247.9,-345) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><rect width="624.3" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(4819.2,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(5430.4,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mi" transform="translate(6430.6,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g></g></svg></mjx-container></p>
<h3 id="更优解法"><a href="#更优解法" class="headerlink" title="更优解法"></a>更优解法</h3><p>之前想复杂了，假设<code>dp[i]</code>表示i滴血的打法，那么有状态转移方程：</p>
<p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.663ex;" xmlns="http://www.w3.org/2000/svg" width="19.455ex" height="2.36ex" role="img" focusable="false" viewBox="0 -750 8599.1 1043.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(520,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mo" transform="translate(1023,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(1301,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1646,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(2201.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="munder" transform="translate(3257.6,0)"><g data-mml-node="mo"><path data-c="2211" d="M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z"></path></g><g data-mml-node="mi" transform="translate(1089,-285.4) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g><g data-mml-node="mi" transform="translate(4931.6,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(5451.6,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mo" transform="translate(5954.6,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(6232.6,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(6799.8,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(7800.1,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(8321.1,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></svg></mjx-container></p>
<p>我们只看最后一击即可，因此绝不会重复</p>
<h4 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h4><blockquote>
<p>一定要考虑怪物0滴血的情况。比如怪物4滴血时，可以用伤害为4的技能一刀打死，此时就会出现加<code>dp[0]</code>的情况</p>
</blockquote>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">1000</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">long</span> <span class="variable">MOD</span> <span class="operator">=</span> <span class="number">1_000_000_007</span>;</span><br><span class="line"></span><br><span class="line">k = k &gt; n ? n : k;</span><br><span class="line"></span><br><span class="line"><span class="type">long</span>[] dp = <span class="keyword">new</span> <span class="title class_">long</span>[n+<span class="number">1</span>];</span><br><span class="line"><span class="comment">// 怪物0滴血，只有一种砍法</span></span><br><span class="line">dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) {</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= k; j++) {</span><br><span class="line">        <span class="keyword">if</span> (i - j &lt; <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">        dp[i] += dp[i - j];</span><br><span class="line">        dp[i] = dp[i] % MOD;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line">System.out.println(dp[n]);</span><br></pre></td></tr></table></figure></div>

<p>算法复杂度：<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="5.302ex" height="1.595ex" role="img" focusable="false" viewBox="0 -694 2343.4 705"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(822.2,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mi" transform="translate(1822.4,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g></g></svg></mjx-container></p>
]]></content>
      <categories>
        <category>算法题</category>
        <category>动态规划</category>
      </categories>
  </entry>
  <entry>
    <title>Github Pages使用自定义域名</title>
    <url>//post/56472/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们可以将静态网页部署在Github Pages上，实现个人主页的搭建。Github Pages的默认访问路径为username.github.io，对于访问来说是有一些麻烦的。因此文本将介绍如何购买自己的域名，并借此来访问Github Pages上的网页。</p>
<p>原文地址：<a href="https://xuedongyun.cn/post/56472/">https://xuedongyun.cn/post/56472/</a></p>
<h2 id="简单概念"><a href="#简单概念" class="headerlink" title="简单概念"></a>简单概念</h2><h3 id="域名级数"><a href="#域名级数" class="headerlink" title="域名级数"></a>域名级数</h3><ul>
<li>顶级域名：又名一级域名，如<code>.com</code>, <code>.org</code>, <code>.net</code>等</li>
<li>二级域名：般是指域名注册人选择使用的网上名称，如<code>baidu.com</code>等</li>
<li>三级域名：可以当做是二级域名的子域名，如<code>zhuanlan.zhihu.com</code>等</li>
</ul>
<h3 id="浏览器输入URL后都发生了什么"><a href="#浏览器输入URL后都发生了什么" class="headerlink" title="浏览器输入URL后都发生了什么"></a>浏览器输入URL后都发生了什么</h3><p>我们这里只简单谈谈DNS的解析过程。众所周知，web应用是通过IP+端口的方式进行访问的，其中浏览器默认访问80端口，也即我们需要通过IP地址来唯一确认访问的服务器。但是IP不方便记忆，域名则可以解决这一问题。域名系统（Domain Name System，缩写：DNS）是互联网的一项服务。它作为将域名和IP地址相互映射的一个分布式数据库，能够使人更方便地访问互联网。用户在输入网址后，首先要进行的是DNS域名解析，将地址解析为IP地址。具体来说，在输入一个URL后，DNS域名解析过程如下：</p>
<ul>
<li><strong>浏览器</strong>的缓存：先检查浏览器的DNS缓存，没有则调用系统库函数进行查询</li>
<li><strong>操作系统</strong>的缓存：先检查host文件有无指定，没有才检查操作系统的DNS缓存，再没有则向DNS服务器发送查询请求</li>
<li><strong>路由器</strong>的缓存：路由器也有DNS缓存</li>
<li><strong>本地域名服务器</strong>的缓存：通常由运营商提供，没有则进行递归查询</li>
<li><strong>递归查询</strong>如：<code>本地域名服务器</code>会依次查询<code>根域名服务器</code>、<code>顶级域名服务器</code>、<code>权限域名服务器</code></li>
</ul>
<p><img lazyload="" src="/images/loading.svg" data-src="https://s2.loli.net/2023/04/20/sLa8QNCZyPHReck.png" alt="20180505103009749"></p>
<ul>
<li>最终我们的浏览器会收到域名所对应的IP地址</li>
</ul>
<p>后续，浏览器还会进行<code>TCP连接</code>、<code>处理请求</code>、<code>接受响应</code>、<code>渲染页面</code>等流程，这也就是另外的故事了</p>
<h2 id="购买域名"><a href="#购买域名" class="headerlink" title="购买域名"></a>购买域名</h2><p>目前来说阿里云，腾讯云等平台都可以很方便的购买域名。一般来说<code>.com</code>, <code>.cn</code>后缀会贵一些，如果想便宜一些的，可以购买<code>.top</code>, <code>.xyz</code>, <code>.net</code>等。总的来说一年的费用一般在几元到十几元不等。我个人在<a class="link" href="https://wanwang.aliyun.com/domain">阿里云域名注册 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>处购买xuedongyun.cn，一年的价格大约35元。</p>
<h2 id="配置DNS"><a href="#配置DNS" class="headerlink" title="配置DNS"></a>配置DNS</h2><p>已经在阿里云购买域名后，可以前往阿里云的<a class="link" href="https://wanwang.aliyun.com/domain/dns">云解析DNS <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>处配置DNS的解析记录。</p>
<ul>
<li>进入云解析DNS-&gt;域名解析，添加我们购买的域名，如xuedongyun.cn</li>
<li>点击添加的域名，进入解析设置，点击添加记录</li>
</ul>
<table>
<thead>
<tr>
<th>记录类型</th>
<th>主机记录</th>
<th>记录值</th>
</tr>
</thead>
<tbody><tr>
<td>CNAME（即指向另一个域名）</td>
<td>即域名前缀，如www等。你也可以选择写@，表示不带前缀。</td>
<td>pigeon-dove.github.com</td>
</tr>
</tbody></table>
<p><img lazyload="" src="/images/loading.svg" data-src="https://s2.loli.net/2023/04/20/vVy4UJxRM3fIXZ6.png" alt="image-20230420163705607"></p>
<h2 id="为Github-Pages绑定域名"><a href="#为Github-Pages绑定域名" class="headerlink" title="为Github Pages绑定域名"></a>为Github Pages绑定域名</h2><p>在Github Pages中，点击Settings-&gt;Pages-&gt;Custom domain，将我们注册的域名填进去即可。记得勾选<code>Enforce HTTPS</code>开启HTTPS。等待片刻后我们就可以使用自己的域名访问网站了。</p>
<p><img lazyload="" src="/images/loading.svg" data-src="https://s2.loli.net/2023/04/20/ZgIBSiNEpMu7hXJ.png" alt="image-20230420163846171"></p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a class="link" href="https://zhuanlan.zhihu.com/p/529826545">https://zhuanlan.zhihu.com/p/529826545 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link" href="https://zhuanlan.zhihu.com/p/80551769">https://zhuanlan.zhihu.com/p/80551769 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>工具和应用</category>
        <category>github</category>
      </categories>
      <tags>
        <tag>博客搭建系列</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo踩坑：hexo使用过程中遇到的问题</title>
    <url>//post/9962/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>原文地址：<a href="https://xuedongyun.cn/post/9962/">https://xuedongyun.cn/post/9962/</a></p>
<h2 id="问题一：部署到Github缺少README"><a href="#问题一：部署到Github缺少README" class="headerlink" title="问题一：部署到Github缺少README"></a>问题一：部署到Github缺少README</h2><ul>
<li><code>/source</code>文件夹下的md文件会被渲染为html</li>
</ul>
<h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><ul>
<li>在<code>/source</code>文件夹下创建<code>README.md</code>，在配置文件<code>_config.yml</code>中设置过滤项</li>
</ul>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">skip_render:</span> <span class="string">README.md</span></span><br></pre></td></tr></table></figure></div>

<h2 id="问题二：部署导致Custom-domain被清空"><a href="#问题二：部署导致Custom-domain被清空" class="headerlink" title="问题二：部署导致Custom domain被清空"></a>问题二：部署导致Custom domain被清空</h2><ul>
<li>使用hexo-deployer-git插件，每次部署后Custom domain会被清空，无法使用自己的域名访问网页</li>
</ul>
<h3 id="解决方法-1"><a href="#解决方法-1" class="headerlink" title="解决方法"></a>解决方法</h3><ul>
<li>在<code>/source</code>文件夹下新建<code>CNAME</code>文件，内容设为Custom domain的值即可</li>
</ul>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a class="link" href="https://blog.maodai.site/2019/05/28/%E7%94%A8Hexo%E5%BB%BA%E7%AB%8BBlog%E6%97%B6%E6%89%80%E7%A2%B0%E5%88%B0%E7%9A%84%E5%90%84%E7%A7%8D%E5%9D%91/">https://blog.maodai.site/2019/05/28/%E7%94%A8Hexo%E5%BB%BA%E7%AB%8BBlog%E6%97%B6%E6%89%80%E7%A2%B0%E5%88%B0%E7%9A%84%E5%90%84%E7%A7%8D%E5%9D%91/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>工具和应用</category>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>博客搭建系列</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建个人图床</title>
    <url>//post/28873/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在编写markdown文档的过程中，免不了插入一些图片。但是在分享的时候，这些带有图片资源的markdown就显得十分麻烦了。同时我也有写博客的习惯，hexo等用md转前端页面的项目在处理图片时也会遇到各种不舒服的操作。因此搭建自己的图床，让markdown成为真正的纯文本文件是一个不错的选择。个人需要的所有图片都可以放在图床中，使用链接分享。</p>
<p>原文地址：<a href="https://xuedongyun.cn/post/28873/">https://xuedongyun.cn/post/28873/</a></p>
<h2 id="注册SMMS图床服务"><a href="#注册SMMS图床服务" class="headerlink" title="注册SMMS图床服务"></a>注册SMMS图床服务</h2><ul>
<li><p>注册SMMS账号</p>
<ul>
<li><p>海外版地址：<a class="link" href="https://sm.ms/">https://sm.ms/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</li>
<li><p>国内版地址：<a class="link" href="https://smms.app/">https://smms.app/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</li>
</ul>
</li>
<li><p>获取SMMS服务的Token</p>
<ul>
<li>在User-&gt;DashBoard-&gt;API Token中获取</li>
</ul>
</li>
</ul>
<p><img lazyload="" src="/images/loading.svg" data-src="https://s2.loli.net/2023/04/19/W7MOSauNJ1LFf63.png" alt="image-20230419200014848"></p>
<h2 id="下载PicGo作为管理软件"><a href="#下载PicGo作为管理软件" class="headerlink" title="下载PicGo作为管理软件"></a>下载PicGo作为管理软件</h2><ul>
<li>下载地址：<a class="link" href="https://molunerfinn.com/PicGo/">https://molunerfinn.com/PicGo/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li>图床设置中选择SM.MS，Token填写我们自己获取的Token，域名写对应的比如<code>smms.app</code>即可</li>
</ul>
<p><img lazyload="" src="/images/loading.svg" data-src="https://s2.loli.net/2023/04/19/XLo2gFydi65PHq4.png" alt="image-20230419200030229"></p>
<h2 id="Typora中配置图片上传服务"><a href="#Typora中配置图片上传服务" class="headerlink" title="Typora中配置图片上传服务"></a>Typora中配置图片上传服务</h2><ul>
<li>在文件-&gt;偏好设置-&gt;图像中设置<ul>
<li>插入图片时，设置为上传图片，并对本地和网络图片都应用上述规则</li>
<li>上传服务器设置为PicGo（app），并填写PicGo的路径</li>
</ul>
</li>
</ul>
<blockquote>
<p>遇到的问题：</p>
<ul>
<li>我在验证图床上传选项的时候，遇到了报错<strong>Error: This image has been blocked, please contact webmaster for more information.</strong></li>
<li>但实际使用并未受到影响，这里无视即可</li>
</ul>
</blockquote>
<p><img lazyload="" src="/images/loading.svg" data-src="https://s2.loli.net/2023/04/19/Djep2mt8PASqOC1.png" alt="image-20230419200100008"></p>
<h2 id="安装图片压缩插件"><a href="#安装图片压缩插件" class="headerlink" title="安装图片压缩插件"></a>安装图片压缩插件</h2><p>SMMS免费账号只给了5GB的可用空间，可以说是寸土寸金了。而我上传的图片以截图为主，“得益于”我的2K和4K显示器，图片大小超过了我的需求，所以我希望上传的图片能自动压缩。之前的很多插件，比如picgo-plugin-compress都已断更很久不可用了。最终我发现tinypng不错。</p>
<ul>
<li><p>在PicGo插件设置中搜索tinypng安装即可（你可能需要先安装node.js）</p>
</li>
<li><p>点击tinypng的设置按钮，选择配置plugin。我们需要使用tinify的API，可以在<a class="link" href="https://tinify.cn/developers">https://tinify.cn/developers <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 获取。</p>
<p><img lazyload="" src="/images/loading.svg" data-src="https://s2.loli.net/2023/04/19/Hk5hmpD3b6dzCsP.png" alt="image-20230419195634238"></p>
</li>
<li><p>现在一切就绪，可以很方便的开始所有的工作了！</p>
</li>
</ul>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a class="link" href="https://zhuanlan.zhihu.com/p/618902329">https://zhuanlan.zhihu.com/p/618902329 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link" href="https://blog.csdn.net/CaptainLJP/article/details/130112298">https://blog.csdn.net/CaptainLJP/article/details/130112298 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>工具和应用</category>
        <category>图床</category>
      </categories>
      <tags>
        <tag>博客搭建系列</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo部署：创建个人博客并部署到github</title>
    <url>//post/46487/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文详细记录使用hexo搭建并部署个人博客的全过程。</p>
<p>原文地址：<a href="https://xuedongyun.cn/post/46487/">https://xuedongyun.cn/post/46487/</a></p>
<h2 id="创建hexo项目"><a href="#创建hexo项目" class="headerlink" title="创建hexo项目"></a>创建hexo项目</h2><ul>
<li>在有node.js环境的情况下，搭建项目</li>
</ul>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line">hexo init blog</span><br><span class="line"><span class="built_in">cd</span> blog</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure></div>

<ul>
<li>以开发模式运行，查看博客基本情况</li>
</ul>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure></div>

<ul>
<li>至此hexo就已搭建好了，本地4000端口即可访问</li>
</ul>
<h2 id="部署到GithubPage"><a href="#部署到GithubPage" class="headerlink" title="部署到GithubPage"></a>部署到GithubPage</h2><ul>
<li>先在github上新建立一个名为”用户名.github.io”的公开仓库</li>
<li>需要安装一个hexo上传github的插件</li>
</ul>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></div>

<ul>
<li>修改hexo配置文件 <code>_config.yml</code>指定仓库</li>
</ul>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/pigeon-dove/pigeon-dove.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li>现在你可以很方便的将项目部署到github了，以下是几个常用命令</li>
</ul>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">hexo deploy		<span class="comment"># hexo d，部署</span></span><br><span class="line">hexo server		<span class="comment"># hexo s，本地服务器预览</span></span><br><span class="line">hexo generate	<span class="comment"># hexo g，构建项目静态文件，输出到/public</span></span><br><span class="line">hexo clean		<span class="comment"># hexo c，清除构建的静态文件</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li>我们可以通过<code>hexo server</code>在本地预览我们的网站</li>
<li>也可以先<code>hexo generate</code>将项目打包到<code>/public</code>目录，再<code>hexo deploy</code>推送到github仓库中</li>
</ul>
<blockquote>
<p>问题：GitHub Page访问404</p>
<ul>
<li>我这里遇到了访问pigeon-dove.github.io报404的问题，最后发现是没有开启GitHub Pages</li>
<li>需要在仓库中点击about旁边的齿轮按钮进入设置，然后在Edit repository details中勾选”Use your GitHub Pages website”</li>
</ul>
</blockquote>
<ul>
<li>现在你可以通过username.github.io访问你的网页了</li>
</ul>
<h2 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h2><ul>
<li>我个人是不太喜欢hexo默认主题的样式的，可以前往<a class="link" href="https://hexo.io/themes/">https://hexo.io/themes/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 挑选自己中意的主题</li>
<li>我最终选择了<a class="link" href="https://redefine.ohevan.com/">https://redefine.ohevan.com/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 主题，使用方法也很简单，按照说明进行即可</li>
</ul>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> blog</span><br><span class="line">npm install hexo-theme-redefine@latest</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/EvanNotFound/hexo-theme-redefine.git themes/redefine</span><br></pre></td></tr></table></figure></div>

<ul>
<li>按照要求，在项目底层目录创建 <code>_config.redefine.yml</code>配置文件，其中我的配置文件如下</li>
</ul>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 更多配置查看官方文档：https://redefine-docs.ohevan.com/</span></span><br><span class="line"><span class="attr">info:</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">冬云的博客</span></span><br><span class="line">  <span class="attr">author:</span> <span class="string">布鸽不鸽</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">https://pigeon-dove.github.io</span></span><br><span class="line"><span class="attr">defaults:</span></span><br><span class="line">  <span class="attr">avatar:</span> <span class="string">/images/head.jpg</span></span><br><span class="line">  <span class="attr">favicon:</span> <span class="string">/images/favicon.ico</span></span><br><span class="line"><span class="attr">home_banner:</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">程序员的个人修养</span></span><br><span class="line">  <span class="attr">subtitle:</span></span><br><span class="line">    <span class="attr">text:</span> [<span class="string">"Hello World!"</span>, <span class="string">"Across the Great Wall we can reach every corner in the world"</span>]</span><br><span class="line">    <span class="attr">typing_speed:</span> <span class="number">50</span></span><br><span class="line">  <span class="attr">image:</span></span><br><span class="line">    <span class="attr">light:</span> <span class="string">/images/bg.jpg</span></span><br><span class="line"><span class="attr">footer:</span></span><br><span class="line">  <span class="attr">start:</span> <span class="number">2022</span><span class="string">/4/19</span> <span class="number">20</span><span class="string">:56:00</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li>最后在 <code>_config.yml</code>中配置即可</li>
</ul>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">redefine</span></span><br></pre></td></tr></table></figure></div>

<h2 id="写文章"><a href="#写文章" class="headerlink" title="写文章"></a>写文章</h2><ul>
<li>hexo会在 <code>source/_posts</code>中创建md文件</li>
</ul>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new <span class="string">"博客标题"</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li>使用markdown软件正常写文章即可，个人强烈安利 <code>typora</code>这款软件，写完部署即可</li>
</ul>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g	<span class="comment"># 将前端项目生成到/public</span></span><br><span class="line">hexo d	<span class="comment"># 将生成的项目部署到github</span></span><br></pre></td></tr></table></figure></div>

<h2 id="关于图片处理"><a href="#关于图片处理" class="headerlink" title="关于图片处理"></a>关于图片处理</h2><ul>
<li>hexo中一个比较简单的处理图片存储的方式，就是把所有需要的资源放在 <code>/source/images</code>文件夹中，然后在markdown中引用</li>
</ul>
<div class="highlight-container" data-rel="Markdown"><figure class="iseeu highlight markdown"><table><tr><td class="code"><pre><span class="line">![](<span class="link">/images/image.png</span>)</span><br></pre></td></tr></table></figure></div>

<ul>
<li>但这样显然不方便管理，我们可以在 <code>_config.yml</code>中打开文章资源文件夹功能</li>
</ul>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li>这样每次创建文章时，就会有一个和文章一样名字的文件夹。图片放置其中，markdown通过相对路径引用即可</li>
</ul>
<blockquote>
<p>typora中图片自动存储</p>
<ul>
<li>如果你使用typora编辑markdown的话，可以在文件-&gt;偏好设置-&gt;图像中，设置插入图像时复制到指定路径，将路径修改为./${filename}</li>
<li>这样在写文章时，可以很方便的随时粘贴图片</li>
</ul>
</blockquote>
<ul>
<li>此时还有一个问题，typora中图片 <code>![](./name/example.png)</code>需要写前缀，但是hexo中则是 <code>![](./example.png)</code>。当然，其实可以写完文章后搜索，全部替换。但我个人还是更推荐使用图床管理所有的图片，让markdown文件成为纯文本文件。我之前写过一篇图床的相关博客，可以参考：<a href="https://xuedongyun.cn/post/28873/">搭建个人图床</a></li>
</ul>
<h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><ul>
<li>最终看一下部署后的样子吧，博客地址<a class="link" href="https://pigeon-dove.github.io/">https://pigeon-dove.github.io/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
<p><img lazyload="" src="/images/loading.svg" data-src="https://s2.loli.net/2023/04/19/jq4WxDdYBmX6R8L.png" alt="image-20230419204623211"></p>
<p><img lazyload="" src="/images/loading.svg" data-src="https://s2.loli.net/2023/04/19/TehisEYGDmoUZ3K.png" alt="image-20230419204521714"></p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a class="link" href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link" href="https://redefine-docs.ohevan.com/getting-started">https://redefine-docs.ohevan.com/getting-started <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>工具和应用</category>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>博客搭建系列</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo美化：在redefine主题基础上添加评论功能</title>
    <url>//post/27066/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在我使用hexo搭建个人博客，并使用了redefine主题。但是目前网站的评论功能依然是不可用的状态。因此参考<a class="link" href="https://redefine-docs.ohevan.com/posts/comment">官方文档 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，我们可以将Waline部署到Vercel上，并使用LeanCloud作为数据库，实现个人评论服务器的搭建。简单来说：Waline是一款简洁、安全的评论系统；Vercel则是一个站点托管平台，和Github Pages类似；LeanCloud则提供了免费云存储服务。</p>
<p>原文地址：<a href="https://xuedongyun.cn/post/27066/">https://xuedongyun.cn/post/27066/</a></p>
<h3 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h3><ul>
<li>搭建hexo博客系统，部署到Github Pages</li>
<li>使用了redefine主题</li>
<li>具体方法可以看我<a class="link" href="https://pigeon-dove.github.io/2023/04/18/hexo_github/">之前的博客 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
<h3 id="具体流程"><a href="#具体流程" class="headerlink" title="具体流程"></a>具体流程</h3><ul>
<li>搭建hexo博客系统，并部署到Github Pages</li>
<li>为hexo博客启用redefine主题</li>
<li>为redefine添加评论功能<ul>
<li>使用LeanCloud作为数据库</li>
<li>使用Waline作为评论发布/评论管理应用</li>
<li>将Waline部署到Vercel上</li>
<li>为Vercel绑定自己的域名（可选）</li>
</ul>
</li>
</ul>
<h2 id="使用LeanCloud作为数据库"><a href="#使用LeanCloud作为数据库" class="headerlink" title="使用LeanCloud作为数据库"></a>使用LeanCloud作为数据库</h2><ul>
<li>进入<a class="link" href="https://leancloud.app/">LeanCloud国际版 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，注册并登录（国内版需要备案，建议使用国际版）</li>
<li>进入<a class="link" href="https://console.leancloud.app/">控制台 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，选择创建应用，选择免费的开发版，取一个喜欢的名字</li>
</ul>
<p><img lazyload="" src="/images/loading.svg" data-src="https://s2.loli.net/2023/04/20/KAZqEjvzkphrRxW.png" alt="image-20230420103922166"></p>
<ul>
<li>点击刚刚创建应用的设置按钮，进入设置界面，选择“应用凭证”，记录下自己的<code>APP ID</code>,<code>APP Key</code>和 <code>Master Key</code></li>
</ul>
<p><img lazyload="" src="/images/loading.svg" data-src="https://s2.loli.net/2023/04/20/GnWXkP2zL7hAMCO.png" alt="image-20230420104201158"></p>
<ul>
<li>现在服务器部分已准备就绪</li>
</ul>
<h2 id="将Waline部署到Vercel上"><a href="#将Waline部署到Vercel上" class="headerlink" title="将Waline部署到Vercel上"></a>将Waline部署到Vercel上</h2><ul>
<li><p>你可能需要先前往<a class="link" href="https://vercel.com/">Vercel <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>进行注册</p>
</li>
<li><p>点击<a class="link" href="https://vercel.com/new/clone?repository-url=https://github.com/walinejs/waline/tree/main/example">此处 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>可直接跳转至Vercel进行部署</p>
</li>
<li><p>我们按照提示，需要创建Github仓库，Vercel会帮我们自动完成仓库的创建等工作。我们只需要指定仓库的名称即可，这里我起名vercel-waline。等待一小会后会提示部署成功，点击“Go to Dashboard”前往控制台。</p>
</li>
</ul>
<p><img lazyload="" src="/images/loading.svg" data-src="https://s2.loli.net/2023/04/20/PyFkqdGwSm3Z67C.png" alt="image-20230420101917149"></p>
<ul>
<li>我们点击此项目的的Settings-&gt;Environment Variables，添加 <code>LEAN_ID</code>, <code>LEAN_KEY</code> 和 <code>LEAN_MASTER_KEY</code>三个值，对应我们在LeanCloud中获取的三个值</li>
</ul>
<p><img lazyload="" src="/images/loading.svg" data-src="https://s2.loli.net/2023/04/20/xRv1SCGEu9TmHat.png" alt="image-20230420105212414"></p>
<ul>
<li>我们点击顶部的Deployments，选择最新的一次部署右侧的Redeploy重新部署，以便我们的设置生效。等待片刻后页面会跳转，提示我们部署成功。我们点击visit即可跳转到部署好的网站地址，此地址就是我们所需评论服务端的地址。或者，我们也可以在顶部Project选项中看到我们所需的服务端地址。</li>
</ul>
<p><img lazyload="" src="/images/loading.svg" data-src="https://s2.loli.net/2023/04/20/MZSrycbRfj7HhnC.png" alt="image-20230420105734452"></p>
<p><img lazyload="" src="/images/loading.svg" data-src="https://s2.loli.net/2023/04/20/tfaDcPIlAbYRSvj.png" alt="image-20230420110422498"></p>
<h2 id="为hexo配置评论功能"><a href="#为hexo配置评论功能" class="headerlink" title="为hexo配置评论功能"></a>为hexo配置评论功能</h2><ul>
<li>将刚才拿到的服务端地址填写到hexo项目中，redefine的配置文件中即可</li>
</ul>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">comment:</span></span><br><span class="line">  <span class="attr">config:</span></span><br><span class="line">    <span class="attr">waline:</span></span><br><span class="line">      <span class="attr">serverUrl:</span> <span class="string">https://example.example.com</span> <span class="comment">#你拿到的 serverUrl</span></span><br></pre></td></tr></table></figure></div>

<h2 id="绑定国内域名（解决被墙问题）"><a href="#绑定国内域名（解决被墙问题）" class="headerlink" title="绑定国内域名（解决被墙问题）"></a>绑定国内域名（解决被墙问题）</h2><p>由于vercel.app域名在国内被墙，但是其ip并未被墙，因此我们可以绑定自己的域名，解决国内不能使用的问题</p>
<ul>
<li>你可以去阿里云买一个自己的域名，<a class="link" href="https://wanwang.aliyun.com/?spm">地址 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li>在阿里云的<a class="link" href="https://dns.console.aliyun.com/?spm">云解析DNS <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>中，你可以添加自己的域名，再点击进入，选择添加记录。</li>
</ul>
<table>
<thead>
<tr>
<th>记录类型</th>
<th>主机记录</th>
<th>记录值</th>
</tr>
</thead>
<tbody><tr>
<td>CNAME（即指向另一个域名）</td>
<td>即域名前缀，如www等。你也可以选择写@，表示不带前缀。我这里选择写comment</td>
<td>cname.vercel-dns.com</td>
</tr>
</tbody></table>
<p><img lazyload="" src="/images/loading.svg" data-src="https://s2.loli.net/2023/04/20/mpRU6KTE2Qa5bHs.png" alt="image-20230420111451974"></p>
<ul>
<li>前往Vercal，点击顶部的Settings-&gt;Domains进入域名配置页</li>
<li>输入你刚才的域名，如我的comment.xuedongyun.com，点击Add即可</li>
</ul>
<p><img lazyload="" src="/images/loading.svg" data-src="https://s2.loli.net/2023/04/20/dSYJuQH9RO1T5b7.png" alt="image-20230420112420709"></p>
<ul>
<li>现在你可以使用你的域名来访问部署在Vercal上的Waline了<ul>
<li>评论系统：example.yourdomain.com</li>
<li>评论管理：example.yourdomain.com/ui</li>
</ul>
</li>
<li>最后记得去redefine配置文件中使用新的域名</li>
</ul>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a class="link" href="https://redefine-docs.ohevan.com/posts/comment">https://redefine-docs.ohevan.com/posts/comment <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link" href="https://waline.js.org/guide/get-started/">https://waline.js.org/guide/get-started/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>工具和应用</category>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>博客搭建系列</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL必知必会总结笔记</title>
    <url>//post/16749/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文是《MySQL必知必会》的总结笔记，可以用于快速查询MySQL基本操作。其中一些不常用的命令被略过，可以另行学习。<br>原文地址：<a href="https://xuedongyun.cn/post/16749/">https://xuedongyun.cn/post/16749/</a></p>
<h2 id="基本概念梳理"><a href="#基本概念梳理" class="headerlink" title="基本概念梳理"></a>基本概念梳理</h2><p>表（table）</p>
<p>列（column）</p>
<p>行（row）</p>
<p>主键（primary key）</p>
<p>SQL（Structured Query Language）</p>
<h3 id="MySQL简介"><a href="#MySQL简介" class="headerlink" title="MySQL简介"></a>MySQL简介</h3><ul>
<li>一种DBMS（数据库管理系统）</li>
<li>基于客户机-服务器类型</li>
</ul>
<h3 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h3><p>为了连接需要以下信息：</p>
<ul>
<li><p>主机名</p>
</li>
<li><p>端口</p>
</li>
<li><p>用户名</p>
</li>
<li><p>口令</p>
</li>
</ul>
<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><ul>
<li>选择数据库</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">USE crashcourse;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>查看数据库</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">SHOW DATABASES;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>查看当前数据库的表</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">SHOW TABLES;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>查看表的列</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">SHOW COLUMNS FROM customers;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">DESCRIBE customers;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>其他命令</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><figcaption><span>STATUS;``` 显示广泛的服务器状态信息</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">```SHOW CREATE DATABASE;``` ```SHOW CREATE TABLE;``` 显示创建特定数据库或表的MySQL语句</span><br><span class="line"></span><br><span class="line">```SHOW GRANTS;``` 显示用户的安全权限</span><br><span class="line"></span><br><span class="line">```SHOW ERRORS;``` ```SHOW WARNINGS;``` 显示服务器错误或警告信息</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 检索数据</span><br><span class="line"></span><br><span class="line">- 检索单个列</span><br><span class="line"></span><br><span class="line">```mysql</span><br><span class="line">SELECT prod_name FROM products;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>检索多个列</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT prod_id, prod_name from products;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>检索所有的列</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM products;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>检索不同的行</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT DISTINCT vend_id FROM products;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>限制结果</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT prod_name</span><br><span class="line">FROM products</span><br><span class="line">LIMIT 5;</span><br></pre></td></tr></table></figure></div>

<p>​	只返回前5个</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">LIMIT 5, 5;</span><br></pre></td></tr></table></figure></div>

<p>​	第一个数：开始位置</p>
<p>​	第二个数：检索的行数</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">LIMIT 4 OFFSET 3;</span><br></pre></td></tr></table></figure></div>

<p>​	MySQL 5开始的新语法，等价于<code>LIMIT 3, 4</code></p>
<ul>
<li>完全限定表名，数据库</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT products.prod_name</span><br><span class="line">FROM crashcourse.products</span><br></pre></td></tr></table></figure></div>



<h2 id="排序检索数据"><a href="#排序检索数据" class="headerlink" title="排序检索数据"></a>排序检索数据</h2><ul>
<li>ORDER BY子句</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT prod_name</span><br><span class="line">FROM products</span><br><span class="line">ORDER BY prod_name;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>按多个列排序</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">ORDER BY prod_price, prod_name;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>指定排序方向</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">ORDER BY prod_price DESC;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">ORDER BY prod_price DESC, prod_name;</span><br></pre></td></tr></table></figure></div>

<p>​	默认<code>ASC</code></p>
<h2 id="过滤数据"><a href="#过滤数据" class="headerlink" title="过滤数据"></a>过滤数据</h2><ul>
<li>where子句</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT prod_name, prod_proce</span><br><span class="line">FROM products</span><br><span class="line">WHERE prod_price BETWEEN 10 AND 20.5;</span><br></pre></td></tr></table></figure></div>

<ul>
<li><p>支持的操作符</p>
<ul>
<li><p>=, &lt;&gt;, !=, &gt;, &gt;=, &lt;, &lt;=, BETWEEN</p>
</li>
<li><p>BETWEEN包括两端</p>
</li>
</ul>
</li>
<li><p>空值检查</p>
</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT prod_name</span><br><span class="line">FROM products</span><br><span class="line">WHERE prod_price IS NULL</span><br></pre></td></tr></table></figure></div>



<h2 id="数据过滤"><a href="#数据过滤" class="headerlink" title="数据过滤"></a>数据过滤</h2><ul>
<li>AND操作符</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">WHERE vend_id = 1003 AND prod_price &lt;= 10;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>OR操作符</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">WHERE vend_id = 1002 OR vend_id = 1003;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>计算次序：AND&gt;OR, 可以加()解决</li>
<li>IN操作符</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">WHERE vend_id IN (1002, 1003)</span><br></pre></td></tr></table></figure></div>

<ul>
<li>NOT操作符</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">WHERE vend_id NOT IN (1002, 1003)</span><br></pre></td></tr></table></figure></div>



<h2 id="通配符进行过滤"><a href="#通配符进行过滤" class="headerlink" title="通配符进行过滤"></a>通配符进行过滤</h2><ul>
<li><p>LIKE操作符，在where中使用</p>
</li>
<li><p>%表示任何字符，出现任意次数</p>
</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">WHERE prod_name LIKE 'jet%'</span><br></pre></td></tr></table></figure></div>

<ul>
<li>_表示任何字符，次数限定为1</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">WHERE prod_name LIKE 'jet_'</span><br></pre></td></tr></table></figure></div>

<ul>
<li>使用技巧<ul>
<li>其他操作符能达到相同目的，就不要使用通配符</li>
<li>除非绝对必要，尽量不要用在搜索模式的开始处，搜索起来是最慢的</li>
</ul>
</li>
</ul>
<h2 id="使用正则表达式"><a href="#使用正则表达式" class="headerlink" title="使用正则表达式"></a>使用正则表达式</h2><ul>
<li>基本字符匹配</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">WHERE prod_name REGEXP '1000'</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">WHERE prod_name REGEXP '.000'</span><br></pre></td></tr></table></figure></div>

<ul>
<li><p>正则表达式只要出现了就会匹配，当然也可以使用^和$定位符来匹配整个列值</p>
</li>
<li><p>正则表达式不区分大小写，可以使用BINARY关键词开启区分大小写</p>
</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">WHERE prod_name REGEXP BINARY 'JetPack .000'</span><br></pre></td></tr></table></figure></div>

<ul>
<li>进行OR搜索</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">WHERE prod_name REGEXP '1000|2000|3000'</span><br></pre></td></tr></table></figure></div>

<ul>
<li>匹配几个字符之一</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">WHERE prod_name REGEXP '[123] ton'</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">WHERE prod_name REGEXP '[1|2|3] ton'</span><br></pre></td></tr></table></figure></div>

<ul>
<li>匹配排除几个字符</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">WHERE prod_name REGEXP '[^123] ton'</span><br></pre></td></tr></table></figure></div>

<ul>
<li>匹配范围</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">WHERE prod_name REGEXP '[1-9] ton'</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">WHERE prod_name REGEXP '1 [a-z]on'</span><br></pre></td></tr></table></figure></div>

<ul>
<li>转义特殊符号<ul>
<li><code>\\-</code> <code>\\.</code> <code>\\\</code>等等</li>
<li>元字符<ul>
<li><code>\\f</code> 换页</li>
<li><code>\\n</code> 换行</li>
<li><code>\\r</code> 回车</li>
<li><code>\\t</code> 制表</li>
<li><code>\\v</code> 纵向制表</li>
</ul>
</li>
<li>使用两个<code>\</code>：MySQL自己转义一个，正则表达式转义另一个</li>
</ul>
</li>
<li>匹配字符类<ul>
<li><code>[:alnum:]</code>：任意字符和字母</li>
<li><code>[:alpha:]</code>：任意字符</li>
<li>更多此处略去</li>
</ul>
</li>
<li>重复元字符<ul>
<li><code>*</code>：0或多</li>
<li><code>+</code>：1或多</li>
<li><code>?</code>：0或1</li>
<li><code>{n}</code>：指定数目</li>
<li><code>{n,}</code>：不少于指定数目</li>
<li><code>{n,m}</code>：指定范围</li>
</ul>
</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">WHERE prod_name REGEXP '\\([0-9] stricks?\\)'</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">WHERE prod_name REGEXP '\\([[:digit:]]{4}\\)'</span><br></pre></td></tr></table></figure></div>

<ul>
<li>定位符<ul>
<li><code>^</code>：文本的开始</li>
<li><code>$</code>：文本的结尾</li>
<li><code>[[:&lt;:]]</code>：词的开始</li>
<li><code>[[:&gt;:]]</code>：词的结束</li>
</ul>
</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">WHERE prod_name REGEXP '^[0-9]{4}'</span><br></pre></td></tr></table></figure></div>

<ul>
<li>使用简单正则表达式测试，返回0或1</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT 'hello' REGEXP '[0-9]'</span><br></pre></td></tr></table></figure></div>



<h2 id="创建计算字段"><a href="#创建计算字段" class="headerlink" title="创建计算字段"></a>创建计算字段</h2><ul>
<li>Concat()函数拼接</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT Concat(vend_name, '(', vend_country, ')')</span><br><span class="line">FROM vendors</span><br><span class="line">ORDER BY vend_name;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>Trim(), RTrim(), LTrim()去除空格</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT Concat(vend_name, '(', Trim(vend_country), ')')</span><br><span class="line">FROM vendors</span><br><span class="line">ORDER BY vend_name;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>使用别名</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT Concat(vend_name, '(', Trim(vend_country), ')') AS vend_title</span><br><span class="line">FROM vendors</span><br><span class="line">ORDER BY vend_name;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>执行算术计算</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT prod_id, quantity*item_price as expanded_price</span><br><span class="line">FROM orderitems</span><br><span class="line">WHERE order_num = 20005;</span><br></pre></td></tr></table></figure></div>

<p>支持的基本操作符：+, -, *, /</p>
<h2 id="使用数据处理函数"><a href="#使用数据处理函数" class="headerlink" title="使用数据处理函数"></a>使用数据处理函数</h2><p>函数没有SQL可移植性强</p>
<h3 id="文本处理函数"><a href="#文本处理函数" class="headerlink" title="文本处理函数"></a>文本处理函数</h3><ul>
<li>Left(), Right()<ul>
<li><code>Left('xdy', 2)</code>: 返回’xd’</li>
</ul>
</li>
<li>Length()</li>
<li>Locate()<ul>
<li><code>Locate('dy', 'xdy', 0)</code>: 返回子串第一次出现的位置</li>
</ul>
</li>
<li>Lower(), Upper()</li>
<li>LTrim(), RTrim(), Trim()</li>
<li>SubString()</li>
<li>Soundex()<ul>
<li><code>Soundex(lee) = Soundex(lie)</code>: 函数返回语音表示</li>
</ul>
</li>
</ul>
<h3 id="日期和时间处理函数"><a href="#日期和时间处理函数" class="headerlink" title="日期和时间处理函数"></a>日期和时间处理函数</h3><ul>
<li><p>具体函数略</p>
</li>
<li><p>MySQL日期必须是yyyy-mm-dd的格式</p>
</li>
<li><p>基本的日期选择</p>
</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT cust_id, order_num</span><br><span class="line">FROM orders</span><br><span class="line">WHERE order_date = '2005-09-01'</span><br></pre></td></tr></table></figure></div>

<p>order_date数据类型为datatime, 此时匹配的其实是’2005-09-01 00:00:00’</p>
<p>正确的做法应该是：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">WHERE Date(order_date) = '2005-09-01'</span><br></pre></td></tr></table></figure></div>

<ul>
<li>匹配2005年9月的订单</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">WHERE Date(order_date) BETWEEN '2005-09-01' AND '2005-09-30'</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">WHERE Year(order_date) = 2005 AND Month(order_date) = 9</span><br></pre></td></tr></table></figure></div>

<h3 id="数值处理函数"><a href="#数值处理函数" class="headerlink" title="数值处理函数"></a>数值处理函数</h3><ul>
<li>Abs()</li>
<li>Cos(), Sin(), Tan()</li>
<li>Exp()</li>
<li>Mod()</li>
<li>Pi()</li>
<li>Rand()</li>
<li>Sqrt()</li>
</ul>
<h2 id="汇总数据"><a href="#汇总数据" class="headerlink" title="汇总数据"></a>汇总数据</h2><ul>
<li>AVG()函数</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT AVG(prod_price) AS avg_price</span><br></pre></td></tr></table></figure></div>

<p>AVG()函数只能用于单列，忽略NULL的行</p>
<ul>
<li>COUNT()函数</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT COUNT(*) as num_cust</span><br><span class="line">FROM customers</span><br></pre></td></tr></table></figure></div>

<p>COUNT(*)统计行的数量，不忽略NULL</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT COUNT(cust_email) AS num_cust</span><br><span class="line">FROM customers</span><br></pre></td></tr></table></figure></div>

<p>COUNT(column)统计具有值的行的数量，忽略NULL</p>
<ul>
<li>MAX()函数，忽略NULL</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT MAX(prod_price) AS max_price</span><br></pre></td></tr></table></figure></div>

<ul>
<li>MIN()函数，忽略NULL</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT MIN(prod_price) AS max_price</span><br></pre></td></tr></table></figure></div>

<ul>
<li>SUM()函数，忽略NULL</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT SUM(quantity*item_price) AS total_price</span><br></pre></td></tr></table></figure></div>

<ul>
<li>汇聚不同的值，DISTINCT的使用</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT AVG(DISTINCT prod_price) AS avg_price</span><br></pre></td></tr></table></figure></div>

<p>DISTINCT必须指定列名，<code>COUNT(DISTINCT *)</code>肯定不可以</p>
<ul>
<li>组合聚集函数</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT COUNT(*) AS num_items,</span><br><span class="line">		MIN(prod_price) AS price_min,</span><br><span class="line">		MAX(prod_price) AS price_max,</span><br><span class="line">		AVG(prod_price) AS price_avg</span><br><span class="line">FROM products;</span><br></pre></td></tr></table></figure></div>



<h2 id="分组数据"><a href="#分组数据" class="headerlink" title="分组数据"></a>分组数据</h2><ul>
<li>创建分组</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT vend_id, COUNT(*) as num_prods</span><br><span class="line">FROM products</span><br><span class="line">GROUP BY vend_id;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>GROUP BY的一些规则<ul>
<li>可以包含任意列，能对分组进行细致的嵌套</li>
<li>嵌套时，将在最后的分组上汇总</li>
<li>GROUP BY的列，必须在SELECT中（不能是聚集函数）。如果使用了表达式，GROUP BY中也必须使用表达式，不能使用别名</li>
<li>除聚集函数外，别的列都必须在GROUP BY中出现</li>
<li>分组列中NULL将分为一组</li>
<li>必须在WHERE子句之后</li>
</ul>
</li>
<li>过滤分组</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT cust_id, COUNT(*) AS orders</span><br><span class="line">FROM orders</span><br><span class="line">GROUP BY cust_id</span><br><span class="line">HAVING COUNT(*) &gt;= 2;</span><br></pre></td></tr></table></figure></div>

<p>WHERE过滤行而HAVING过滤分组</p>
<ul>
<li>select子句顺序</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">FROM</span><br><span class="line">WHERE</span><br><span class="line">GROUP BY</span><br><span class="line">HAVING</span><br><span class="line">ORDER BY</span><br><span class="line">LIMIT</span><br></pre></td></tr></table></figure></div>



<h2 id="使用子查询"><a href="#使用子查询" class="headerlink" title="使用子查询"></a>使用子查询</h2><ul>
<li>使用子查询进行过滤</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT cust_id</span><br><span class="line">FROM orders</span><br><span class="line">WHERE order_num IN (SELECT order_num</span><br><span class="line">                   FROM orderitems</span><br><span class="line">                   WHERE prod_id = 'TNT2');</span><br></pre></td></tr></table></figure></div>

<p>子查询一般与<code>IN</code>等操作符一起使用，但也可以用于等于<code>=</code>，不等于<code>&lt;&gt;</code>等等</p>
<ul>
<li>作为计算字段使用子查询</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT cust_name, cust_state, (SELECT COUNT(*) FROM orders WHERE orders.cust_id = customers.cust_id) AS orders</span><br><span class="line">FROM customers</span><br><span class="line">ORDER BY cust_name;</span><br></pre></td></tr></table></figure></div>



<h2 id="联结表"><a href="#联结表" class="headerlink" title="联结表"></a>联结表</h2><p>外键：表的某一列，为其他表的主键</p>
<ul>
<li>创建联结</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT vend_name, prod_name, prod_price</span><br><span class="line">FROM vendors, products</span><br><span class="line">WHERE vendors.vend_id = products.vend_id</span><br><span class="line">ORDER BY vend_name, prod_name</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>没有where语句的话，就返回笛卡尔积了</p>
<p>这种联结方式也叫等值联结，内部联结</p>
</blockquote>
<ul>
<li>可以使用另一种方式</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT vend_name, prod_name, prod_price</span><br><span class="line">FROM vendors INNER JOIN products</span><br><span class="line">ON vendors.vend_id = products.vend_id</span><br></pre></td></tr></table></figure></div>

<ul>
<li>联结多个表</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT prod_name, vend_name, prod_price, quantity</span><br><span class="line">FROM orderitems, products, vendors</span><br><span class="line">WHERE products.vend_id = vendors.vend_id</span><br><span class="line">	AND orderitems.prod_id = products.prod_id</span><br><span class="line">	AND order_num = 20005;</span><br></pre></td></tr></table></figure></div>



<h2 id="创建高级联结"><a href="#创建高级联结" class="headerlink" title="创建高级联结"></a>创建高级联结</h2><ul>
<li>自联结</li>
<li>自然联结</li>
<li>外部联结</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">LEFT OUTER JOIN // 从左边选择全部行</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">RIGHT OUTER JOIN // 从右边选择全部行</span><br></pre></td></tr></table></figure></div>

<ul>
<li>使用带聚集函数的联结</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT customers.cust_name, </span><br><span class="line">	customers.cust_id, </span><br><span class="line">	COUNT(orders.order_num) AS num_order</span><br><span class="line">FROM customers LEFT OUTER JOIN orders</span><br><span class="line">ON customers.cust_id = orders.cust_id</span><br><span class="line">GROUP BY customers.cust_id</span><br></pre></td></tr></table></figure></div>



<h2 id="组合查询"><a href="#组合查询" class="headerlink" title="组合查询"></a>组合查询</h2><ul>
<li>使用UNION</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT vend_id, prod_id, prod_price</span><br><span class="line">FROM products</span><br><span class="line">WHERE prod_price &lt;= 5</span><br><span class="line">UNION</span><br><span class="line">SELECT vend_id, prod_id, prod_price</span><br><span class="line">FROM products</span><br><span class="line">WHERE vend_id IN (1001, 1002);</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>在这个简单例子下，UNION比WHERE子句更复杂</p>
<p>但对于更复杂的过滤条件，或从多个表中检索数据，使用UNION可能更简单</p>
</blockquote>
<ul>
<li>UNION规则<ul>
<li>两条及以上SELECT语句组成，语句之间用UNION分割</li>
<li>每个查询必须包含相同的列，表达式，或聚集函数（次序未必相同）</li>
<li>列数据类型必须兼容，必须是可以隐式转换的类型</li>
</ul>
</li>
<li>包含或取消重复的行<ul>
<li>UNION 默认去重</li>
<li>UNION ALL 不去重</li>
</ul>
</li>
<li>对组合查询结果排序</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT vend_id, prod_id, prod_price</span><br><span class="line">FROM products</span><br><span class="line">WHERE prod_price &lt;= 5</span><br><span class="line">UNION</span><br><span class="line">SELECT vend_id, prod_id, prod_price</span><br><span class="line">FROM products</span><br><span class="line">WHERE vend_id IN (1001, 1002);</span><br><span class="line">ORDER BY vend_id, prod_id</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>只能在最后排一次</p>
</blockquote>
<h2 id="全文搜索"><a href="#全文搜索" class="headerlink" title="全文搜索"></a>全文搜索</h2><h2 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h2><ul>
<li>插入完整的行</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSERT INTO customers</span><br><span class="line">	VALUES(NULL, 'Zhou Jielun', 'Taipei', NULL, NULL);</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>如果某列没有值，必须指定NULL</p>
</blockquote>
<ul>
<li>更安全的做法，指定列</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSERT INTO customers(cust_name, cust_city)</span><br><span class="line">	VALUES('Zhou Jielun', 'Taipei');</span><br></pre></td></tr></table></figure></div>

<ul>
<li>插入多个行</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 多条语句</span><br><span class="line">INSERT INTO customers(cust_name, cust_city)</span><br><span class="line">	VALUES('Zhou Jielun', 'Taipei');</span><br><span class="line">INSERT INTO customers(cust_name, cust_city)</span><br><span class="line">	VALUES('Wang Feng', 'Beijing');</span><br><span class="line">INSERT INTO customers(cust_name, cust_city)</span><br><span class="line">	VALUES('Yang Miao', 'Shanghai');</span><br><span class="line">	</span><br><span class="line">// 可以组合各条语句</span><br><span class="line">INSERT INTO customers(cust_name, cust_city)</span><br><span class="line">	VALUES('Zhou Jielun', 'Taipei'),('Wang Feng', 'Beijing'),('Yang Miao', 'Shanghai');</span><br></pre></td></tr></table></figure></div>

<ul>
<li>插入检索出的数据</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSERT INTO customer(cust_id, cust_name, cust_city)</span><br><span class="line">SELECT cust_id, cust_name, cust_city FROM customer_new</span><br></pre></td></tr></table></figure></div>



<h2 id="更新和删除数据"><a href="#更新和删除数据" class="headerlink" title="更新和删除数据"></a>更新和删除数据</h2><ul>
<li>更新行</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">UPDATE customer</span><br><span class="line">SET cust_city = 'Chongqing'</span><br><span class="line">	cust_email = '432431@gamil.com'</span><br><span class="line">WHERE cust_id = 12345;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>删除行</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">DELETE FROM customer</span><br><span class="line">WHERE cust_id = 12345;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>更新和删除的原则<ul>
<li>记得带上WHERE，除非真的希望对所有行进行更改</li>
<li>保证每个表都有主键</li>
<li>操作前先用SELECT测试一下</li>
</ul>
</li>
</ul>
<h2 id="创建和操作表"><a href="#创建和操作表" class="headerlink" title="创建和操作表"></a>创建和操作表</h2><ul>
<li>创建表</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE customers IF NOT EXISTS (</span><br><span class="line">	cust_id		int			NOT NULL	AUTO_INCREMENT,</span><br><span class="line">    cust_name	varchar(50)	NOT NULL,</span><br><span class="line">    cust_city	varchar(50)	NULL DEFAULT 'Beijing',</span><br><span class="line">    PRIMARY KEY (cust_id)</span><br><span class="line">)ENGINE=InnoDB;</span><br></pre></td></tr></table></figure></div>

<ul>
<li><p>使用NULL值</p>
<ul>
<li>每个表列或是NULL列，或是NOT NULL列，在表的创建时规定</li>
<li>NULL为默认设置</li>
</ul>
</li>
<li><p>主键</p>
<ul>
<li>主键必须唯一</li>
<li>主键可以是多个值的组合</li>
</ul>
</li>
<li><p>AUTO_INCREMENT</p>
<ul>
<li>每个表只能有一个AUTO_INCREMENT</li>
<li>它必须被索引（如，通过使他成为主键）</li>
<li>可以使用last_insert_id()函数获得最后一个AUTO_INCRMENT的值，用于后续</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT last_insert_id()</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>指定默认值</p>
<ul>
<li>尽量只用默认值而不是NULL值</li>
</ul>
</li>
<li><p>引擎</p>
<ul>
<li>InnoDB：可靠的事务处理引擎</li>
<li>MyISAM：性能极高的引擎，支持全文搜索，不支持事务</li>
<li>MEMORY：功能等同于MyISAM，但存储在内存，速度极快，适合临时表</li>
</ul>
</li>
<li><p>更新表</p>
<ul>
<li>理想状态下，表中有数据就不该被更新了</li>
<li>添加列</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE customers</span><br><span class="line">ADD vend_phone VARCHAR(20);</span><br></pre></td></tr></table></figure></div>

<ul>
<li>删除列</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE customers</span><br><span class="line">DROP COLUMN vend_phone;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>删除表</p>
</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">DROP TABLE customers</span><br></pre></td></tr></table></figure></div>

<ul>
<li>重命名表</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">RENAME TABLE customer TO customer2</span><br></pre></td></tr></table></figure></div>



<h2 id="使用视图"><a href="#使用视图" class="headerlink" title="使用视图"></a>使用视图</h2><ul>
<li>略</li>
</ul>
<h2 id="使用存储过程"><a href="#使用存储过程" class="headerlink" title="使用存储过程"></a>使用存储过程</h2><ul>
<li>略</li>
</ul>
<h2 id="使用游标"><a href="#使用游标" class="headerlink" title="使用游标"></a>使用游标</h2><ul>
<li>略</li>
</ul>
<h2 id="使用触发器"><a href="#使用触发器" class="headerlink" title="使用触发器"></a>使用触发器</h2><ul>
<li>创建触发器</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TRIGGER newproduct AFTER INSERT ON customers</span><br><span class="line">FOR EACH ROW SELECT 'product added';</span><br></pre></td></tr></table></figure></div>

<blockquote>
<ul>
<li><p>BEFORE触发器失败，后续SQL语句也不会执行</p>
</li>
<li><p>BEFORE触发器或SQL语句失败，AFTER触发器也不会执行</p>
</li>
</ul>
</blockquote>
<ul>
<li>删除触发器</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">DROP TRIGGER newproduct</span><br></pre></td></tr></table></figure></div>

<ul>
<li>INSERT触发器</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TRIGGER newproduct AFTER INSERT ON products</span><br><span class="line">FOR EACH ROW SELECT NEW.order_num;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>可引用一个虚拟的表NEW访问被插入的行</p>
<ul>
<li><p>BERFORE INSERT时，允许修改插入的值</p>
</li>
<li><p>对于AUTO_INCREAMENT的列，BERFORE INSERT为0，AFTER INSERT为实际值</p>
</li>
</ul>
</blockquote>
<ul>
<li>DELETE触发器</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TRIGGER newproduct BEFORE DELETE ON orders</span><br><span class="line">FOR EACH ROW</span><br><span class="line">BEGIN</span><br><span class="line">	INSERT INTO archieve_order(prod_id, prod_name)</span><br><span class="line">	VALUES(OLD.prod_id, OLD.prod_name);</span><br><span class="line">END;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<ul>
<li><p>可以引用虚拟的OLD表，访问被删除的值</p>
</li>
<li><p>OLD中的值都是只读的</p>
</li>
<li><p>使用BEGIN END的好处是能容纳多条SQL语句</p>
</li>
</ul>
</blockquote>
<ul>
<li>UPDATE触发器</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TRIGGER updatevendor BEFORE UPDATE ON vendors</span><br><span class="line">FOR EACH ROW </span><br><span class="line">SET NEW.vend_state = Upper(New.vend_state);</span><br></pre></td></tr></table></figure></div>

<blockquote>
<ul>
<li>OLD虚拟表访问修改前的值，NEW虚拟表访问修改后的值</li>
<li>BEFORE UPDATE时，NEW的值可以被更改</li>
<li>OLD中的值都是只读的</li>
</ul>
</blockquote>
<h2 id="管理事务处理"><a href="#管理事务处理" class="headerlink" title="管理事务处理"></a>管理事务处理</h2><ul>
<li>略</li>
</ul>
<h2 id="全球化和本地化"><a href="#全球化和本地化" class="headerlink" title="全球化和本地化"></a>全球化和本地化</h2><p><strong>字符集</strong>：字母和符号的集合</p>
<p><strong>编码</strong>：字符集成员的内部表示</p>
<p><strong>校对</strong>：指定字符如何比较的指令</p>
<ul>
<li>略</li>
</ul>
<h2 id="安全管理"><a href="#安全管理" class="headerlink" title="安全管理"></a>安全管理</h2><p>不应当在日常MySQL中使用root</p>
<ul>
<li>获取用户账号列表</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">USE mysql;</span><br><span class="line">SELECT user FROM user;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">+------------------+</span><br><span class="line">| user             |</span><br><span class="line">+------------------+</span><br><span class="line">| mysql.infoschema |</span><br><span class="line">| mysql.session    |</span><br><span class="line">| mysql.sys        |</span><br><span class="line">| root             |</span><br><span class="line">+------------------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></div>

<ul>
<li>创建用户账号</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE USER xdy IDENTIFIED BY 'password';</span><br></pre></td></tr></table></figure></div>

<ul>
<li>重命名用户</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">RENAME USER xdy TO xdy123</span><br></pre></td></tr></table></figure></div>

<ul>
<li>删除用户</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">DROP USER xdy;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>查看赋予用户的权限</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">SHOW GRANTS FOR xdy;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">+---------------------------------+</span><br><span class="line">| Grants for xdy@%                |</span><br><span class="line">+---------------------------------+</span><br><span class="line">| GRANT USAGE ON *.* TO `xdy`@`%` |</span><br><span class="line">+---------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><code>USAGE</code>表示没有任何权限。</p>
</blockquote>
<blockquote>
<p>MySQL的权限：用户名和主机名结合定义，若不指定主机名，用默认主机名%</p>
</blockquote>
<ul>
<li>授予权限（用root用户授予）</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">GRANT SELECT ON project.* TO xdy;</span><br><span class="line">GRANT SELECT, INSERT ON project.* TO xdy;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>授予该用户在project数据库上所有表的SELECT权限</p>
</blockquote>
<ul>
<li>撤销权限</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">REVOKE SELECT ON project.* FROM xdy</span><br></pre></td></tr></table></figure></div>

<ul>
<li>查看所有的权限</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">show privileges;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>更改密码</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">SET PASSWORD FOR xdy = Password('newPassword');</span><br></pre></td></tr></table></figure></div>

<h2 id="数据库维护"><a href="#数据库维护" class="headerlink" title="数据库维护"></a>数据库维护</h2><ul>
<li>略</li>
</ul>
<h2 id="改善性能"><a href="#改善性能" class="headerlink" title="改善性能"></a>改善性能</h2><ul>
<li>略</li>
</ul>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
  </entry>
  <entry>
    <title>SpringBoot源码系列（1）：版本仲裁</title>
    <url>//post/63124/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们在使用SpringBoot框架时，依赖项可以不写版本号。这背后是通过SpringBoot的版本仲裁实现的。本文中SpringBoot版本号为2.7.5。</p>
<p>原文地址：<a href="https://xuedongyun.cn/post/63124/">https://xuedongyun.cn/post/63124/</a></p>
<h2 id="版本依赖的位置"><a href="#版本依赖的位置" class="headerlink" title="版本依赖的位置"></a>版本依赖的位置</h2><p>创建SpringBoot项目后，我们可以看到本项目的父项目，为<code>spring-boot-starter-parent</code>。按住Ctrl点击进入</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p><code>spring-boot-starter-parent</code>的父项目为<code>spring-boot-dependencies</code>。进入</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p><code>spring-boot-dependencies</code>中几乎申明了所有常见依赖的版本号，以<code>properties</code>的形式存储。</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">activemq.version</span>&gt;</span>5.16.5<span class="tag">&lt;/<span class="name">activemq.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">antlr2.version</span>&gt;</span>2.7.7<span class="tag">&lt;/<span class="name">antlr2.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">appengine-sdk.version</span>&gt;</span>1.9.98<span class="tag">&lt;/<span class="name">appengine-sdk.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artemis.version</span>&gt;</span>2.19.1<span class="tag">&lt;/<span class="name">artemis.version</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>版本仲裁：</p>
<ul>
<li>父项目声明了常用依赖的版本号，其他依赖无需写版本号（自动版本仲裁）</li>
</ul>
</blockquote>
<h2 id="自定义版本"><a href="#自定义版本" class="headerlink" title="自定义版本"></a>自定义版本</h2><p>直接写明版本号</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.31<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>除开直接写版本号外，还可以在自己项目中利用<code>properties</code>声明版本号</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>8.0.21<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="starter命名规则"><a href="#starter命名规则" class="headerlink" title="starter命名规则"></a>starter命名规则</h2><ul>
<li>starter<ul>
<li>引入某种场景的依赖</li>
<li>官方：spring-boot-starter-*</li>
<li>第三方：*-spring-boot-starter</li>
</ul>
</li>
</ul>
<blockquote>
<p>所有<code>spring-boot-starter-*</code>最基本的依赖都是<code>spring-boot-starter</code></p>
</blockquote>
]]></content>
      <categories>
        <category>java</category>
        <category>SpringBoot</category>
        <category>源码</category>
      </categories>
      <tags>
        <tag>SpringBoot源码系列</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot源码系列（10）：@Async原理</title>
    <url>//post/24765/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在SpringBoot中，我们可以使用异步操作来处理耗时的任务。通常我们需要在想异步执行的方法上标注<code>@Async</code>，然后在主启动类上标注<code>@EnableAsync</code>开启异步功能。关于其应用，可以查看我之前的文章：<a href="https://xuedongyun.cn/post/59240/">SpringBoot中的@Asnyc注解</a>。本文将讨论以下问题：</p>
<ul>
<li><code>@EnableAsync</code>和<code>@Async</code>的原理是什么？</li>
<li>SpringBoot中默认的线程池/执行器是如何被指定的？</li>
<li><code>@Async</code>为什么能通过value属性指定使用的执行器？</li>
</ul>
<p>原文地址：<a href="https://xuedongyun.cn/post/24765/">https://xuedongyun.cn/post/24765/</a></p>
<h2 id="异步处理的原理（-EnableAsync）"><a href="#异步处理的原理（-EnableAsync）" class="headerlink" title="异步处理的原理（@EnableAsync）"></a>异步处理的原理（@EnableAsync）</h2><h3 id="EnableAsync"><a href="#EnableAsync" class="headerlink" title="EnableAsync"></a>EnableAsync</h3><p>我们在主启动类上标注了<code>@EnableAsync</code>注解。该注解通过<code>@Import</code>注解，导入了<code>AsyncConfigurationSelector</code></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Import(AsyncConfigurationSelector.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAsync { }</span><br></pre></td></tr></table></figure></div>

<h3 id="AsyncConfigurationSelector"><a href="#AsyncConfigurationSelector" class="headerlink" title="AsyncConfigurationSelector"></a>AsyncConfigurationSelector</h3><p>继承关系：<code>ImportSelector</code>&lt;-<code>AdviceModeImportSelector&lt;EnableAsync&gt;</code>&lt;-<code>AsyncConfigurationSelector</code></p>
<p><strong>我们先看一看父类中的方法：</strong></p>
<p>在<code>@Configuration</code>配置类上，使用<code>@Import</code>注解导入一个实现了<code>ImportSelector</code>接口的类时：会根据<code>@Configuration</code>配置类的<code>AnnotationMetadata</code>，返回需要导入到容器中的类的名称</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ImportSelector</span> {</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 根据@Configuration配置类的AnnotationMetadata，返回一个class名称列表，来决定向容器中导入哪些类</span></span><br><span class="line">	String[] selectImports(AnnotationMetadata importingClassMetadata);</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Nullable</span></span><br><span class="line">	<span class="keyword">default</span> Predicate&lt;String&gt; <span class="title function_">getExclusionFilter</span><span class="params">()</span> {</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>而<code>AdviceModeImportSelector&lt;EnableAsync&gt;</code>类，实现了<code>selectImports</code>方法。该方法用于获取<code>@EnableAsync</code>注解中的<code>mode</code>对应的值，并调用<code>selectImports(adviceMode)</code>方法。最终返回需要导入的类。这正是我们<code>AsyncConfigurationSelector</code>实现的方法。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 代码有删减</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AdviceModeImportSelector</span>&lt;A <span class="keyword">extends</span> <span class="title class_">Annotation</span>&gt; <span class="keyword">implements</span> <span class="title class_">ImportSelector</span> {</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEFAULT_ADVICE_MODE_ATTRIBUTE_NAME</span> <span class="operator">=</span> <span class="string">"mode"</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">protected</span> String <span class="title function_">getAdviceModeAttributeName</span><span class="params">()</span> {</span><br><span class="line">		<span class="keyword">return</span> DEFAULT_ADVICE_MODE_ATTRIBUTE_NAME;</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">final</span> String[] selectImports(AnnotationMetadata importingClassMetadata) {</span><br><span class="line">        <span class="comment">// 用于当前类，泛型的具体类型（此处是EnableAsync）</span></span><br><span class="line">		Class&lt;?&gt; annType = GenericTypeResolver.resolveTypeArgument(getClass(), AdviceModeImportSelector.class);</span><br><span class="line">        Assert.state(annType != <span class="literal">null</span>, <span class="string">"..."</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取@Configuration配置类的@EnableAsync的属性</span></span><br><span class="line">		<span class="type">AnnotationAttributes</span> <span class="variable">attributes</span> <span class="operator">=</span> AnnotationConfigUtils.attributesFor(importingClassMetadata, annType);</span><br><span class="line">        <span class="keyword">if</span> (attributes == <span class="literal">null</span>) { <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">"..."</span>); }</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 此处getAdviceModeAttributeName()返回"mode"，@EnableAsync注解的"mode"属性默认值是"PROXY"</span></span><br><span class="line">		<span class="type">AdviceMode</span> <span class="variable">adviceMode</span> <span class="operator">=</span> attributes.getEnum(getAdviceModeAttributeName());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 调用了selectImports(adviceMode)方法</span></span><br><span class="line">		String[] imports = selectImports(adviceMode);</span><br><span class="line">		<span class="keyword">return</span> imports;</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Nullable</span></span><br><span class="line">	<span class="keyword">protected</span> <span class="keyword">abstract</span> String[] selectImports(AdviceMode adviceMode);</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>此时，我们将向容器中导入<code>ProxyAsyncConfiguration</code></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AsyncConfigurationSelector</span> <span class="keyword">extends</span> <span class="title class_">AdviceModeImportSelector</span>&lt;EnableAsync&gt; {</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="meta">@Nullable</span></span><br><span class="line">	<span class="keyword">public</span> String[] selectImports(AdviceMode adviceMode) {</span><br><span class="line">		<span class="keyword">switch</span> (adviceMode) {</span><br><span class="line">            <span class="comment">// 向容器中导入ProxyAsyncConfiguration</span></span><br><span class="line">			<span class="keyword">case</span> PROXY:</span><br><span class="line">				<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[] {ProxyAsyncConfiguration.class.getName()};</span><br><span class="line">			<span class="keyword">case</span> ASPECTJ:</span><br><span class="line">				<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[] {ASYNC_EXECUTION_ASPECT_CONFIGURATION_CLASS_NAME};</span><br><span class="line">			<span class="keyword">default</span>:</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h3 id="ProxyAsyncConfiguration"><a href="#ProxyAsyncConfiguration" class="headerlink" title="ProxyAsyncConfiguration"></a>ProxyAsyncConfiguration</h3><p>继承关系：<code>AbstractAsyncConfiguration</code>&lt;-<code>ProxyAsyncConfiguration</code></p>
<p>导入的<code>ProxyAsyncConfiguration</code>是一个<code>@Configuration</code>配置类，它通过<code>@Bean</code>注入了<code>AsyncAnnotationBeanPostProcessor</code>类。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 代码有删改</span></span><br><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@Role(BeanDefinition.ROLE_INFRASTRUCTURE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyAsyncConfiguration</span> <span class="keyword">extends</span> <span class="title class_">AbstractAsyncConfiguration</span> {</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Bean(name = TaskManagementConfigUtils.ASYNC_ANNOTATION_PROCESSOR_BEAN_NAME)</span></span><br><span class="line">	<span class="meta">@Role(BeanDefinition.ROLE_INFRASTRUCTURE)</span></span><br><span class="line">	<span class="keyword">public</span> AsyncAnnotationBeanPostProcessor <span class="title function_">asyncAdvisor</span><span class="params">()</span> {</span><br><span class="line">		</span><br><span class="line">        <span class="comment">// 创建了一个PostProcessor，放到容器中</span></span><br><span class="line">		<span class="type">AsyncAnnotationBeanPostProcessor</span> <span class="variable">bpp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AsyncAnnotationBeanPostProcessor</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 设置了执行器和错误处理器</span></span><br><span class="line">        bpp.configure(<span class="built_in">this</span>.executor, <span class="built_in">this</span>.exceptionHandler);</span><br><span class="line">        </span><br><span class="line">		<span class="comment">// ...</span></span><br><span class="line">		<span class="keyword">return</span> bpp;</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>在其父类<code>AbstractAsyncConfiguration</code>中，通过<code>@Autowired</code>拿到了容器中实现了<code>AsyncConfigurer</code>的组件（获取了线程池）。<code>this.executor</code>就是在此获取值的。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractAsyncConfiguration</span> <span class="keyword">implements</span> <span class="title class_">ImportAware</span> {</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 通过@Autowired拿到了容器中实现了AsyncConfigurer的组件（获取了线程池）</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">setConfigurers</span><span class="params">(ObjectProvider&lt;AsyncConfigurer&gt; configurers)</span> {</span><br><span class="line">        Supplier&lt;AsyncConfigurer&gt; configurer = SingletonSupplier.of(() -&gt; {</span><br><span class="line">			List&lt;AsyncConfigurer&gt; candidates = configurers.stream().collect(Collectors.toList());</span><br><span class="line">			<span class="keyword">if</span> (CollectionUtils.isEmpty(candidates)) {</span><br><span class="line">                <span class="comment">// 没有就返回空</span></span><br><span class="line">				<span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">			}</span><br><span class="line">			<span class="keyword">if</span> (candidates.size() &gt; <span class="number">1</span>) {</span><br><span class="line">                <span class="comment">// 只能有一个实现AsyncConfigurer接口的组件</span></span><br><span class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">"Only one AsyncConfigurer may exist"</span>);</span><br><span class="line">			}</span><br><span class="line">			<span class="keyword">return</span> candidates.get(<span class="number">0</span>);</span><br><span class="line">		});</span><br><span class="line">        </span><br><span class="line">		<span class="comment">// this.executor在此处获取</span></span><br><span class="line">		<span class="built_in">this</span>.executor = adapt(configurer, AsyncConfigurer::getAsyncExecutor);</span><br><span class="line">		<span class="built_in">this</span>.exceptionHandler = adapt(configurer, AsyncConfigurer::getAsyncUncaughtExceptionHandler);</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><strong>小结1：</strong>我们可以向容器中放入实现了<code>AsyncConfigurer</code>接口的组件，来向容器中放入线程池</p>
</blockquote>
<h3 id="AsyncAnnotationBeanPostProcessor"><a href="#AsyncAnnotationBeanPostProcessor" class="headerlink" title="AsyncAnnotationBeanPostProcessor"></a>AsyncAnnotationBeanPostProcessor</h3><p>继承关系：<code>BeanFactoryAware</code>&lt;-<code>AbstractBeanFactoryAwareAdvisingPostProcessor</code>&lt;-<code>AsyncAnnotationBeanPostProcessor</code></p>
<p>此时<code>AsyncAnnotationBeanPostProcessor</code>往容器中创建了一个增强器<code>AsyncAnnotationAdvisor</code></p>
<blockquote>
<p>在<code>Spring</code>中，如果<code>Bean</code>实现了<code>BeanNameAware</code> 接口，则会默认调用<code>setBeanFactory</code>方法，获取<code>BeanFactory</code>实例</p>
</blockquote>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 代码有删改</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AsyncAnnotationBeanPostProcessor</span> <span class="keyword">extends</span> <span class="title class_">AbstractBeanFactoryAwareAdvisingPostProcessor</span> {</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBeanFactory</span><span class="params">(BeanFactory beanFactory)</span> {</span><br><span class="line">		<span class="built_in">super</span>.setBeanFactory(beanFactory);</span><br><span class="line">		<span class="comment">//创建一个增强器</span></span><br><span class="line">		<span class="type">AsyncAnnotationAdvisor</span> <span class="variable">advisor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AsyncAnnotationAdvisor</span>(<span class="built_in">this</span>.executor, <span class="built_in">this</span>.exceptionHandler);</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">this</span>.asyncAnnotationType != <span class="literal">null</span>) {</span><br><span class="line">			advisor.setAsyncAnnotationType(<span class="built_in">this</span>.asyncAnnotationType);</span><br><span class="line">		}</span><br><span class="line">		advisor.setBeanFactory(beanFactory);</span><br><span class="line">		<span class="built_in">this</span>.advisor = advisor;</span><br><span class="line">	}</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(<span class="meta">@Nullable</span> Supplier&lt;Executor&gt; executor, </span></span><br><span class="line"><span class="params">                          <span class="meta">@Nullable</span> Supplier&lt;AsyncUncaughtExceptionHandler&gt; exceptionHandler)</span> {</span><br><span class="line">        </span><br><span class="line">		<span class="built_in">this</span>.executor = executor;</span><br><span class="line">		<span class="built_in">this</span>.exceptionHandler = exceptionHandler;</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h3 id="AsyncAnnotationAdvisor"><a href="#AsyncAnnotationAdvisor" class="headerlink" title="AsyncAnnotationAdvisor"></a>AsyncAnnotationAdvisor</h3><p>在<code>AsyncAnnotationAdvisor</code>中，创建了增强方法<code>this.advice</code>，它其实也实现了<code>BeanNameAware</code>接口</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 代码有删改</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AsyncAnnotationAdvisor</span> <span class="keyword">extends</span> <span class="title class_">AbstractPointcutAdvisor</span> <span class="keyword">implements</span> <span class="title class_">BeanFactoryAware</span> {</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">AsyncAnnotationAdvisor</span><span class="params">(<span class="meta">@Nullable</span> Supplier&lt;Executor&gt; executor, </span></span><br><span class="line"><span class="params">                                  <span class="meta">@Nullable</span> Supplier&lt;AsyncUncaughtExceptionHandler&gt; exceptionHandler)</span> {</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 增强方法this.advice真实类型：AnnotationAsyncExecutionInterceptor</span></span><br><span class="line">		<span class="built_in">this</span>.advice = buildAdvice(executor, exceptionHandler);</span><br><span class="line">		<span class="built_in">this</span>.pointcut = buildPointcut(asyncAnnotationTypes);</span><br><span class="line">	}</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> Advice <span class="title function_">buildAdvice</span><span class="params">(<span class="meta">@Nullable</span> Supplier&lt;Executor&gt; executor, </span></span><br><span class="line"><span class="params">                                 <span class="meta">@Nullable</span> Supplier&lt;AsyncUncaughtExceptionHandler&gt; exceptionHandler)</span> {</span><br><span class="line">		</span><br><span class="line">        <span class="comment">// 拦截器</span></span><br><span class="line">		<span class="type">AnnotationAsyncExecutionInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationAsyncExecutionInterceptor</span>(<span class="literal">null</span>);</span><br><span class="line">        <span class="comment">//配置此切面的执行器和异常处理器</span></span><br><span class="line">		interceptor.configure(executor, exceptionHandler);</span><br><span class="line">		<span class="keyword">return</span> interceptor;</span><br><span class="line">	}</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 配置此切面的执行器和异常处理器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(<span class="meta">@Nullable</span> Supplier&lt;Executor&gt; defaultExecutor,</span></span><br><span class="line"><span class="params">			<span class="meta">@Nullable</span> Supplier&lt;AsyncUncaughtExceptionHandler&gt; exceptionHandler)</span> {</span><br><span class="line"></span><br><span class="line">		<span class="built_in">this</span>.defaultExecutor = <span class="keyword">new</span> <span class="title class_">SingletonSupplier</span>&lt;&gt;(defaultExecutor, () -&gt; getDefaultExecutor(<span class="built_in">this</span>.beanFactory));</span><br><span class="line">		<span class="built_in">this</span>.exceptionHandler = <span class="keyword">new</span> <span class="title class_">SingletonSupplier</span>&lt;&gt;(exceptionHandler, SimpleAsyncUncaughtExceptionHandler::<span class="keyword">new</span>);</span><br><span class="line">	}</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 此处this.advice也实现了BeanNameAware接口</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBeanFactory</span><span class="params">(BeanFactory beanFactory)</span> {</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">this</span>.advice <span class="keyword">instanceof</span> BeanFactoryAware) {</span><br><span class="line">			((BeanFactoryAware) <span class="built_in">this</span>.advice).setBeanFactory(beanFactory);</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h3 id="AnnotationAsyncExecutionInterceptor"><a href="#AnnotationAsyncExecutionInterceptor" class="headerlink" title="AnnotationAsyncExecutionInterceptor"></a>AnnotationAsyncExecutionInterceptor</h3><p>继承关系：<code>MethodInterceptor</code>&amp;<code>AsyncExecutionAspectSupport</code>&lt;-<code>AsyncExecutionInterceptor</code>&lt;-<code>AnnotationAsyncExecutionInterceptor</code></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AsyncExecutionAspectSupport</span> <span class="keyword">implements</span> <span class="title class_">BeanFactoryAware</span> {</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(<span class="meta">@Nullable</span> Supplier&lt;Executor&gt; defaultExecutor,</span></span><br><span class="line"><span class="params">			<span class="meta">@Nullable</span> Supplier&lt;AsyncUncaughtExceptionHandler&gt; exceptionHandler)</span> {</span><br><span class="line">		<span class="comment">// 拿到了默认的执行器/线程池，</span></span><br><span class="line">		<span class="built_in">this</span>.defaultExecutor = <span class="keyword">new</span> <span class="title class_">SingletonSupplier</span>&lt;&gt;(defaultExecutor, () -&gt; getDefaultExecutor(<span class="built_in">this</span>.beanFactory));</span><br><span class="line">		<span class="built_in">this</span>.exceptionHandler = <span class="keyword">new</span> <span class="title class_">SingletonSupplier</span>&lt;&gt;(exceptionHandler, SimpleAsyncUncaughtExceptionHandler::<span class="keyword">new</span>);</span><br><span class="line">	}</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">	<span class="keyword">protected</span> Executor <span class="title function_">getDefaultExecutor</span><span class="params">(<span class="meta">@Nullable</span> BeanFactory beanFactory)</span> {</span><br><span class="line">		<span class="keyword">if</span> (beanFactory != <span class="literal">null</span>) {</span><br><span class="line">			<span class="keyword">try</span> {</span><br><span class="line">				<span class="comment">// 拿唯一的类型为TaskExecutor的组件</span></span><br><span class="line">				<span class="keyword">return</span> beanFactory.getBean(TaskExecutor.class);</span><br><span class="line">			}</span><br><span class="line">			<span class="keyword">catch</span> (NoUniqueBeanDefinitionException ex) {</span><br><span class="line">				<span class="keyword">try</span> {</span><br><span class="line">                    <span class="comment">// 容器里有多个TaskExecutor，拿名字叫"taskExecutor"的，类型为Executor的组件</span></span><br><span class="line">					<span class="keyword">return</span> beanFactory.getBean(DEFAULT_TASK_EXECUTOR_BEAN_NAME, Executor.class);</span><br><span class="line">				}</span><br><span class="line">			}</span><br><span class="line">			<span class="keyword">catch</span> (NoSuchBeanDefinitionException ex) {</span><br><span class="line">				<span class="keyword">try</span> {</span><br><span class="line">                    <span class="comment">// 容器里没有TaskExecutor，拿名字叫"taskExecutor"的，类型为Executor的组件</span></span><br><span class="line">					<span class="keyword">return</span> beanFactory.getBean(DEFAULT_TASK_EXECUTOR_BEAN_NAME, Executor.class);</span><br><span class="line">				}</span><br><span class="line">			}</span><br><span class="line">		}</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>更进一步的，<code>AsyncExecutionInterceptor</code>继续重写了<code>getDefaultExecutor</code>，加入一个新的逻辑：如果没有默认执行器，就用<code>SimpleAsyncTaskExecutor</code></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AsyncExecutionInterceptor</span> <span class="keyword">extends</span> <span class="title class_">AsyncExecutionAspectSupport</span> <span class="keyword">implements</span> <span class="title class_">MethodInterceptor</span>, Ordered {</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="keyword">protected</span> Executor <span class="title function_">getDefaultExecutor</span><span class="params">(<span class="meta">@Nullable</span> BeanFactory beanFactory)</span> {</span><br><span class="line">        <span class="type">Executor</span> <span class="variable">defaultExecutor</span> <span class="operator">=</span> <span class="built_in">super</span>.getDefaultExecutor(beanFactory);</span><br><span class="line">        <span class="keyword">return</span> (defaultExecutor != <span class="literal">null</span> ? defaultExecutor : <span class="keyword">new</span> <span class="title class_">SimpleAsyncTaskExecutor</span>());</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><strong>小结2：若容器中只有一个<code>TaskExecutor</code>组件，其为默认执行器；若不唯一，拿名字叫”taskExecutor”的，类型为<code>Executor</code>的组件。若都不满足，使用<code>SimpleAsyncTaskExecutor</code>作为默认执行器（每次执行被注解方法时，单独创建一个Thread来执行）</strong></p>
</blockquote>
<p>在<code>AsyncExecutionInterceptor</code>中，实现了<code>invoke</code>方法，把原来方法的调用提交到新的线程池执行，从而实现了方法的异步。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 代码有删改</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AsyncExecutionInterceptor</span> <span class="keyword">extends</span> <span class="title class_">AsyncExecutionAspectSupport</span> <span class="keyword">implements</span> <span class="title class_">MethodInterceptor</span>, Ordered {</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AsyncExecutionInterceptor</span><span class="params">(<span class="meta">@Nullable</span> Executor defaultExecutor)</span> {</span><br><span class="line">		<span class="built_in">super</span>(defaultExecutor);</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="meta">@Nullable</span></span><br><span class="line">	<span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(<span class="keyword">final</span> MethodInvocation invocation)</span> <span class="keyword">throws</span> Throwable {</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 决定使用哪个executor</span></span><br><span class="line">        <span class="type">AsyncTaskExecutor</span> <span class="variable">executor</span> <span class="operator">=</span> determineAsyncExecutor(userDeclaredMethod);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 创建task（去执行原来方法）</span></span><br><span class="line">		Callable&lt;Object&gt; task = () -&gt; {</span><br><span class="line">			<span class="keyword">try</span> {</span><br><span class="line">				<span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> invocation.proceed();</span><br><span class="line">				<span class="keyword">if</span> (result <span class="keyword">instanceof</span> Future) {</span><br><span class="line">					<span class="keyword">return</span> ((Future&lt;?&gt;) result).get();</span><br><span class="line">				}</span><br><span class="line">			}</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">		};</span><br><span class="line">		</span><br><span class="line">        <span class="comment">// 提交到新的线程池执行</span></span><br><span class="line">		<span class="keyword">return</span> doSubmit(task, executor, invocation.getMethod().getReturnType());</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h2 id="异步处理的原理（-Async）"><a href="#异步处理的原理（-Async）" class="headerlink" title="异步处理的原理（@Async）"></a>异步处理的原理（@Async）</h2><h3 id="AnnotationAsyncExecutionInterceptor-1"><a href="#AnnotationAsyncExecutionInterceptor-1" class="headerlink" title="AnnotationAsyncExecutionInterceptor"></a>AnnotationAsyncExecutionInterceptor</h3><p>继承关系：<code>MethodInterceptor</code>&amp;<code>AsyncExecutionAspectSupport</code>&lt;-<code>AsyncExecutionInterceptor</code>&lt;-<code>AnnotationAsyncExecutionInterceptor</code></p>
<p>我们继续上面一节的内容，<code>AsyncExecutionAspectSupport</code>中实现了<code>determineAsyncExecutor</code>方法，用于确定使用哪个<code>executor</code></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">protected</span> AsyncTaskExecutor <span class="title function_">determineAsyncExecutor</span><span class="params">(Method method)</span> {</span><br><span class="line">    <span class="type">AsyncTaskExecutor</span> <span class="variable">executor</span> <span class="operator">=</span> <span class="built_in">this</span>.executors.get(method);</span><br><span class="line">    <span class="keyword">if</span> (executor == <span class="literal">null</span>) {</span><br><span class="line">        Executor targetExecutor;</span><br><span class="line">        <span class="comment">// 根据@Async注解的value属性，查找对应类型为Executor的异步执行器</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">qualifier</span> <span class="operator">=</span> getExecutorQualifier(method);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.hasLength(qualifier)) {</span><br><span class="line">            targetExecutor = findQualifiedExecutor(<span class="built_in">this</span>.beanFactory, qualifier);</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 如果没找到，获取defaultExecutor（之前已经获取过了）</span></span><br><span class="line">        <span class="keyword">else</span> {</span><br><span class="line">            targetExecutor = <span class="built_in">this</span>.defaultExecutor.get();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (targetExecutor == <span class="literal">null</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        }</span><br><span class="line">        executor = (targetExecutor <span class="keyword">instanceof</span> AsyncListenableTaskExecutor ?</span><br><span class="line">                (AsyncListenableTaskExecutor) targetExecutor : <span class="keyword">new</span> <span class="title class_">TaskExecutorAdapter</span>(targetExecutor));</span><br><span class="line">        <span class="comment">// 缓存，为某个方法指定executor</span></span><br><span class="line">        <span class="built_in">this</span>.executors.put(method, executor);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> executor;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p><code>AnnotationAsyncExecutionInterceptor</code>中实现了<code>getExecutorQualifier</code>方法</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">protected</span> String <span class="title function_">getExecutorQualifier</span><span class="params">(Method method)</span> {</span><br><span class="line">    <span class="comment">// 核心：拿到@Async注解标注的value</span></span><br><span class="line">    <span class="type">Async</span> <span class="variable">async</span> <span class="operator">=</span> AnnotatedElementUtils.findMergedAnnotation(method, Async.class);</span><br><span class="line">    <span class="keyword">if</span> (async == <span class="literal">null</span>) {</span><br><span class="line">        async = AnnotatedElementUtils.findMergedAnnotation(method.getDeclaringClass(), Async.class);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> (async != <span class="literal">null</span> ? async.value() : <span class="literal">null</span>);</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><strong>小结3：</strong>我们可以通过<code>@Async(value="xxx")</code>来手动指定想要使用的执行器</p>
</blockquote>
<h2 id="SpringBoot中的默认线程池"><a href="#SpringBoot中的默认线程池" class="headerlink" title="SpringBoot中的默认线程池"></a>SpringBoot中的默认线程池</h2><h3 id="TaskExecutionAutoConfiguration"><a href="#TaskExecutionAutoConfiguration" class="headerlink" title="TaskExecutionAutoConfiguration"></a>TaskExecutionAutoConfiguration</h3><p>SpringBoot中的线程池，是通过<code>TaskExecutionAutoConfiguration</code>这个自动配置类加载的。我们来看一下其中的源码。</p>
<ol>
<li><code>taskExecutorBuilder</code>方法用于创建一个构造器</li>
<li>在<code>applicationTaskExecutor</code>方法中，使用该构造器创建了线程池</li>
<li><code>TaskExecutionProperties.class</code>属性类，绑定了所有的属性</li>
</ol>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConditionalOnClass(ThreadPoolTaskExecutor.class)</span></span><br><span class="line"><span class="meta">@AutoConfiguration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(TaskExecutionProperties.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TaskExecutionAutoConfiguration</span> {</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Bean name of the application {@link TaskExecutor}.</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">APPLICATION_TASK_EXECUTOR_BEAN_NAME</span> <span class="operator">=</span> <span class="string">"applicationTaskExecutor"</span>;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 构造器，用于创建线程池</span></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">	<span class="keyword">public</span> TaskExecutorBuilder <span class="title function_">taskExecutorBuilder</span><span class="params">(TaskExecutionProperties properties,</span></span><br><span class="line"><span class="params">			ObjectProvider&lt;TaskExecutorCustomizer&gt; taskExecutorCustomizers,</span></span><br><span class="line"><span class="params">			ObjectProvider&lt;TaskDecorator&gt; taskDecorator)</span> {</span><br><span class="line">		TaskExecutionProperties.<span class="type">Pool</span> <span class="variable">pool</span> <span class="operator">=</span> properties.getPool();</span><br><span class="line">		<span class="type">TaskExecutorBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TaskExecutorBuilder</span>();</span><br><span class="line">		builder = builder.queueCapacity(pool.getQueueCapacity());</span><br><span class="line">		builder = builder.corePoolSize(pool.getCoreSize());</span><br><span class="line">		builder = builder.maxPoolSize(pool.getMaxSize());</span><br><span class="line">		builder = builder.allowCoreThreadTimeOut(pool.isAllowCoreThreadTimeout());</span><br><span class="line">		builder = builder.keepAlive(pool.getKeepAlive());</span><br><span class="line">		<span class="type">Shutdown</span> <span class="variable">shutdown</span> <span class="operator">=</span> properties.getShutdown();</span><br><span class="line">		builder = builder.awaitTermination(shutdown.isAwaitTermination());</span><br><span class="line">		builder = builder.awaitTerminationPeriod(shutdown.getAwaitTerminationPeriod());</span><br><span class="line">		builder = builder.threadNamePrefix(properties.getThreadNamePrefix());</span><br><span class="line">		builder = builder.customizers(taskExecutorCustomizers.orderedStream()::iterator);</span><br><span class="line">		builder = builder.taskDecorator(taskDecorator.getIfUnique());</span><br><span class="line">		<span class="keyword">return</span> builder;</span><br><span class="line">	}</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 使用构造器，创建线程池Bean，放到容器中</span></span><br><span class="line">    <span class="comment">// name = {applicationTaskExecutor, taskExecutor}</span></span><br><span class="line">	<span class="meta">@Lazy</span></span><br><span class="line">	<span class="meta">@Bean(name = { APPLICATION_TASK_EXECUTOR_BEAN_NAME,</span></span><br><span class="line"><span class="meta">			AsyncAnnotationBeanPostProcessor.DEFAULT_TASK_EXECUTOR_BEAN_NAME })</span></span><br><span class="line">	<span class="meta">@ConditionalOnMissingBean(Executor.class)</span></span><br><span class="line">	<span class="keyword">public</span> ThreadPoolTaskExecutor <span class="title function_">applicationTaskExecutor</span><span class="params">(TaskExecutorBuilder builder)</span> {</span><br><span class="line">		<span class="keyword">return</span> builder.build();</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h3 id="TaskExecutionProperties"><a href="#TaskExecutionProperties" class="headerlink" title="TaskExecutionProperties"></a>TaskExecutionProperties</h3><p>该属性配置类绑定到<code>spring.task.execution</code>，我们可以定制SpringBoot线程池中的基本属性</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 代码有删改</span></span><br><span class="line"><span class="meta">@ConfigurationProperties("spring.task.execution")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TaskExecutionProperties</span> {</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Pool</span> <span class="variable">pool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Pool</span>();</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Shutdown</span> <span class="variable">shutdown</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Shutdown</span>();</span><br><span class="line">	<span class="keyword">private</span> <span class="type">String</span> <span class="variable">threadNamePrefix</span> <span class="operator">=</span> <span class="string">"task-"</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Pool</span> {</span><br><span class="line">		<span class="keyword">private</span> <span class="type">int</span> <span class="variable">queueCapacity</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">		<span class="keyword">private</span> <span class="type">int</span> <span class="variable">coreSize</span> <span class="operator">=</span> <span class="number">8</span>;</span><br><span class="line">		<span class="keyword">private</span> <span class="type">int</span> <span class="variable">maxSize</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">	}</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>java</category>
        <category>SpringBoot</category>
        <category>源码</category>
      </categories>
      <tags>
        <tag>SpringBoot源码系列</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot源码系列（2）：SpringBootApplication注解</title>
    <url>//post/50220/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在SpringBoot项目中的主类上标注<code>@SpringBootApplication</code>注解，便可实现基本的自动配置功能。本文通过源码了解其背后的原理。本文中SpringBoot版本号为2.7.5。</p>
<p>原文地址：<a href="https://xuedongyun.cn/post/50220/">https://xuedongyun.cn/post/50220/</a></p>
<h2 id="SpringBootApplication的构成"><a href="#SpringBootApplication的构成" class="headerlink" title="@SpringBootApplication的构成"></a>@SpringBootApplication的构成</h2><p><code>@SpringBootApplication</code>注解是一个复合注解，核心由<code>@SpringBootConfiguration</code>, <code>@EnableAutoConfiguration</code>, <code>@ComponentScan</code>三部分构成。接下来我们分别来看三个核心注解的作用</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan(excludeFilters = { @Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),</span></span><br><span class="line"><span class="meta">		@Filter(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) })</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootApplication {</span><br><span class="line">    </span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h3 id="SpringBootConfiguration"><a href="#SpringBootConfiguration" class="headerlink" title="@SpringBootConfiguration"></a>@SpringBootConfiguration</h3><p>Main类本身也是SpringBoot中的配置类，只不过是核心配置类。<code>@SpringBootConfiguration</code>核心其实就是<code>@Configuration</code></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>	<span class="comment">// 核心</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootConfiguration {</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h3 id="ComponentScan"><a href="#ComponentScan" class="headerlink" title="@ComponentScan"></a>@ComponentScan</h3><p>用于指定扫描的类，Spring中的注解，可以具体看看。此处意义不大，暂且略过</p>
<h3 id="EnableAutoConfiguration"><a href="#EnableAutoConfiguration" class="headerlink" title="@EnableAutoConfiguration"></a>@EnableAutoConfiguration</h3><p>本次最核心的注解，用于开启自动配置。它也是一个复合注解，包含<code>@AutoConfigurationPackage</code>和<code>@Import(AutoConfigurationImportSelector.class)</code>两个部分。我们接下来详细看两个部分的代码。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@AutoConfigurationPackage</span></span><br><span class="line"><span class="meta">@Import(AutoConfigurationImportSelector.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAutoConfiguration {</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h4 id="AutoConfigurationPackage"><a href="#AutoConfigurationPackage" class="headerlink" title="@AutoConfigurationPackage"></a>@AutoConfigurationPackage</h4><p>翻译：自动配置包。我们查看其源码，发现它使用<code>@Import</code>注解为容器导入了<code>Registrar</code>组件。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Import(AutoConfigurationPackages.Registrar.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> AutoConfigurationPackage {</span><br><span class="line">    </span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p><code>AutoConfigurationPackages.Registrar</code>组件为容器导入了一系列组件</p>
<blockquote>
<p>我们这里用到了<code>@Import</code>的高级用法</p>
<ol>
<li><p><code>ImportBeanDefinitionRegistrar</code>接口：允许自动配置类向Spring IoC容器中注册额外的组件</p>
<ul>
<li>通过<code>@Import</code>注解导入类时，若该类实现了此接口，会调用其<code>registerBeanDefinitions</code>方法</li>
</ul>
</li>
<li><p><code>DeterminableImports</code>接口：让Spring Boot在自动配置过程中确定哪些类应该被添加到自动配置类的导入列表中</p>
<ul>
<li>当SpringBoot需要自动配置某个类时，若该类实现了此接口，会调用其<code>determineImports</code>方法，用于确定哪些类应该被添加到自动配置类的导入列表中</li>
</ul>
</li>
</ol>
</blockquote>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Registrar</span> <span class="keyword">implements</span> <span class="title class_">ImportBeanDefinitionRegistrar</span>, DeterminableImports {</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerBeanDefinitions</span><span class="params">(AnnotationMetadata metadata, BeanDefinitionRegistry registry)</span> {</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        	通过注解元信息，当前获取包名，存到了一个数组里</span></span><br><span class="line"><span class="comment">        	new PackageImports(metadata).getPackageNames().toArray(new String[0]) </span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        	第一个参数是BeanDefinitionRegistry对象，用于向IOC容器中注册组件</span></span><br><span class="line"><span class="comment">        	第二个参数是一个字符串数组，存包的全限定名</span></span><br><span class="line"><span class="comment">        	该方法扫描指定的包，将其中组件注册到IOC容器中 </span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        register(registry, <span class="keyword">new</span> <span class="title class_">PackageImports</span>(metadata).getPackageNames().toArray(<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>]));</span><br><span class="line">    }</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 此处该方法不重要</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Set&lt;Object&gt; <span class="title function_">determineImports</span><span class="params">(AnnotationMetadata metadata)</span> {</span><br><span class="line">        <span class="keyword">return</span> Collections.singleton(<span class="keyword">new</span> <span class="title class_">PackageImports</span>(metadata));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>现在，我们Main类所在包下的所有组件，都被自动导入了</p>
<h4 id="Import-AutoConfigurationImportSelector-class"><a href="#Import-AutoConfigurationImportSelector-class" class="headerlink" title="@Import(AutoConfigurationImportSelector.class)"></a>@Import(AutoConfigurationImportSelector.class)</h4><p>通过@Import注解导入了<code>AutoConfigurationImportSelector</code>类型的Bean。<code>AutoConfigurationImportSelector</code>实现了<code>ImportSelector</code>接口，被用于动态地确定应该导入哪些自动配置类。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 略去一部分代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AutoConfigurationImportSelector</span> <span class="keyword">implements</span> <span class="title class_">DeferredImportSelector</span>, BeanClassLoaderAware,</span><br><span class="line">		ResourceLoaderAware, BeanFactoryAware, EnvironmentAware, Ordered {</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> String[] selectImports(AnnotationMetadata annotationMetadata) {</span><br><span class="line">		<span class="keyword">if</span> (!isEnabled(annotationMetadata)) {</span><br><span class="line">			<span class="keyword">return</span> NO_IMPORTS;</span><br><span class="line">		}</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 调用了getAutoConfigurationEntry</span></span><br><span class="line">		<span class="type">AutoConfigurationEntry</span> <span class="variable">autoConfigurationEntry</span> <span class="operator">=</span> getAutoConfigurationEntry(annotationMetadata);</span><br><span class="line">		<span class="keyword">return</span> StringUtils.toStringArray(autoConfigurationEntry.getConfigurations());</span><br><span class="line">	}</span><br><span class="line">            </span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>继续查看<code>getAutoConfigurationEntry</code>方法</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 给容器中批量导入组件</span></span><br><span class="line"><span class="keyword">protected</span> AutoConfigurationEntry <span class="title function_">getAutoConfigurationEntry</span><span class="params">(AnnotationMetadata annotationMetadata)</span> {</span><br><span class="line">    <span class="keyword">if</span> (!isEnabled(annotationMetadata)) {</span><br><span class="line">        <span class="keyword">return</span> EMPTY_ENTRY;</span><br><span class="line">    }</span><br><span class="line">    <span class="type">AnnotationAttributes</span> <span class="variable">attributes</span> <span class="operator">=</span> getAttributes(annotationMetadata);</span><br><span class="line">    <span class="comment">// 加载了候选的配置</span></span><br><span class="line">    List&lt;String&gt; configurations = getCandidateConfigurations(annotationMetadata, attributes);</span><br><span class="line">    <span class="comment">// 后续对候选的配置做了一些操作，最后返回</span></span><br><span class="line">    configurations = removeDuplicates(configurations);</span><br><span class="line">    Set&lt;String&gt; exclusions = getExclusions(annotationMetadata, attributes);</span><br><span class="line">    checkExcludedClasses(configurations, exclusions);</span><br><span class="line">    configurations.removeAll(exclusions);</span><br><span class="line">    configurations = getConfigurationClassFilter().filter(configurations);</span><br><span class="line">    fireAutoConfigurationImportEvents(configurations, exclusions);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AutoConfigurationEntry</span>(configurations, exclusions);</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><code>getCandidateConfigurations</code>方法获取了所有的候选配置，通过调试可以大概看到</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">"org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration"</span><br><span class="line">"org.springframework.boot.autoconfigure.aop.AopAutoConfiguration"</span><br><span class="line">"org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration"</span><br><span class="line">"org.springframework.boot.autoconfigure.batch.BatchAutoConfiguration"</span><br><span class="line">...</span><br></pre></td></tr></table></figure></div>
</blockquote>
<p>继续查看<code>getCandidateConfigurations</code>方法。</p>
<ol>
<li>会根据传入的<code>AnnotationMetadata</code>和<code>AnnotationAttributes</code>参数，使用<code>SpringFactoriesLoader</code>工具类，加载所有在<code>META-INF/spring.factories</code>文件中声明的类，并将它们添加到一个<code>List</code>中。</li>
<li>还通过<code>ImportCandidates.load()</code>方法，加载了所有在<code>META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports</code>文件中声明的<code>AutoConfiguration</code>类，并将它们也添加到了上述的<code>List</code>中。（最新的标准，推荐使用它）</li>
</ol>
<p>我们简单看看<code>SpringFactoriesLoader.loadFactoryNames</code>的代码实现：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 略去一部分代码</span></span><br><span class="line"><span class="keyword">protected</span> List&lt;String&gt; <span class="title function_">getCandidateConfigurations</span><span class="params">(AnnotationMetadata metadata, AnnotationAttributes attributes)</span> {</span><br><span class="line">    <span class="comment">// 可以看到，是通过SpringFactoriesLoader.loadFactoryNames获取的候选列表</span></span><br><span class="line">    List&lt;String&gt; configurations = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(</span><br><span class="line">            SpringFactoriesLoader.loadFactoryNames(</span><br><span class="line">                getSpringFactoriesLoaderFactoryClass(),</span><br><span class="line">                getBeanClassLoader()</span><br><span class="line">            )</span><br><span class="line">    );</span><br><span class="line">    ImportCandidates.load(AutoConfiguration.class, getBeanClassLoader()).forEach(configurations::add);</span><br><span class="line">    Assert.notEmpty(configurations, <span class="string">"..."</span>);</span><br><span class="line">    <span class="keyword">return</span> configurations;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 略去一部分代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title function_">loadFactoryNames</span><span class="params">(Class&lt;?&gt; factoryType, <span class="meta">@Nullable</span> ClassLoader classLoader)</span> {</span><br><span class="line">    <span class="keyword">return</span> loadSpringFactories(classLoaderToUse).getOrDefault(factoryTypeName, Collections.emptyList());</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, List&lt;String&gt;&gt; <span class="title function_">loadSpringFactories</span><span class="params">(ClassLoader classLoader)</span> {</span><br><span class="line">    <span class="comment">// key: 接口名, value: 实现类</span></span><br><span class="line">	Map&lt;String, List&lt;String&gt;&gt; result = cache.get(classLoader);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    	从"META-INF/spring.factories"加载文件</span></span><br><span class="line"><span class="comment">    	FACTORIES_RESOURCE_LOCATION = "META-INF/spring.factories"</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    Enumeration&lt;URL&gt; urls = classLoader.getResources(FACTORIES_RESOURCE_LOCATION);</span><br><span class="line">    <span class="keyword">while</span> (urls.hasMoreElements()) {</span><br><span class="line">        <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> urls.nextElement();</span><br><span class="line">        <span class="type">UrlResource</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UrlResource</span>(url);</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> PropertiesLoaderUtils.loadProperties(resource);</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;?, ?&gt; entry : properties.entrySet()) {</span><br><span class="line">            </span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>举例说明：<code>spring-boot-test-autoconfigure</code>的<code>META-INF/spring.factories</code>文件为以下内容，其中内容为：接口名+实现类名</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"># DefaultTestExecutionListenersPostProcessors</span><br><span class="line">org.springframework.boot.test.context.DefaultTestExecutionListenersPostProcessor=\</span><br><span class="line">org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener$PostProcessor</span><br><span class="line"></span><br><span class="line"># Spring Test ContextCustomizerFactories</span><br><span class="line">org.springframework.test.context.ContextCustomizerFactory=\</span><br><span class="line">org.springframework.boot.test.autoconfigure.OverrideAutoConfigurationContextCustomizerFactory,\</span><br><span class="line">org.springframework.boot.test.autoconfigure.actuate.metrics.MetricsExportContextCustomizerFactory,\</span><br><span class="line">org.springframework.boot.test.autoconfigure.filter.TypeExcludeFiltersContextCustomizerFactory,\</span><br><span class="line">org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizerFactory,\</span><br><span class="line">org.springframework.boot.test.autoconfigure.web.servlet.WebDriverContextCustomizerFactory</span><br><span class="line"></span><br><span class="line"># Test Execution Listeners</span><br><span class="line">org.springframework.test.context.TestExecutionListener=\</span><br><span class="line">org.springframework.boot.test.autoconfigure.restdocs.RestDocsTestExecutionListener,\</span><br><span class="line">org.springframework.boot.test.autoconfigure.web.client.MockRestServiceServerResetTestExecutionListener,\</span><br><span class="line">org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrintOnlyOnFailureTestExecutionListener,\</span><br><span class="line">org.springframework.boot.test.autoconfigure.web.servlet.WebDriverTestExecutionListener,\</span><br><span class="line">org.springframework.boot.test.autoconfigure.webservices.client.MockWebServiceServerTestExecutionListener</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>2.7.0以后，不推荐将配置写入<code>spring.factories</code>中了，推荐写在<code>META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports</code>里</p>
</blockquote>
<h2 id="自动配置类会按需开启"><a href="#自动配置类会按需开启" class="headerlink" title="自动配置类会按需开启"></a>自动配置类会按需开启</h2><p>虽然上述场景中，所有自动配置启动时默认加载全部（<code>xxxAutoConfiguration</code>），但是按照每个类的装配规则（<code>@Conditional</code>），最终还是会按需配置</p>
<p>例如：<code>AopAutoConfiguration</code></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@AutoConfiguration</span></span><br><span class="line"><span class="comment">// spring.aop.auto = true开启aop</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(prefix = "spring.aop", name = "auto", havingValue = "true", matchIfMissing = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AopAutoConfiguration</span> {</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 存在Advice类，</span></span><br><span class="line">	<span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line">	<span class="meta">@ConditionalOnClass(Advice.class)</span></span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">AspectJAutoProxyingConfiguration</span> { }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 没有Advice类，则开启的简单的aop功能</span></span><br><span class="line">	<span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line">	<span class="meta">@ConditionalOnMissingClass("org.aspectj.weaver.Advice")</span></span><br><span class="line">    <span class="comment">// spring.aop.proxy-target-class = true</span></span><br><span class="line">	<span class="meta">@ConditionalOnProperty(prefix = "spring.aop", name = "proxy-target-class", havingValue = "true", matchIfMissing = true)</span></span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ClassProxyingConfiguration</span> { }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>java</category>
        <category>SpringBoot</category>
        <category>源码</category>
      </categories>
      <tags>
        <tag>SpringBoot源码系列</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot源码系列（7）：返回值处理器</title>
    <url>//post/5854/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在SpringBoot/SpringMVC中，我们在<code>@ResponseBody</code>注解标注的<code>Controller</code>中直接返回对象，即可为请求返回所需类型的返回值（比如json格式）。本文就来谈谈返回值处理器的原理。</p>
<p>原文地址：<a href="https://xuedongyun.cn/post/44248/">https://xuedongyun.cn/post/44248/</a></p>
<h2 id="返回值处理器原理"><a href="#返回值处理器原理" class="headerlink" title="返回值处理器原理"></a>返回值处理器原理</h2><h3 id="RequestMappingHandlerAdapter"><a href="#RequestMappingHandlerAdapter" class="headerlink" title="RequestMappingHandlerAdapter"></a>RequestMappingHandlerAdapter</h3><p>有关参数解析的原理，可以查看我之前的文章：<a href="https://xuedongyun.cn/post/13517/">SpringBoot源码系列（5）：参数解析</a></p>
<p><code>RequestMappingHandlerAdapter</code>执行了<code>handleInternal</code>方法。代码中，主要设置了请求值解析器和返回值解析器，然后调用了<code>invocableMethod.invokeAndHandle</code>进行处理</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 代码有删改</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">protected</span> ModelAndView <span class="title function_">invokeHandlerMethod</span><span class="params">(HttpServletRequest request,</span></span><br><span class="line"><span class="params">        HttpServletResponse response, HandlerMethod handlerMethod)</span> <span class="keyword">throws</span> Exception {</span><br><span class="line"></span><br><span class="line">    <span class="type">ServletWebRequest</span> <span class="variable">webRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServletWebRequest</span>(request, response);</span><br><span class="line">    <span class="keyword">try</span> {</span><br><span class="line">        <span class="type">ServletInvocableHandlerMethod</span> <span class="variable">invocableMethod</span> <span class="operator">=</span> createInvocableHandlerMethod(handlerMethod);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// argumentResolvers：请求值解析器，用于确定目标方法每一个参数值是什么</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.argumentResolvers != <span class="literal">null</span>) {</span><br><span class="line">            invocableMethod.setHandlerMethodArgumentResolvers(<span class="built_in">this</span>.argumentResolvers);</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// returnValueHandlers：返回值处理器</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.returnValueHandlers != <span class="literal">null</span>) {</span><br><span class="line">            invocableMethod.setHandlerMethodReturnValueHandlers(<span class="built_in">this</span>.returnValueHandlers);</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">        <span class="type">ModelAndViewContainer</span> <span class="variable">mavContainer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndViewContainer</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 执行并处理</span></span><br><span class="line">        invocableMethod.invokeAndHandle(webRequest, mavContainer);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> getModelAndView(mavContainer, modelFactory, webRequest);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h3 id="ServletInvocableHandlerMethod"><a href="#ServletInvocableHandlerMethod" class="headerlink" title="ServletInvocableHandlerMethod"></a>ServletInvocableHandlerMethod</h3><p>在<code>RequestMappingHandlerAdapter</code>中，调用了<code>invocableMethod.invokeAndHandle</code>。我们现在查看<code>ServletInvocableHandlerMethod</code>的<code>invokeAndHandle</code>方法</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 代码有删改</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invokeAndHandle</span><span class="params">(ServletWebRequest webRequest, ModelAndViewContainer mavContainer,</span></span><br><span class="line"><span class="params">        Object... providedArgs)</span> <span class="keyword">throws</span> Exception {</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 此处已拿到返回对象</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">returnValue</span> <span class="operator">=</span> invokeForRequest(webRequest, mavContainer, providedArgs);</span><br><span class="line">    setResponseStatus(webRequest);</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 如果返回为空，直接返回</span></span><br><span class="line">    <span class="keyword">if</span> (returnValue == <span class="literal">null</span>) {</span><br><span class="line">        <span class="keyword">if</span> (isRequestNotModified(webRequest) || </span><br><span class="line">            	getResponseStatus() != <span class="literal">null</span> || </span><br><span class="line">            	mavContainer.isRequestHandled()) {</span><br><span class="line">            disableContentCachingIfNecessary(webRequest);</span><br><span class="line">            mavContainer.setRequestHandled(<span class="literal">true</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 检测返回值里有无一些失败原因等</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (StringUtils.hasText(getResponseStatusReason())) {</span><br><span class="line">        mavContainer.setRequestHandled(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> {</span><br><span class="line">        <span class="comment">// 利用返回值处理器，处理返回值</span></span><br><span class="line">        <span class="built_in">this</span>.returnValueHandlers.handleReturnValue(</span><br><span class="line">                returnValue, getReturnValueType(returnValue), mavContainer, webRequest);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h3 id="HandlerMethodReturnValueHandlerComposite"><a href="#HandlerMethodReturnValueHandlerComposite" class="headerlink" title="HandlerMethodReturnValueHandlerComposite"></a>HandlerMethodReturnValueHandlerComposite</h3><p>我们来看<code>this.returnValueHandlers</code>的<code>handleReturnValue</code>方法</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleReturnValue</span><span class="params">(<span class="meta">@Nullable</span> Object returnValue, </span></span><br><span class="line"><span class="params">                              MethodParameter returnType,</span></span><br><span class="line"><span class="params">                              ModelAndViewContainer mavContainer, </span></span><br><span class="line"><span class="params">                              NativeWebRequest webRequest)</span> <span class="keyword">throws</span> Exception {</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 找合适的返回值处理器</span></span><br><span class="line">    <span class="type">HandlerMethodReturnValueHandler</span> <span class="variable">handler</span> <span class="operator">=</span> selectHandler(returnValue, returnType);</span><br><span class="line">    <span class="keyword">if</span> (handler == <span class="literal">null</span>) {</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">"..."</span>);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 利用找到的返回值处理器进行处理</span></span><br><span class="line">    handler.handleReturnValue(returnValue, returnType, mavContainer, webRequest);</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>其中，<code>selectHandler</code>方法选择合适的返回值处理器</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> HandlerMethodReturnValueHandler <span class="title function_">selectHandler</span><span class="params">(<span class="meta">@Nullable</span> Object value, </span></span><br><span class="line"><span class="params">                                                      MethodParameter returnType)</span> {</span><br><span class="line">    <span class="comment">// 此处是用来判断是否是异步返回值的，可以先不管</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">isAsyncValue</span> <span class="operator">=</span> isAsyncReturnValue(value, returnType);</span><br><span class="line">    <span class="keyword">for</span> (HandlerMethodReturnValueHandler handler : <span class="built_in">this</span>.returnValueHandlers) {</span><br><span class="line">        <span class="keyword">if</span> (isAsyncValue &amp;&amp; !(handler <span class="keyword">instanceof</span> AsyncHandlerMethodReturnValueHandler)) {</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 遍历所有返回值处理器，寻找相应处理器</span></span><br><span class="line">        <span class="keyword">if</span> (handler.supportsReturnType(returnType)) {</span><br><span class="line">            <span class="keyword">return</span> handler;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p><code>this.returnValueHandlers</code>一共有15种</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">this.returnValueHandlers = {ArrayList} size = 15</span><br><span class="line">	0 = {ModelAndViewMethodReturnValueHandler}</span><br><span class="line">	1 = {ModelMethodProcessor}</span><br><span class="line">	2 = {ViewMethodReturnValueHandler}</span><br><span class="line">	3 = {ResponseBodyEmitterReturnValueHandler}</span><br><span class="line">	4 = {StreamingResponseBodyReturnValueHandler}</span><br><span class="line">	5 = {HttpEntityMethodProcessor}</span><br><span class="line">	6 = {HttpHeadersReturnValueHandler}</span><br><span class="line">	7 = {CallableMethodReturnValueHandler)</span><br><span class="line">	8 = {DeferredResultMethodReturnValueHandler}</span><br><span class="line">	9 = {AsyncTaskMethodReturnValueHandler}</span><br><span class="line">	10 = {ServletModelAttributeMethodProcessor}</span><br><span class="line">	11 = (RequestResponseBodyMethodProcessor}</span><br><span class="line">	12 = {ViewNameMethodReturnValueHandler}</span><br><span class="line">	13 = {MapMethodProcessor)</span><br><span class="line">	14 = {ServletModelAttributeMethodProcessor}</span><br></pre></td></tr></table></figure></div>

<p>（例子一）<code>ModelAndViewMethodReturnValueHandler</code>的<code>supportsReturnType</code>方法：判断返回值类型是否继承自<code>ModelAndView</code>（也即返回值能否转为<code>ModelAndView</code>类型）</p>
<p>（例子二）<code>RequestResponseBodyMethodProcessor</code>的<code>supportsReturnType</code>方法：判断类或者方法，有没有加<code>@ResponseBody</code>注解</p>
<h3 id="HandlerMethodReturnValueHandler"><a href="#HandlerMethodReturnValueHandler" class="headerlink" title="HandlerMethodReturnValueHandler"></a>HandlerMethodReturnValueHandler</h3><p>以<code>RequestResponseBodyMethodProcessor</code>为例，查看<code>handler.handleReturnValue</code>方法</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleReturnValue</span><span class="params">(<span class="meta">@Nullable</span> Object returnValue, MethodParameter returnType,</span></span><br><span class="line"><span class="params">                              ModelAndViewContainer mavContainer, NativeWebRequest webRequest)</span></span><br><span class="line">    <span class="keyword">throws</span> IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException {</span><br><span class="line"></span><br><span class="line">    mavContainer.setRequestHandled(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">ServletServerHttpRequest</span> <span class="variable">inputMessage</span> <span class="operator">=</span> createInputMessage(webRequest);</span><br><span class="line">    <span class="type">ServletServerHttpResponse</span> <span class="variable">outputMessage</span> <span class="operator">=</span> createOutputMessage(webRequest);</span><br><span class="line"></span><br><span class="line">   	<span class="comment">// 消息转换器，进行写出操作，将返回值转换为json</span></span><br><span class="line">    writeWithMessageConverters(returnValue, returnType, inputMessage, outputMessage); <span class="comment">// 步入</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>查看<code>writeWithMessageConverters</code>方法。这里包含“内容协商”的核心原理：浏览器能接收的类型“并上”服务器能提供的类型，使用第一个作为使用的媒体类型。之后第二次遍历<code>messageConverters</code>，寻找支持的<code>Converter</code></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 代码有删改</span></span><br><span class="line"><span class="keyword">protected</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">writeWithMessageConverters</span><span class="params">(<span class="meta">@Nullable</span> T value, </span></span><br><span class="line"><span class="params">                                              MethodParameter returnType,</span></span><br><span class="line"><span class="params">                                              ServletServerHttpRequest inputMessage, 		</span></span><br><span class="line"><span class="params">                                              ServletServerHttpResponse outputMessage)</span></span><br><span class="line">    <span class="keyword">throws</span> IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException {</span><br><span class="line"></span><br><span class="line">    Object body;</span><br><span class="line">    Class&lt;?&gt; valueType;</span><br><span class="line">    Type targetType;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 判断返回值是不是字符串类型</span></span><br><span class="line">    <span class="keyword">if</span> (value <span class="keyword">instanceof</span> CharSequence) {</span><br><span class="line">        body = value.toString();</span><br><span class="line">        valueType = String.class;</span><br><span class="line">        targetType = String.class;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span> {</span><br><span class="line">        body = value;</span><br><span class="line">        valueType = getReturnValueType(body, returnType);</span><br><span class="line">        targetType = GenericTypeResolver.resolveType(getGenericType(returnType), returnType.getContainingClass());</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断返回值是不是资源类型（是不是流数据）</span></span><br><span class="line">    <span class="keyword">if</span> (isResourceType(value, returnType)) {</span><br><span class="line">        <span class="comment">// 调用对流数据的处理方法，响应回去</span></span><br><span class="line">    }</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// MediaType（媒体类型），牵扯到内容协商</span></span><br><span class="line">    <span class="comment">// 浏览器发请求的时候，在请求头的Accept中告诉服务器能接收的类型</span></span><br><span class="line">    <span class="type">MediaType</span> <span class="variable">selectedMediaType</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 先看看响应头中，有没有已经写好的响应内容类型</span></span><br><span class="line">    <span class="type">MediaType</span> <span class="variable">contentType</span> <span class="operator">=</span> outputMessage.getHeaders().getContentType();</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">isContentTypePreset</span> <span class="operator">=</span> contentType != <span class="literal">null</span> &amp;&amp; contentType.isConcrete();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 如果response已经有了写好的响应类型，就直接用</span></span><br><span class="line">    <span class="keyword">if</span> (isContentTypePreset) {</span><br><span class="line">        ...</span><br><span class="line">        selectedMediaType = contentType;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 不然，拿到能接收的媒体类型</span></span><br><span class="line">    <span class="keyword">else</span> {</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> inputMessage.getServletRequest();</span><br><span class="line">        <span class="comment">// 浏览器能接收的类型</span></span><br><span class="line">        List&lt;MediaType&gt; acceptableTypes = getAcceptableMediaTypes(request); </span><br><span class="line">        <span class="comment">// 服务器能产生的类型（遍历所有MessageConverter，看哪些支持，进而统计媒体类型）</span></span><br><span class="line">        List&lt;MediaType&gt; producibleTypes = getProducibleMediaTypes(request, valueType, targetType); </span><br><span class="line"></span><br><span class="line">        <span class="comment">// 计算最终能使用的媒体类型</span></span><br><span class="line">        List&lt;MediaType&gt; mediaTypesToUse = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (MediaType requestedType : acceptableTypes) {</span><br><span class="line">            <span class="keyword">for</span> (MediaType producibleType : producibleTypes) {</span><br><span class="line">                <span class="keyword">if</span> (requestedType.isCompatibleWith(producibleType)) {</span><br><span class="line">                    mediaTypesToUse.add(getMostSpecificMediaType(requestedType, producibleType));</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">        MediaType.sortBySpecificityAndQuality(mediaTypesToUse);</span><br><span class="line">		</span><br><span class="line">        <span class="comment">// 最终拿到selectedMediaType，比如这里就是"application/json"</span></span><br><span class="line">        <span class="keyword">for</span> (MediaType mediaType : mediaTypesToUse) {</span><br><span class="line">            <span class="keyword">if</span> (mediaType.isConcrete()) {</span><br><span class="line">                selectedMediaType = mediaType;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (mediaType.isPresentIn(ALL_APPLICATION_MEDIA_TYPES)) {</span><br><span class="line">                selectedMediaType = MediaType.APPLICATION_OCTET_STREAM;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">	</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (selectedMediaType != <span class="literal">null</span>) {</span><br><span class="line">        selectedMediaType = selectedMediaType.removeQualityValue();</span><br><span class="line">        <span class="comment">// 遍历所有的HttpMessageConverter（消息转换器），看谁能处理。（可以看看这个接口的方法）</span></span><br><span class="line">        <span class="keyword">for</span> (HttpMessageConverter&lt;?&gt; converter : <span class="built_in">this</span>.messageConverters) {</span><br><span class="line">            <span class="type">GenericHttpMessageConverter</span> <span class="variable">genericConverter</span> <span class="operator">=</span> </span><br><span class="line">                (converter <span class="keyword">instanceof</span> GenericHttpMessageConverter ? </span><br><span class="line">                 (GenericHttpMessageConverter&lt;?&gt;) converter : <span class="literal">null</span>);</span><br><span class="line">            <span class="keyword">if</span> (genericConverter != <span class="literal">null</span> ?</span><br><span class="line">                <span class="comment">// GenericHttpMessageConverter由canWrite判断能否使用</span></span><br><span class="line">                ((GenericHttpMessageConverter) converter).canWrite(targetType, </span><br><span class="line">                                                                   valueType, </span><br><span class="line">                                                                   selectedMediaType) :</span><br><span class="line">                <span class="comment">// 这里AbstractHttpMessageConverter的canWrite实际上由support和canWrite组成</span></span><br><span class="line">                converter.canWrite(valueType, selectedMediaType)) {</span><br><span class="line">                body = getAdvice().</span><br><span class="line">                    beforeBodyWrite(body, </span><br><span class="line">                                    returnType, </span><br><span class="line">                                    selectedMediaType,</span><br><span class="line">                                    (Class&lt;? <span class="keyword">extends</span> <span class="title class_">HttpMessageConverter</span>&lt;?&gt;&gt;) converter.getClass(),</span><br><span class="line">                                    inputMessage, outputMessage);</span><br><span class="line">                <span class="keyword">if</span> (body != <span class="literal">null</span>) {</span><br><span class="line">                    <span class="type">Object</span> <span class="variable">theBody</span> <span class="operator">=</span> body;</span><br><span class="line">                    LogFormatUtils.traceDebug(<span class="string">"..."</span>);</span><br><span class="line">                    addContentDispositionHeader(inputMessage, outputMessage);</span><br><span class="line">                    <span class="keyword">if</span> (genericConverter != <span class="literal">null</span>) {</span><br><span class="line">                        <span class="comment">// 用当前转换器，写出去，步入</span></span><br><span class="line">                        genericConverter.write(body, targetType, selectedMediaType, outputMessage);</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p><code>this.messageConverters</code>有9个，能否使用的判断由<code>support</code>和<code>canWrite</code>共同决定，下面只考虑了<code>support</code>的部分</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">this.messageConverters = {ArrayList} size = 9</span><br><span class="line">	0={ByteArrayHttpMessageConverter}			只支持Byte类型</span><br><span class="line">	1={StringHttpMessageConverter}				只支持String类型</span><br><span class="line">	2={StringHttpMessageConverter}				只支持String类型（这两个默认字符集不一样，UTF-8和ISO-8859-1）</span><br><span class="line">	3={ResourceHttpMessageConverter)			只支持返回值为Resource</span><br><span class="line">	4={ResourceRegionHttpMessageConverter}		只支持返回值为ResourceRegion</span><br><span class="line">	5={SourceHttpMessageConverter}				只支持返回值为DOMSource，SAXSource，</span><br><span class="line">															StAXSource，StreamSource，Source</span><br><span class="line">	6={AllEncompassingFormHttpMessageConverter}	只支持返回值为MultiValueMap</span><br><span class="line">	7={MappingJackson2HttpMessageConverter}		直接返回true</span><br><span class="line">	8={MappingJackson2HttpMessageConverter}		直接返回true</span><br></pre></td></tr></table></figure></div>

<h3 id="MappingJackson2HttpMessageConverter"><a href="#MappingJackson2HttpMessageConverter" class="headerlink" title="MappingJackson2HttpMessageConverter"></a>MappingJackson2HttpMessageConverter</h3><p><code>genericConverter.write</code>方法（此处为<code>MappingJackson2HttpMessageConverter</code>），利用底层的<code>jackson</code>包，<code>ObjectMapper</code>转换的</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(<span class="keyword">final</span> T t, <span class="meta">@Nullable</span> <span class="keyword">final</span> Type type, <span class="meta">@Nullable</span> MediaType contentType,</span></span><br><span class="line"><span class="params">                        HttpOutputMessage outputMessage)</span> <span class="keyword">throws</span> IOException, HttpMessageNotWritableException {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="type">HttpHeaders</span> <span class="variable">headers</span> <span class="operator">=</span> outputMessage.getHeaders();</span><br><span class="line">    <span class="comment">// 向头中写入数据，此处为Content-Type=application/json</span></span><br><span class="line">    addDefaultHeaders(headers, t, contentType);</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 可以步入看看，jackson将对象转json，放入response中的一个outputBuffer中</span></span><br><span class="line">    writeInternal(t, type, outputMessage);</span><br><span class="line">    <span class="comment">// 将Buffer中的内容写出</span></span><br><span class="line">    outputMessage.getBody().flush();</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h2 id="自定义MessageConverter"><a href="#自定义MessageConverter" class="headerlink" title="自定义MessageConverter"></a>自定义MessageConverter</h2><p>假设我们想自定义一个<code>application/my-type</code>协议，请求将返回的<code>User</code>以name-age的格式返回</p>
<p>我们首先要写一个类，实现<code>HttpMessageConverter</code>，重写<code>canWrite</code>，<code>write</code>，<code>getSupportedMediaTypes</code>方法</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConverter</span> <span class="keyword">implements</span> <span class="title class_">HttpMessageConverter</span>&lt;User&gt; {</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canRead</span><span class="params">(Class&lt;?&gt; clazz, MediaType mediaType)</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canWrite</span><span class="params">(Class&lt;?&gt; clazz, MediaType mediaType)</span> {</span><br><span class="line">        <span class="keyword">return</span> clazz.isAssignableFrom(User.class);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;MediaType&gt; <span class="title function_">getSupportedMediaTypes</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> MediaType.parseMediaTypes(<span class="string">"application/my-type"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">read</span><span class="params">(Class&lt;? extends User&gt; clazz, </span></span><br><span class="line"><span class="params">                     HttpInputMessage inputMessage)</span> </span><br><span class="line">        	<span class="keyword">throws</span> HttpMessageNotReadableException {</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(User user, </span></span><br><span class="line"><span class="params">                      MediaType contentType, </span></span><br><span class="line"><span class="params">                      HttpOutputMessage outputMessage)</span> </span><br><span class="line">        	<span class="keyword">throws</span> HttpMessageNotWritableException, IOException {</span><br><span class="line">        <span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> user.getUserName() + <span class="string">"-"</span> + user.getUserAge();</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">body</span> <span class="operator">=</span> outputMessage.getBody();</span><br><span class="line">        body.write(data.getBytes());</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>利用<code>WebMvcConfigurer</code>中的<code>extendMessageConverters</code>方法，我们可以向容器中添加自定义的<code>converter</code></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> {</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">extendMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> {</span><br><span class="line">        <span class="type">MyConverter</span> <span class="variable">myConverter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyConverter</span>();</span><br><span class="line">        converters.add(myConverter);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>最后，在我们前端的请求中，我们只需要在请求头指定：Accept=application，即可拿到我们想要的格式</p>
<h2 id="总结和补充"><a href="#总结和补充" class="headerlink" title="总结和补充"></a>总结和补充</h2><ol>
<li>标注了<code>@ResponseBody</code>注解</li>
<li>调用<code>RequestResponseBodyMethodProcessor</code>这个返回值处理器</li>
<li>调用各种<code>MessageConverter</code>进行数据的转换</li>
<li><code>MessageConverter</code>可以支持各种媒体类型数据的操作（读，写）</li>
<li>内容协商找到合适的<code>MessageConverter</code></li>
</ol>
<p>那原本已有的<code>MessageConverter</code>是如何被添加的呢？我们来简单看一看源码：</p>
<p>在<code>WebMvcAutoConfiguration</code>中添加了所有的默认<code>MessageConverter</code></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@Import(EnableWebMvcConfiguration.class)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties({ WebMvcProperties.class, WebProperties.class })</span></span><br><span class="line"><span class="meta">@Order(0)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">WebMvcAutoConfigurationAdapter</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span>, ServletContextAware {</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> {</span><br><span class="line">        <span class="built_in">this</span>.messageConvertersProvider.ifAvailable(</span><br><span class="line">            (customConverters) -&gt; converters.addAll(customConverters.getConverters())</span><br><span class="line">        );</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>继续查看，简单列出一下执行过的函数：</p>
<p><code>customConverters.getConverters()</code>-&gt;<code>getDefaultConverters()</code>-&gt;<code>defaultMessageConverters()</code>-&gt;<code>getMessageConverters()</code>-&gt;<code>addDefaultHttpMessageConverters()</code></p>
<p>这里自动为我们添加了很多<code>converter</code></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">addDefaultHttpMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; messageConverters)</span> {</span><br><span class="line">    messageConverters.add(<span class="keyword">new</span> <span class="title class_">ByteArrayHttpMessageConverter</span>());</span><br><span class="line">    messageConverters.add(<span class="keyword">new</span> <span class="title class_">StringHttpMessageConverter</span>());</span><br><span class="line">    messageConverters.add(<span class="keyword">new</span> <span class="title class_">ResourceHttpMessageConverter</span>());</span><br><span class="line">    messageConverters.add(<span class="keyword">new</span> <span class="title class_">ResourceRegionHttpMessageConverter</span>());</span><br><span class="line">    <span class="keyword">if</span> (!shouldIgnoreXml) {</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            messageConverters.add(<span class="keyword">new</span> <span class="title class_">SourceHttpMessageConverter</span>&lt;&gt;());</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">catch</span> (Error err) {</span><br><span class="line">            <span class="comment">// Ignore when no TransformerFactory implementation is available</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    messageConverters.add(<span class="keyword">new</span> <span class="title class_">AllEncompassingFormHttpMessageConverter</span>());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (romePresent) {</span><br><span class="line">        messageConverters.add(<span class="keyword">new</span> <span class="title class_">AtomFeedHttpMessageConverter</span>());</span><br><span class="line">        messageConverters.add(<span class="keyword">new</span> <span class="title class_">RssChannelHttpMessageConverter</span>());</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!shouldIgnoreXml) {</span><br><span class="line">        <span class="keyword">if</span> (jackson2XmlPresent) {</span><br><span class="line">            <span class="type">Jackson2ObjectMapperBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> Jackson2ObjectMapperBuilder.xml();</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.applicationContext != <span class="literal">null</span>) {</span><br><span class="line">                builder.applicationContext(<span class="built_in">this</span>.applicationContext);</span><br><span class="line">            }</span><br><span class="line">            messageConverters.add(<span class="keyword">new</span> <span class="title class_">MappingJackson2XmlHttpMessageConverter</span>(builder.build()));</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (jaxb2Present) {</span><br><span class="line">            messageConverters.add(<span class="keyword">new</span> <span class="title class_">Jaxb2RootElementHttpMessageConverter</span>());</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (kotlinSerializationJsonPresent) {</span><br><span class="line">        messageConverters.add(<span class="keyword">new</span> <span class="title class_">KotlinSerializationJsonHttpMessageConverter</span>());</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (jackson2Present) {</span><br><span class="line">        <span class="type">Jackson2ObjectMapperBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> Jackson2ObjectMapperBuilder.json();</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.applicationContext != <span class="literal">null</span>) {</span><br><span class="line">            builder.applicationContext(<span class="built_in">this</span>.applicationContext);</span><br><span class="line">        }</span><br><span class="line">        messageConverters.add(<span class="keyword">new</span> <span class="title class_">MappingJackson2HttpMessageConverter</span>(builder.build()));</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (gsonPresent) {</span><br><span class="line">        messageConverters.add(<span class="keyword">new</span> <span class="title class_">GsonHttpMessageConverter</span>());</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (jsonbPresent) {</span><br><span class="line">        messageConverters.add(<span class="keyword">new</span> <span class="title class_">JsonbHttpMessageConverter</span>());</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (jackson2SmilePresent) {</span><br><span class="line">        <span class="type">Jackson2ObjectMapperBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> Jackson2ObjectMapperBuilder.smile();</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.applicationContext != <span class="literal">null</span>) {</span><br><span class="line">            builder.applicationContext(<span class="built_in">this</span>.applicationContext);</span><br><span class="line">        }</span><br><span class="line">        messageConverters.add(<span class="keyword">new</span> <span class="title class_">MappingJackson2SmileHttpMessageConverter</span>(builder.build()));</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (jackson2CborPresent) {</span><br><span class="line">        <span class="type">Jackson2ObjectMapperBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> Jackson2ObjectMapperBuilder.cbor();</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.applicationContext != <span class="literal">null</span>) {</span><br><span class="line">            builder.applicationContext(<span class="built_in">this</span>.applicationContext);</span><br><span class="line">        }</span><br><span class="line">        messageConverters.add(<span class="keyword">new</span> <span class="title class_">MappingJackson2CborHttpMessageConverter</span>(builder.build()));</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>比如其中<code>jackson2Present</code>就是如此判断。这也就是为什么我们导入jackson-xml，就能使用的原因</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">jackson2XmlPresent = ClassUtils.isPresent(<span class="string">"com.fasterxml.jackson.dataformat.xml.XmlMapper"</span>, classLoader);</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>java</category>
        <category>SpringBoot</category>
        <category>源码</category>
      </categories>
      <tags>
        <tag>SpringBoot源码系列</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot源码系列（3）：静态资源配置</title>
    <url>//post/3386/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><code>WebMvcAutoConfiguration</code>中有一些常用的与静态资源相关的配置项，本文回顾一下其中原理。本文中SpringBoot版本号为2.7.5。</p>
<p>原文地址：<a href="https://xuedongyun.cn/post/3386/">https://xuedongyun.cn/post/3386/</a></p>
<h2 id="静态资源配置原理"><a href="#静态资源配置原理" class="headerlink" title="静态资源配置原理"></a>静态资源配置原理</h2><h3 id="WebMvcAutoConfiguration"><a href="#WebMvcAutoConfiguration" class="headerlink" title="WebMvcAutoConfiguration"></a>WebMvcAutoConfiguration</h3><p>SpringBoot启动会自动加载<code>WebMvcAutoConfiguration</code>类。（具体原因可以查看我之前的博客：<a href="https://xuedongyun.cn/post/50220/">SpringBootApplication注解背后的原理</a>），我们首先看看这个自动配置类生效的条件：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 代码有删减</span></span><br><span class="line"><span class="meta">@AutoConfiguration(after = { DispatcherServletAutoConfiguration.class, </span></span><br><span class="line"><span class="meta">                            TaskExecutionAutoConfiguration.class,</span></span><br><span class="line"><span class="meta">							ValidationAutoConfiguration.class })</span></span><br><span class="line"><span class="comment">// 典型的Web Servlet应用才生效</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication(type = Type.SERVLET)</span></span><br><span class="line"><span class="comment">// 导了SpringMVC有这些类，生效</span></span><br><span class="line"><span class="meta">@ConditionalOnClass({ Servlet.class, DispatcherServlet.class, WebMvcConfigurer.class })</span></span><br><span class="line"><span class="comment">// 如果容器中有WebMvcConfigurationSupport类，会全面接管SpringMVC</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)</span></span><br><span class="line"><span class="meta">@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE + 10)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebMvcAutoConfiguration</span> {</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h3 id="WebMvcAutoConfigurationAdapter"><a href="#WebMvcAutoConfigurationAdapter" class="headerlink" title="WebMvcAutoConfigurationAdapter"></a>WebMvcAutoConfigurationAdapter</h3><p><code>WebMvcAutoConfiguration</code>类中，还有一个静态类<code>WebMvcAutoConfigurationAdapter</code>。它还绑定了两个属性类<code>WebMvcProperties</code>和<code>WebProperties</code>，我们可以在配置文件中更改相应配置项的属性，实现对某些功能的自定义</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@Import(EnableWebMvcConfiguration.class)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties({ WebMvcProperties.class, WebProperties.class })</span></span><br><span class="line"><span class="meta">@Order(0)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">WebMvcAutoConfigurationAdapter</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span>, ServletContextAware {</span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = "spring.mvc")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebMvcProperties</span> {}</span><br><span class="line"></span><br><span class="line"><span class="meta">@ConfigurationProperties("spring.web")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebProperties</span> {}</span><br></pre></td></tr></table></figure></div>

<p><code>WebMvcAutoConfigurationAdapter</code>只有一个构造函数，所有值从容器中获取</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">WebMvcAutoConfigurationAdapter</span><span class="params">(</span></span><br><span class="line"><span class="params">    // 两个属性类</span></span><br><span class="line"><span class="params">	WebProperties webProperties,</span></span><br><span class="line"><span class="params">	WebMvcProperties mvcProperties,</span></span><br><span class="line"><span class="params">    // Spring的IOC容器</span></span><br><span class="line"><span class="params">    ListableBeanFactory beanFactory,</span></span><br><span class="line"><span class="params">    // 所有的messageConverter，此处不涉及</span></span><br><span class="line"><span class="params">    ObjectProvider&lt;HttpMessageConverters&gt; messageConvertersProvider,</span></span><br><span class="line"><span class="params">    // 所有的资源自定义器，重点</span></span><br><span class="line"><span class="params">    ObjectProvider&lt;ResourceHandlerRegistrationCustomizer&gt; resourceHandlerRegistrationCustomizerProvider,</span></span><br><span class="line"><span class="params">    // DispathcerServlet能处理的所有路径，此处不涉及</span></span><br><span class="line"><span class="params">    ObjectProvider&lt;DispatcherServletPath&gt; dispatcherServletPath,</span></span><br><span class="line"><span class="params">    // 应用注册的原生Servlet，Filter...此处不涉及</span></span><br><span class="line"><span class="params">    ObjectProvider&lt;ServletRegistrationBean&lt;?&gt;&gt; servletRegistrations</span></span><br><span class="line"><span class="params">)</span> {</span><br><span class="line">	<span class="built_in">this</span>.resourceProperties = webProperties.getResources();</span><br><span class="line">	<span class="built_in">this</span>.mvcProperties = mvcProperties;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>在<code>WebMvcAutoConfigurationAdapter</code>类中，有一些与资源相关的核心方法</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> {</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    	可以禁用资源的路径映射，所有静态资源都无法访问</span></span><br><span class="line"><span class="comment">    	spring.web.resources.add-mappings = false</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">this</span>.resourceProperties.isAddMappings()) {</span><br><span class="line">        logger.debug(<span class="string">"Default resource handling disabled"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    	所有/webjars/**的静态资源，都会去classpath:/META-INF/resources/webjars/找</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    addResourceHandler(registry, <span class="string">"/webjars/**"</span>, <span class="string">"classpath:/META-INF/resources/webjars/"</span>);</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    	staticPathPattern 默认值"/**"</span></span><br><span class="line"><span class="comment">    	staticLocations 默认值 { "classpath:/META-INF/resources/", </span></span><br><span class="line"><span class="comment">    							"classpath:/resources/", </span></span><br><span class="line"><span class="comment">    							"classpath:/static/", </span></span><br><span class="line"><span class="comment">    							"classpath:/public/" }</span></span><br><span class="line"><span class="comment">        所有静态资源请求都会去对应路径找</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    addResourceHandler(registry, <span class="built_in">this</span>.mvcProperties.getStaticPathPattern(), (registration) -&gt; {</span><br><span class="line">        registration.addResourceLocations(<span class="built_in">this</span>.resourceProperties.getStaticLocations());</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.servletContext != <span class="literal">null</span>) {</span><br><span class="line">            <span class="type">ServletContextResource</span> <span class="variable">resource</span> <span class="operator">=</span> </span><br><span class="line">            	<span class="keyword">new</span> <span class="title class_">ServletContextResource</span>(<span class="built_in">this</span>.servletContext, SERVLET_LOCATION);</span><br><span class="line">            registration.addResourceLocations(resource);</span><br><span class="line">        }</span><br><span class="line">    });</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 代码有删减</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">addResourceHandler</span><span class="params">(ResourceHandlerRegistry registry, String pattern,</span></span><br><span class="line"><span class="params">        Consumer&lt;ResourceHandlerRegistration&gt; customizer)</span> {</span><br><span class="line">	...</span><br><span class="line">    <span class="comment">// 比如：可以通过spring.web.cache.period控制缓存的时间</span></span><br><span class="line">    registration.setCachePeriod(getSeconds(<span class="built_in">this</span>.resourceProperties.getCache().getPeriod()));</span><br><span class="line">    registration.setCacheControl(<span class="built_in">this</span>.resourceProperties.getCache().getCachecontrol().toHttpCacheControl());</span><br><span class="line">	registration.setUseLastModified(<span class="built_in">this</span>.resourceProperties.getCache().isUseLastModified());</span><br><span class="line">	...</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>前面提到的配置项</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="attr">add-mappings:</span> <span class="literal">false</span> <span class="comment"># 关闭静态资源的访问</span></span><br><span class="line">      <span class="attr">static-locations:</span> [<span class="string">classpath:/haha/</span>, <span class="string">classpath:/page/</span>] <span class="comment"># 静态资源存放路径</span></span><br><span class="line">      <span class="attr">cache:</span></span><br><span class="line">        <span class="attr">period:</span> <span class="number">3600</span> <span class="comment"># 静态资源缓存时间（秒）</span></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">    <span class="attr">static-path-pattern:</span> <span class="string">/resources/**</span> <span class="comment"># 改变静态资源访问路径（便于拦截器放行静态资源）</span></span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>java</category>
        <category>SpringBoot</category>
        <category>源码</category>
      </categories>
      <tags>
        <tag>SpringBoot源码系列</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot源码系列（4）：请求映射</title>
    <url>//post/15349/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在SpringBoot/SpringMVC中，请求映射是一个很重要的概念。众所周知，应用中实际上只有一个DispatcherServlet处理所有请求，再交由对应的处理器来处理。本文中SpringBoot版本号为2.7.5。</p>
<p>原文地址：<a href="https://xuedongyun.cn/post/15349/">https://xuedongyun.cn/post/15349/</a></p>
<h2 id="请求映射原理"><a href="#请求映射原理" class="headerlink" title="请求映射原理"></a>请求映射原理</h2><h3 id="FrameworkServlet"><a href="#FrameworkServlet" class="headerlink" title="FrameworkServlet"></a>FrameworkServlet</h3><p>我们知道在SpringMVC中，所有的请求都交由<code>DispatcherServlet</code>统一处理。首先我们看看<code>DispatcherServlet</code>的继承结构</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">HttpServlet</span><br><span class="line">    HttpServletBean</span><br><span class="line">        FrameworkServlet</span><br><span class="line">            DispatcherServlet</span><br></pre></td></tr></table></figure></div>

<p>在<code>FrameworkServlet</code>的源码中，我们可以看到，<code>doGet</code>，<code>doPost</code>，<code>doPut</code>，<code>doDelete</code>等底层都是调用的<code>processRequest</code>方法</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line">        <span class="keyword">throws</span> ServletException, IOException {</span><br><span class="line"></span><br><span class="line">    processRequest(request, response);</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p><code>processRequest</code>方法核心在于调用了<code>doService</code>方法</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 代码有删减</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">processRequest</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line">			<span class="keyword">throws</span> ServletException, IOException {</span><br><span class="line">    <span class="keyword">try</span> {</span><br><span class="line">        doService(request, response);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h3 id="DispatcherServlet"><a href="#DispatcherServlet" class="headerlink" title="DispatcherServlet"></a>DispatcherServlet</h3><p><code>FrameworkServlet</code>并未实现<code>doService</code>方法，但是<code>DispatcherServlet</code>继承了该类，实现了此方法。<code>doService</code>方法核心在于调用了<code>doDispatch</code>方法</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 代码有删减</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doService</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception {</span><br><span class="line">    <span class="keyword">try</span> {</span><br><span class="line">        doDispatch(request, response);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p><code>doDispatch</code>方法中，会根据请求，找到哪个handler（controller）能处理当前请求。随后使用找到的handler处理请求，获得<code>ModelAndView</code></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doDispatch</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception {</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 决定当前请求的handler</span></span><br><span class="line">    processedRequest = checkMultipart(request);</span><br><span class="line">    mappedHandler = getHandler(processedRequest);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (mappedHandler == <span class="literal">null</span>) {</span><br><span class="line">        noHandlerFound(processedRequest, response);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 这里使用了适配器模式，拿到了HandlerAdapter</span></span><br><span class="line">    <span class="type">HandlerAdapter</span> <span class="variable">ha</span> <span class="operator">=</span> getHandlerAdapter(mappedHandler.getHandler());</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 处理后返回ModelAndView</span></span><br><span class="line">    mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>可以看到，最为关键的方法为<code>getHandler</code>方法，确定请求具体的handler，我们查看其源码</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">protected</span> HandlerExecutionChain <span class="title function_">getHandler</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> Exception {</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.handlerMappings != <span class="literal">null</span>) {</span><br><span class="line">        <span class="keyword">for</span> (HandlerMapping mapping : <span class="built_in">this</span>.handlerMappings) {</span><br><span class="line">            <span class="type">HandlerExecutionChain</span> <span class="variable">handler</span> <span class="operator">=</span> mapping.getHandler(request);</span><br><span class="line">            <span class="keyword">if</span> (handler != <span class="literal">null</span>) {</span><br><span class="line">                <span class="keyword">return</span> handler;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>这里遍历了<code>handlerMappings</code>，调试可以看到，包含五个</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">this.handlerMappings = {ArrayList} size = 5</span><br><span class="line">	0 = {RequestMappingHandlerMapping}</span><br><span class="line">	1 = {WelcomePageHandlerMapping}</span><br><span class="line">	2 = {BeanNameUrlHandlerMapping}</span><br><span class="line">	3 = {RouterFunctionMapping}</span><br><span class="line">	4 = {SimpleUrlHandlerMapping}</span><br></pre></td></tr></table></figure></div>

<p><code>RequestMappingHandlerMapping</code>保存了所有<code>@RequestMapping</code>注解的请求映射规则。在<code>.mappingRegistry.registry</code>可以看到所有<code>Controller</code>路径都在其中（以及错误路径/error）</p>
<h3 id="WebMvcAutoConfiguration"><a href="#WebMvcAutoConfiguration" class="headerlink" title="WebMvcAutoConfiguration"></a>WebMvcAutoConfiguration</h3><p>在<code>WebMvcAutoConfiguration</code>中，SpringBoot为我们注册了所有的<code>HandlerMapping</code></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	代码有删减</span></span><br><span class="line"><span class="comment">	映射了所有标@RequestMapping注解的Controller的路径</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> RequestMappingHandlerAdapter <span class="title function_">createRequestMappingHandlerAdapter</span><span class="params">()</span> {</span><br><span class="line">    <span class="type">RequestMappingHandlerMapping</span> <span class="variable">mapping</span> <span class="operator">=</span> <span class="built_in">this</span>.mvcRegistrations.getRequestMappingHandlerMapping();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	代码有删减</span></span><br><span class="line"><span class="comment">	欢迎页</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> WelcomePageHandlerMapping <span class="title function_">welcomePageHandlerMapping</span><span class="params">(ApplicationContext applicationContext,</span></span><br><span class="line"><span class="params">        FormattingConversionService mvcConversionService, ResourceUrlProvider mvcResourceUrlProvider)</span> {</span><br><span class="line">    </span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>java</category>
        <category>SpringBoot</category>
        <category>源码</category>
      </categories>
      <tags>
        <tag>SpringBoot源码系列</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot源码系列（5）：参数解析</title>
    <url>//post/13517/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在SpringBoot/SpringMVC中，我们能在Controller中解析出请求的参数，本文谈一谈其背后的原理。本文中SpringBoot版本号为2.7.5。</p>
<p>原文地址：<a href="https://xuedongyun.cn/post/13517/">https://xuedongyun.cn/post/13517/</a></p>
<h2 id="参数解析原理"><a href="#参数解析原理" class="headerlink" title="参数解析原理"></a>参数解析原理</h2><h3 id="DispatcherServlet"><a href="#DispatcherServlet" class="headerlink" title="DispatcherServlet"></a>DispatcherServlet</h3><p>之前的文章已经提到，<code>DispatcherServlet</code>的核心方法是<code>doDispatch</code>。在<code>doDispatch</code>方法中，我们先通过<code>HandlerMappings</code>找到了<code>handler</code>。再为当前<code>Handler</code>找到<code>HandlerAdapter</code>。</p>
<p>这一部分可以查看我之前的博文复习：<a href="https://xuedongyun.cn/post/15349/">SpringBoot源码系列（4）：请求映射</a>。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">mappedHandler = getHandler(processedRequest);</span><br><span class="line"><span class="type">HandlerAdapter</span> <span class="variable">ha</span> <span class="operator">=</span> getHandlerAdapter(mappedHandler.getHandler());</span><br></pre></td></tr></table></figure></div>

<p><code>getHandlerAdapter</code>方法，遍历<code>this.handlerAdapters</code>，来找到合适的<code>HandlerAdapter</code></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> HandlerAdapter <span class="title function_">getHandlerAdapter</span><span class="params">(Object handler)</span> <span class="keyword">throws</span> ServletException {</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.handlerAdapters != <span class="literal">null</span>) {</span><br><span class="line">        <span class="keyword">for</span> (HandlerAdapter adapter : <span class="built_in">this</span>.handlerAdapters) {</span><br><span class="line">            <span class="keyword">if</span> (adapter.supports(handler)) {</span><br><span class="line">                <span class="keyword">return</span> adapter;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ServletException</span>(<span class="string">"..."</span>);</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>其中<code>this.handlerAdapters</code>包含了四个，完成不同的功能</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">this.handlerAdapters = {ArrayList} size=4</span><br><span class="line">	0 = (RequestMappingHandlerAdapter)	// 支持标注@RequestMapping</span><br><span class="line">	1 = (HandlerFunctionAdapter)		// 支持函数式编程</span><br><span class="line">	2 = {HttpRequestHandlerAdapter}</span><br><span class="line">	3 = {SimpleControllerHandlerAdapter}</span><br></pre></td></tr></table></figure></div>

<h3 id="RequestMappingHandlerAdapter"><a href="#RequestMappingHandlerAdapter" class="headerlink" title="RequestMappingHandlerAdapter"></a>RequestMappingHandlerAdapter</h3><p>通过步入可以看到，<code>RequestMappingHandlerAdapter</code>（其父类<code>AbstractHandlerMethodAdapter</code>）实现了<code>supports</code>方法。</p>
<p>这里主要进行了类型判断，看<code>handler</code>是否是<code>HandlerMethod</code>类型。（<code>RequestMappingHandlerAdapter</code>的<code>supportsInternal</code>总返回true）</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">supports</span><span class="params">(Object handler)</span> {</span><br><span class="line">    <span class="keyword">return</span> (handler <span class="keyword">instanceof</span> HandlerMethod &amp;&amp; supportsInternal((HandlerMethod) handler));</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h3 id="DispatcherServlet-1"><a href="#DispatcherServlet-1" class="headerlink" title="DispatcherServlet"></a>DispatcherServlet</h3><p>现在回到DispatcherServlet中，开始使用<code>handlerAdapter</code>真正执行<code>handler</code>方法</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br></pre></td></tr></table></figure></div>

<h3 id="RequestMappingHandlerAdapter-1"><a href="#RequestMappingHandlerAdapter-1" class="headerlink" title="RequestMappingHandlerAdapter"></a>RequestMappingHandlerAdapter</h3><p>通过步入可以看到，<code>RequestMappingHandlerAdapter</code>（其父类<code>AbstractHandlerMethodAdapter</code>）实现了<code>handle</code>方法。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> ModelAndView <span class="title function_">handle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span></span><br><span class="line">        <span class="keyword">throws</span> Exception {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> handleInternal(request, response, (HandlerMethod) handler);</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p><code>RequestMappingHandlerAdapter</code>实现了<code>handleInternal</code>方法。如果设置<code>synchronizeOnSession</code>为true，那么对于同一个session，需要加锁。可以看到，核心方法为<code>invokeHandlerMethod</code></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 代码有删改</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> ModelAndView <span class="title function_">handleInternal</span><span class="params">(HttpServletRequest request,</span></span><br><span class="line"><span class="params">        HttpServletResponse response, HandlerMethod handlerMethod)</span> <span class="keyword">throws</span> Exception {</span><br><span class="line"></span><br><span class="line">    ModelAndView mav;</span><br><span class="line">    checkRequest(request);</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 同一个session加锁</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.synchronizeOnSession) {</span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession(<span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">if</span> (session != <span class="literal">null</span>) {</span><br><span class="line">            <span class="comment">// 加锁</span></span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            mav = invokeHandlerMethod(request, response, handlerMethod);</span><br><span class="line">        }</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        mav = invokeHandlerMethod(request, response, handlerMethod);</span><br><span class="line">    }</span><br><span class="line">	</span><br><span class="line">    <span class="keyword">return</span> mav;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p><code>invokeHandlerMethod</code>方法。其核心在于请求值解析器和返回值处理器</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 代码有删改</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">protected</span> ModelAndView <span class="title function_">invokeHandlerMethod</span><span class="params">(HttpServletRequest request,</span></span><br><span class="line"><span class="params">        HttpServletResponse response, HandlerMethod handlerMethod)</span> <span class="keyword">throws</span> Exception {</span><br><span class="line"></span><br><span class="line">    <span class="type">ServletWebRequest</span> <span class="variable">webRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServletWebRequest</span>(request, response);</span><br><span class="line">    <span class="keyword">try</span> {</span><br><span class="line">        <span class="type">ServletInvocableHandlerMethod</span> <span class="variable">invocableMethod</span> <span class="operator">=</span> createInvocableHandlerMethod(handlerMethod);</span><br><span class="line">        <span class="comment">// argumentResolvers：请求值解析器，用于确定目标方法每一个参数值是什么</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.argumentResolvers != <span class="literal">null</span>) {</span><br><span class="line">            invocableMethod.setHandlerMethodArgumentResolvers(<span class="built_in">this</span>.argumentResolvers);</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// returnValueHandlers：返回值处理器</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.returnValueHandlers != <span class="literal">null</span>) {</span><br><span class="line">            invocableMethod.setHandlerMethodReturnValueHandlers(<span class="built_in">this</span>.returnValueHandlers);</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">        <span class="type">ModelAndViewContainer</span> <span class="variable">mavContainer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndViewContainer</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 执行并处理</span></span><br><span class="line">        invocableMethod.invokeAndHandle(webRequest, mavContainer);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> getModelAndView(mavContainer, modelFactory, webRequest);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 请求值解析器</span><br><span class="line">argumentResolvers = {ArrayList} size = 27</span><br><span class="line">	0 = {RequestParamMethodArgumentResolver}</span><br><span class="line">	1 = {RequestParamMapMethodArgumentResolver}</span><br><span class="line">	2 = {PathVariableMethodArgumentResolver}</span><br><span class="line">	3 = {PathVariableMapMethodArgumentResolver}</span><br><span class="line">	4 = {MatrixVariableMethodArgumentResolver}</span><br><span class="line">	5 = {MatrixVariableMapMethodArgumentResolver}</span><br><span class="line">	6 = {ServletModelAttributeMethodProcessor</span><br><span class="line">	7 = {RequestResponseBodyMethodProcessor}</span><br><span class="line">	...</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 返回值处理器</span><br><span class="line">returnValueHandlers = {ArrayList} size = 15</span><br><span class="line">	0 = {ModelAndViewMethodReturnValueHandler}</span><br><span class="line">	1 = {ModelMethodProcessor)</span><br><span class="line">	2 = {ViewMethodReturnValueHandler}</span><br><span class="line">	3 = {ResponseBodyEmitterReturnValueHandler}</span><br><span class="line">	4 = {StreamingResponseBodyReturnValueHandler}</span><br><span class="line">	...</span><br></pre></td></tr></table></figure></div>

<h3 id="HandlerMethodArgumentResolver"><a href="#HandlerMethodArgumentResolver" class="headerlink" title="HandlerMethodArgumentResolver"></a>HandlerMethodArgumentResolver</h3><p>我们可以简单看一下请求值解析器的接口设计。其中<code>supportsParameter</code>方法用于判断解析器是否支持解析当前参数。若支持，则将调用<code>resolveArgument</code>方法进行解析</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">HandlerMethodArgumentResolver</span> {</span><br><span class="line">	</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">supportsParameter</span><span class="params">(MethodParameter parameter)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    Object <span class="title function_">resolveArgument</span><span class="params">(MethodParameter parameter, <span class="meta">@Nullable</span> ModelAndViewContainer mavContainer,</span></span><br><span class="line"><span class="params">            NativeWebRequest webRequest, <span class="meta">@Nullable</span> WebDataBinderFactory binderFactory)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h3 id="ServletInvocableHandlerMethod"><a href="#ServletInvocableHandlerMethod" class="headerlink" title="ServletInvocableHandlerMethod"></a>ServletInvocableHandlerMethod</h3><p>在<code>RequestMappingHandlerAdapter</code>中，调用了<code>invocableMethod.invokeAndHandle</code>。我们现在查看<code>ServletInvocableHandlerMethod</code>的<code>invokeAndHandle</code>方法</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 代码有删改</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invokeAndHandle</span><span class="params">(ServletWebRequest webRequest, ModelAndViewContainer mavContainer,</span></span><br><span class="line"><span class="params">        Object... providedArgs)</span> <span class="keyword">throws</span> Exception {</span><br><span class="line"></span><br><span class="line">    <span class="type">Object</span> <span class="variable">returnValue</span> <span class="operator">=</span> invokeForRequest(webRequest, mavContainer, providedArgs);</span><br><span class="line">    setResponseStatus(webRequest);</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>继续查看<code>invokeForRequest</code>方法。可以看到，使用了<code>getMethodArgumentValues</code>方法获取了所有请求参数的值。最终调用<code>doInvoke</code>方法，利用反射执行了我们<code>Controller</code>中的方法。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">invokeForRequest</span><span class="params">(NativeWebRequest request, <span class="meta">@Nullable</span> ModelAndViewContainer mavContainer,</span></span><br><span class="line"><span class="params">        Object... providedArgs)</span> <span class="keyword">throws</span> Exception {</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 获取所有参数的值</span></span><br><span class="line">    Object[] args = getMethodArgumentValues(request, mavContainer, providedArgs);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> doInvoke(args);</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>我们查看<code>getMethodArgumentValues</code>方法，该方法获取请求参数的值</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 代码有删改</span></span><br><span class="line"><span class="keyword">protected</span> Object[] getMethodArgumentValues(NativeWebRequest request, <span class="meta">@Nullable</span> ModelAndViewContainer mavContainer,</span><br><span class="line">        Object... providedArgs) <span class="keyword">throws</span> Exception {</span><br><span class="line">    </span><br><span class="line">	<span class="comment">// 获取方法所有参数的详细信息：标了什么注解，索引位置，类型...</span></span><br><span class="line">    MethodParameter[] parameters = getMethodParameters();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 目标方法无参数，无需继续</span></span><br><span class="line">    <span class="keyword">if</span> (ObjectUtils.isEmpty(parameters)) {</span><br><span class="line">        <span class="keyword">return</span> EMPTY_ARGS;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    Object[] args = <span class="keyword">new</span> <span class="title class_">Object</span>[parameters.length];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; parameters.length; i++) {</span><br><span class="line">        <span class="type">MethodParameter</span> <span class="variable">parameter</span> <span class="operator">=</span> parameters[i];</span><br><span class="line">        parameter.initParameterNameDiscovery(<span class="built_in">this</span>.parameterNameDiscoverer);</span><br><span class="line">        args[i] = findProvidedArgument(parameter, providedArgs);</span><br><span class="line">        <span class="keyword">if</span> (args[i] != <span class="literal">null</span>) {</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 当前参数解析器是否支持当前参数</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">this</span>.resolvers.supportsParameter(parameter)) {</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(formatArgumentError(parameter, <span class="string">"No suitable resolver"</span>));</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="comment">// 解析当前参数的值</span></span><br><span class="line">            args[i] = <span class="built_in">this</span>.resolvers.resolveArgument(parameter, mavContainer, request, <span class="built_in">this</span>.dataBinderFactory);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 返回目标函数参数的值</span></span><br><span class="line">    <span class="keyword">return</span> args;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h3 id="HandlerMethodArgumentResolverComposite"><a href="#HandlerMethodArgumentResolverComposite" class="headerlink" title="HandlerMethodArgumentResolverComposite"></a>HandlerMethodArgumentResolverComposite</h3><p>我们之前调用了<code>this.resolvers.supportsParameter(parameter)</code>用于判断参数解析器是否支持当前参数。现在来看一下其中的源码</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">supportsParameter</span><span class="params">(MethodParameter parameter)</span> {</span><br><span class="line">    <span class="comment">// 拿到参数解析器</span></span><br><span class="line">    <span class="keyword">return</span> getArgumentResolver(parameter) != <span class="literal">null</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> HandlerMethodArgumentResolver <span class="title function_">getArgumentResolver</span><span class="params">(MethodParameter parameter)</span> {</span><br><span class="line">    <span class="comment">// 先从缓存中找</span></span><br><span class="line">    <span class="type">HandlerMethodArgumentResolver</span> <span class="variable">result</span> <span class="operator">=</span> <span class="built_in">this</span>.argumentResolverCache.get(parameter);</span><br><span class="line">    <span class="keyword">if</span> (result == <span class="literal">null</span>) {</span><br><span class="line">        <span class="comment">// 遍历参数解析器，看谁能处理</span></span><br><span class="line">        <span class="keyword">for</span> (HandlerMethodArgumentResolver resolver : <span class="built_in">this</span>.argumentResolvers) {</span><br><span class="line">            <span class="keyword">if</span> (resolver.supportsParameter(parameter)) {</span><br><span class="line">                result = resolver;</span><br><span class="line">                <span class="comment">// 找到支持的参数解析器，放到缓存中，以后不用再找了</span></span><br><span class="line">                <span class="built_in">this</span>.argumentResolverCache.put(parameter, result);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>我们可以看一些例子，明白<code>resolver.supportsParameter</code>背后是如何判断的</p>
<p>比如（第一个）<code>RequestParamMethodArgumentResolver</code>解析器：参数要标<code>@RequestParam</code>注解</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (parameter.hasParameterAnnotation(RequestParam.class)) {}</span><br></pre></td></tr></table></figure></div>

<p>比如（第二个）<code>RequestParamMapMethodArgumentResolver</code>解析器：参数要标<code>@RequestParam</code>注解，参数要为<code>Map</code>类型，<code>@RequestParam</code>注解中要没有<code>name</code>值</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">RequestParam</span> <span class="variable">requestParam</span> <span class="operator">=</span> parameter.getParameterAnnotation(RequestParam.class);</span><br><span class="line"><span class="keyword">return</span> (requestParam != <span class="literal">null</span> &amp;&amp; </span><br><span class="line">        Map.class.isAssignableFrom(parameter.getParameterType()) &amp;&amp;</span><br><span class="line">        !StringUtils.hasText(requestParam.name()));</span><br></pre></td></tr></table></figure></div>

<p>而后，<code>this.resolvers.resolveArgument(parameter, mavContainer, request, this.dataBinderFactory)</code>用于解析参数，我们看一看其中源码</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">resolveArgument</span><span class="params">(MethodParameter parameter, <span class="meta">@Nullable</span> ModelAndViewContainer mavContainer,</span></span><br><span class="line"><span class="params">        NativeWebRequest webRequest, <span class="meta">@Nullable</span> WebDataBinderFactory binderFactory)</span> <span class="keyword">throws</span> Exception {</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 拿到当前参数的参数解析器（上面已经缓存好了）</span></span><br><span class="line">    <span class="type">HandlerMethodArgumentResolver</span> <span class="variable">resolver</span> <span class="operator">=</span> getArgumentResolver(parameter);</span><br><span class="line">    <span class="keyword">if</span> (resolver == <span class="literal">null</span>) {</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">"..."</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 核心代码</span></span><br><span class="line">    <span class="keyword">return</span> resolver.resolveArgument(parameter, mavContainer, webRequest, binderFactory);</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h3 id="HandlerMethodArgumentResolver-1"><a href="#HandlerMethodArgumentResolver-1" class="headerlink" title="HandlerMethodArgumentResolver"></a>HandlerMethodArgumentResolver</h3><p>可以看到，参数解析靠的还是参数解析器的<code>resolveArgument</code>方法（所有参数解析器都实现了<code>HandlerMethodArgumentResolver</code>接口，我们上面也谈过）。</p>
<h3 id="（举例一）路径变量"><a href="#（举例一）路径变量" class="headerlink" title="（举例一）路径变量"></a>（举例一）路径变量</h3><p>我们这里以<code>PathVariable</code>参数为例来看一看背后的原理。其中类继承关系：<code>HandlerMethodArgumentResolver</code> &lt;- <code>AbstractNamedValueMethodArgumentResolver</code> &lt;- <code>PathVariableMethodArgumentResolver</code></p>
<p>首先，<code>PathVariableMethodArgumentResolver</code>实现了<code>supportsParameter</code>方法。参数要标<code>@PathVariable</code>注解，若参数为<code>Map</code>类型，<code>@PathVariable</code>注解中要没有<code>value</code>值</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">supportsParameter</span><span class="params">(MethodParameter parameter)</span> {</span><br><span class="line">    <span class="keyword">if</span> (!parameter.hasParameterAnnotation(PathVariable.class)) {</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (Map.class.isAssignableFrom(parameter.nestedIfOptional().getNestedParameterType())) {</span><br><span class="line">        <span class="type">PathVariable</span> <span class="variable">pathVariable</span> <span class="operator">=</span> parameter.getParameterAnnotation(PathVariable.class);</span><br><span class="line">        <span class="keyword">return</span> (pathVariable != <span class="literal">null</span> &amp;&amp; StringUtils.hasText(pathVariable.value()));</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>其次，<code>AbstractNamedValueMethodArgumentResolver</code>实现<code>resolveArgument</code>方法</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> Object <span class="title function_">resolveArgument</span><span class="params">(MethodParameter parameter, <span class="meta">@Nullable</span> ModelAndViewContainer mavContainer,</span></span><br><span class="line"><span class="params">        NativeWebRequest webRequest, <span class="meta">@Nullable</span> WebDataBinderFactory binderFactory)</span> <span class="keyword">throws</span> Exception {</span><br><span class="line"> 	</span><br><span class="line">    <span class="comment">// 参数的一些信息：名字，是否必须，默认值</span></span><br><span class="line">    <span class="type">NamedValueInfo</span> <span class="variable">namedValueInfo</span> <span class="operator">=</span> getNamedValueInfo(parameter);</span><br><span class="line">    <span class="type">MethodParameter</span> <span class="variable">nestedParameter</span> <span class="operator">=</span> parameter.nestedIfOptional();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 为了处理注解中使用了SpEL表达式的情况，不用管</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">resolvedName</span> <span class="operator">=</span> resolveEmbeddedValuesAndExpressions(namedValueInfo.name);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解析参数的值，核心</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">arg</span> <span class="operator">=</span> resolveName(resolvedName.toString(), nestedParameter, webRequest);</span><br><span class="line"></span><br><span class="line">    handleResolvedValue(arg, namedValueInfo.name, parameter, mavContainer, webRequest);</span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p><code>PathVariableMethodArgumentResolver</code>实现了<code>resolveName</code>方法</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@SuppressWarnings("unchecked")</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">protected</span> Object <span class="title function_">resolveName</span><span class="params">(String name, MethodParameter parameter, NativeWebRequest request)</span> <span class="keyword">throws</span> Exception {</span><br><span class="line">    Map&lt;String, String&gt; uriTemplateVars = (Map&lt;String, String&gt;) request.getAttribute(</span><br><span class="line">            HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE, RequestAttributes.SCOPE_REQUEST);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// uriTemplateVars存储路径变量的值，直接获取</span></span><br><span class="line">    <span class="keyword">return</span> (uriTemplateVars != <span class="literal">null</span> ? uriTemplateVars.get(name) : <span class="literal">null</span>);</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h3 id="（举例二）Servlet-API"><a href="#（举例二）Servlet-API" class="headerlink" title="（举例二）Servlet API"></a>（举例二）Servlet API</h3><p>我们这里以<code>Servlet API</code>参数为例来看一看背后的原理。其中类继承关系：<code>HandlerMethodArgumentResolver</code> &lt;- <code>ServletRequestMethodArgumentResolver</code></p>
<p>首先，<code>ServletRequestMethodArgumentResolver</code>实现了<code>supportsParameter</code>方法。参数需要为特定的类型</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">supportsParameter</span><span class="params">(MethodParameter parameter)</span> {</span><br><span class="line">    Class&lt;?&gt; paramType = parameter.getParameterType();</span><br><span class="line">    <span class="keyword">return</span> (WebRequest.class.isAssignableFrom(paramType) ||</span><br><span class="line">            ServletRequest.class.isAssignableFrom(paramType) ||</span><br><span class="line">            MultipartRequest.class.isAssignableFrom(paramType) ||</span><br><span class="line">            HttpSession.class.isAssignableFrom(paramType) ||</span><br><span class="line">            (pushBuilder != <span class="literal">null</span> &amp;&amp; pushBuilder.isAssignableFrom(paramType)) ||</span><br><span class="line">            (Principal.class.isAssignableFrom(paramType) &amp;&amp; !parameter.hasParameterAnnotations()) ||</span><br><span class="line">            InputStream.class.isAssignableFrom(paramType) ||</span><br><span class="line">            Reader.class.isAssignableFrom(paramType) ||</span><br><span class="line">            HttpMethod.class == paramType ||</span><br><span class="line">            Locale.class == paramType ||</span><br><span class="line">            TimeZone.class == paramType ||</span><br><span class="line">            ZoneId.class == paramType);</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>其次，<code>ServletRequestMethodArgumentResolver</code>实现了<code>resolveArgument</code>方法。根据具体类型执行不同的操作。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> Object <span class="title function_">resolveArgument</span><span class="params">(MethodParameter parameter, <span class="meta">@Nullable</span> ModelAndViewContainer mavContainer,</span></span><br><span class="line"><span class="params">			NativeWebRequest webRequest, <span class="meta">@Nullable</span> WebDataBinderFactory binderFactory)</span> <span class="keyword">throws</span> Exception {</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt; paramType = parameter.getParameterType();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// WebRequest / NativeWebRequest / ServletWebRequest</span></span><br><span class="line">    <span class="keyword">if</span> (WebRequest.class.isAssignableFrom(paramType)) {</span><br><span class="line">        <span class="keyword">if</span> (!paramType.isInstance(webRequest)) {</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">"..."</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> webRequest;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ServletRequest / HttpServletRequest / MultipartRequest / MultipartHttpServletRequest</span></span><br><span class="line">    <span class="keyword">if</span> (ServletRequest.class.isAssignableFrom(paramType) || MultipartRequest.class.isAssignableFrom(paramType)) {</span><br><span class="line">        <span class="keyword">return</span> resolveNativeRequest(webRequest, paramType);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// HttpServletRequest required for all further argument types</span></span><br><span class="line">    <span class="keyword">return</span> resolveArgument(paramType, resolveNativeRequest(webRequest, HttpServletRequest.class));</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>我们以<code>HttpServletRequest</code>为例，执行了<code>resolveNativeRequest</code>方法，拿到原生<code>ServletRequest</code>并返回</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> &lt;T&gt; T <span class="title function_">resolveNativeRequest</span><span class="params">(NativeWebRequest webRequest, Class&lt;T&gt; requiredType)</span> {</span><br><span class="line">    <span class="comment">// 拿到原生ServletRequest，最后返回</span></span><br><span class="line">    <span class="type">T</span> <span class="variable">nativeRequest</span> <span class="operator">=</span> webRequest.getNativeRequest(requiredType);</span><br><span class="line">    <span class="keyword">if</span> (nativeRequest == <span class="literal">null</span>) {</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">"..."</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> nativeRequest;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h3 id="（举例三）Model-Map原理"><a href="#（举例三）Model-Map原理" class="headerlink" title="（举例三）Model, Map原理"></a>（举例三）Model, Map原理</h3><p><code>ModelMethodProcessor</code>，<code>MapMethodProcessor</code>参数解析器实现了<code>supportsParameter</code>方法</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 参数为Model</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">supportsParameter</span><span class="params">(MethodParameter parameter)</span> {</span><br><span class="line">    <span class="comment">// 判断参数类型为Model</span></span><br><span class="line">    <span class="keyword">return</span> Model.class.isAssignableFrom(parameter.getParameterType());</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 参数为Map</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">supportsParameter</span><span class="params">(MethodParameter parameter)</span> {</span><br><span class="line">    <span class="comment">// 判断参数类型为Map，且参数没有标注解</span></span><br><span class="line">    <span class="keyword">return</span> (Map.class.isAssignableFrom(parameter.getParameterType()) &amp;&amp;</span><br><span class="line">            parameter.getParameterAnnotations().length == <span class="number">0</span>);</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>其次，它们都实现了<code>resolveArgument</code>方法</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 参数为Model</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">resolveArgument</span><span class="params">(MethodParameter parameter, <span class="meta">@Nullable</span> ModelAndViewContainer mavContainer,</span></span><br><span class="line"><span class="params">                              NativeWebRequest webRequest, <span class="meta">@Nullable</span> WebDataBinderFactory binderFactory)</span> <span class="keyword">throws</span> Exception {</span><br><span class="line">    <span class="comment">// 从modelAndViewContainer中获得Model</span></span><br><span class="line">    <span class="keyword">return</span> mavContainer.getModel();</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 参数为Map</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">resolveArgument</span><span class="params">(MethodParameter parameter, <span class="meta">@Nullable</span> ModelAndViewContainer mavContainer,</span></span><br><span class="line"><span class="params">                              NativeWebRequest webRequest, <span class="meta">@Nullable</span> WebDataBinderFactory binderFactory)</span> <span class="keyword">throws</span> Exception {</span><br><span class="line">    <span class="comment">// 从modelAndViewContainer中获得Model</span></span><br><span class="line">    <span class="keyword">return</span> mavContainer.getModel();</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>可以看到，无论是<code>Model</code>还是<code>Map</code>，返回的都是<code>mavContainer</code>里的<code>Model</code>（<code>BindingAwareModelMap</code>，根本上继承自<code>Map</code>和<code>Model</code>），他们获取的都是同一个对象</p>
]]></content>
      <categories>
        <category>java</category>
        <category>SpringBoot</category>
        <category>源码</category>
      </categories>
      <tags>
        <tag>SpringBoot源码系列</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot源码系列（8）：拦截器执行顺序</title>
    <url>//post/5855/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在SpringBoot/SpringMVC中，拦截器有三个方法</p>
<ul>
<li><code>applyPreHandle</code>（前置操作，目标方法执行前）</li>
<li><code>applyPostHandle</code>（后置操作，目标方法执行后）</li>
<li><code>triggerAfterCompletion</code>（最终操作，渲染结束后）</li>
</ul>
<p>正常情况下，会顺序执行所有<strong>前置操作</strong>，逆序执行所有<strong>后置操作</strong>，逆序执行所有<strong>最终操作</strong>。</p>
<p>如果中间被拦截，会顺序执行所有<strong>前置操作</strong>，直至被拦截，逆序执行所有<strong>放行的后置操作</strong>。</p>
<p>我们根据源码来看一看其中的原理</p>
<p>原文地址：<a href="https://xuedongyun.cn/post/5855/">https://xuedongyun.cn/post/5855/</a></p>
<h2 id="拦截器原理"><a href="#拦截器原理" class="headerlink" title="拦截器原理"></a>拦截器原理</h2><h3 id="DispatcherServlet"><a href="#DispatcherServlet" class="headerlink" title="DispatcherServlet"></a>DispatcherServlet</h3><p>我知道，请求的核心函数是<code>DispatcherServlet</code>中的<code>doDispatch</code>方法</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doDispatch</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception {</span><br><span class="line">    <span class="keyword">try</span> {</span><br><span class="line">    	mappedHandler = getHandler(processedRequest);</span><br><span class="line"></span><br><span class="line">    	<span class="type">HandlerAdapter</span> <span class="variable">ha</span> <span class="operator">=</span> getHandlerAdapter(mappedHandler.getHandler());</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 前置处理</span></span><br><span class="line">        <span class="keyword">if</span> (!mappedHandler.applyPreHandle(processedRequest, response)) {</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 执行目标方法</span></span><br><span class="line">        mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 后置处理</span></span><br><span class="line">        mappedHandler.applyPostHandle(processedRequest, response, mv);  </span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 渲染页面</span></span><br><span class="line">        processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);</span><br><span class="line">        </span><br><span class="line">    } <span class="keyword">catch</span> (Exception ex) {</span><br><span class="line">        <span class="comment">// 有任何错误，都会触发后置处理</span></span><br><span class="line">        triggerAfterCompletion(processedRequest, response, mappedHandler, ex);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>目标方法出错，也会执行后置操作</p>
</blockquote>
<h3 id="HandlerExecutionChain"><a href="#HandlerExecutionChain" class="headerlink" title="HandlerExecutionChain"></a>HandlerExecutionChain</h3><p><code>mappedHandler</code>中包含：<code>handler</code>和<code>拦截器链</code></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">mappedHandler = {HandlerExecutionChain}</span><br><span class="line">	handler = {HandlerMethod}</span><br><span class="line">	interceptorList = {ArrayList} size = 3</span><br><span class="line">		0={Onelnterceptor}</span><br><span class="line">		1={Twolnterceptor}</span><br><span class="line">		2={Threelnterceptor}</span><br><span class="line">		3={ConversionServiceExposinglnterceptor}</span><br><span class="line">		4={ResourceUrlProviderExposinglnterceptor}</span><br></pre></td></tr></table></figure></div>

<ol>
<li><code>applyPreHandle</code>（前置处理）：可以看到，<strong>顺序执行了所有拦截器的前置操作</strong>。每次都记录了<code>this.interceptorIndex</code>。如果中间有返回<code>false</code>的，则立刻执行<code>triggerAfterCompletion</code>方法。</li>
</ol>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="title function_">applyPreHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception {</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="built_in">this</span>.interceptorList.size(); i++) {</span><br><span class="line">        <span class="type">HandlerInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="built_in">this</span>.interceptorList.get(i);</span><br><span class="line">        <span class="keyword">if</span> (!interceptor.preHandle(request, response, <span class="built_in">this</span>.handler)) {</span><br><span class="line">            triggerAfterCompletion(request, response, <span class="literal">null</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">this</span>.interceptorIndex = i;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>而<code>triggerAfterCompletion</code>则是从<code>this.interceptorIndex</code>开始<strong>逆序执行了所有的后置操作</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">triggerAfterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, <span class="meta">@Nullable</span> Exception ex)</span> {</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="built_in">this</span>.interceptorIndex; i &gt;= <span class="number">0</span>; i--) {</span><br><span class="line">        <span class="type">HandlerInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="built_in">this</span>.interceptorList.get(i);</span><br><span class="line">        interceptor.afterCompletion(request, response, <span class="built_in">this</span>.handler, ex);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<ol start="2">
<li><code>applyPostHandle</code>（后置处理）：可以看到，<strong>逆序执行了所有后置操作</strong></li>
</ol>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">applyPostHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, <span class="meta">@Nullable</span> ModelAndView mv)</span></span><br><span class="line">    <span class="keyword">throws</span> Exception {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="built_in">this</span>.interceptorList.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) {</span><br><span class="line">        <span class="type">HandlerInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="built_in">this</span>.interceptorList.get(i);</span><br><span class="line">        interceptor.postHandle(request, response, <span class="built_in">this</span>.handler, mv);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<ol start="3">
<li><code>processDispatchResult</code>（渲染页面）：可以看到，渲染完成后，<strong>逆序执行了所有的最终操作</strong></li>
</ol>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">processDispatchResult</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span><br><span class="line"><span class="params">                                   <span class="meta">@Nullable</span> HandlerExecutionChain mappedHandler, </span></span><br><span class="line"><span class="params">                                   <span class="meta">@Nullable</span> ModelAndView mv,</span></span><br><span class="line"><span class="params">                                   <span class="meta">@Nullable</span> Exception exception)</span> <span class="keyword">throws</span> Exception {</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (mv != <span class="literal">null</span> &amp;&amp; !mv.wasCleared()) {</span><br><span class="line">        render(mv, request, response);</span><br><span class="line">        <span class="keyword">if</span> (errorView) {</span><br><span class="line">            WebUtils.clearErrorRequestAttributes(request);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (mappedHandler != <span class="literal">null</span>) {</span><br><span class="line">        <span class="comment">// 页面渲染完，逆序触发拦截器</span></span><br><span class="line">        mappedHandler.triggerAfterCompletion(request, response, <span class="literal">null</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">triggerAfterCompletion</span><span class="params">(HttpServletRequest request, </span></span><br><span class="line"><span class="params">                            HttpServletResponse response, </span></span><br><span class="line"><span class="params">                            <span class="meta">@Nullable</span> Exception ex)</span> {</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="built_in">this</span>.interceptorIndex; i &gt;= <span class="number">0</span>; i--) {</span><br><span class="line">        <span class="type">HandlerInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="built_in">this</span>.interceptorList.get(i);</span><br><span class="line">        interceptor.afterCompletion(request, response, <span class="built_in">this</span>.handler, ex);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>java</category>
        <category>SpringBoot</category>
        <category>源码</category>
      </categories>
      <tags>
        <tag>SpringBoot源码系列</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot源码系列（6）：参数解析之自定义参数绑定</title>
    <url>//post/44248/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在SpringBoot/SpringMVC中，我们能在Controller中解析出请求的参数。除了一些基本类型之外，我们还可以使用一些复杂类型，诸如：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping("/hello")</span></span><br><span class="line">String <span class="title function_">hello</span><span class="params">(User user)</span>{</span><br><span class="line">    </span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>本文根据SpringBoot源码谈谈其背后的原理，文中SpringBoot版本号为2.7.5。</p>
<p>原文地址：<a href="https://xuedongyun.cn/post/44248/">https://xuedongyun.cn/post/44248/</a></p>
<h2 id="自定义参数绑定原理"><a href="#自定义参数绑定原理" class="headerlink" title="自定义参数绑定原理"></a>自定义参数绑定原理</h2><p>有关参数解析，及参数解析器的部分，可以查看我之前的博客：<a href="https://xuedongyun.cn/post/13517/">SpringBoot源码系列（5）：参数解析</a>。自定义类型参数使用的是<code>ServletModelAttributeMethodProcessor</code>这个参数解析器。</p>
<p>其中类继承关系：<code>HandlerMethodArgumentResolver</code> &lt;- <code>ModelAttributeMethodProcessor</code> &lt;- <code>ServletModelAttributeMethodProcessor</code></p>
<h3 id="ServletModelAttributeMethodProcessor"><a href="#ServletModelAttributeMethodProcessor" class="headerlink" title="ServletModelAttributeMethodProcessor"></a>ServletModelAttributeMethodProcessor</h3><p>其父类<code>ModelAttributeMethodProcessor</code>实现了<code>supportsParameter</code>方法</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">supportsParameter</span><span class="params">(MethodParameter parameter)</span> {</span><br><span class="line">    <span class="comment">/* </span></span><br><span class="line"><span class="comment">    	参数标ModelAttribute注解 or 参数不是简单属性</span></span><br><span class="line"><span class="comment">		我们的参数User user肯定不是简单类型</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">return</span> (parameter.hasParameterAnnotation(ModelAttribute.class) ||</span><br><span class="line">            (<span class="built_in">this</span>.annotationNotRequired &amp;&amp; !BeanUtils.isSimpleProperty(parameter.getParameterType())));</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>其父类<code>ModelAttributeMethodProcessor</code>还实现了<code>resolveArgument</code>方法。其中的核心点在于，将请求中的参数绑定到创建的空对象上。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 代码有删改</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> Object <span class="title function_">resolveArgument</span><span class="params">(MethodParameter parameter, <span class="meta">@Nullable</span> ModelAndViewContainer mavContainer,</span></span><br><span class="line"><span class="params">        NativeWebRequest webRequest, <span class="meta">@Nullable</span> WebDataBinderFactory binderFactory)</span> <span class="keyword">throws</span> Exception {</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> ModelFactory.getNameForParameter(parameter);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取ModelAttribute注解，绑定一大堆东西。我们这里没有，暂时不用管 </span></span><br><span class="line">    <span class="type">ModelAttribute</span> <span class="variable">ann</span> <span class="operator">=</span> parameter.getParameterAnnotation(ModelAttribute.class);</span><br><span class="line">    <span class="keyword">if</span> (ann != <span class="literal">null</span>) {</span><br><span class="line">        mavContainer.setBinding(name, ann.binding());</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="type">Object</span> <span class="variable">attribute</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">BindingResult</span> <span class="variable">bindingResult</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 查看mav中有没有对应的参数。如果以前modelAndView中已经有了，就直接返回。也不用管。</span></span><br><span class="line">    <span class="keyword">if</span> (mavContainer.containsAttribute(name)) {</span><br><span class="line">        attribute = mavContainer.getModel().get(name);</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="comment">// 创建一个空实例</span></span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            attribute = createAttribute(name, parameter, binderFactory, webRequest);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 我们还没有绑定参数到对象</span></span><br><span class="line">    <span class="keyword">if</span> (bindingResult == <span class="literal">null</span>) {</span><br><span class="line">        <span class="comment">// 将请求封装到WebDataBinder对象中，WebDataBinder对象负责将值绑定到bean中</span></span><br><span class="line">        <span class="type">WebDataBinder</span> <span class="variable">binder</span> <span class="operator">=</span> binderFactory.createBinder(webRequest, attribute, name);</span><br><span class="line">        <span class="keyword">if</span> (binder.getTarget() != <span class="literal">null</span>) {</span><br><span class="line">            <span class="keyword">if</span> (!mavContainer.isBindingDisabled(name)) {</span><br><span class="line">                <span class="comment">// 最关键的一步，将请求中的参数绑定到target对象</span></span><br><span class="line">                bindRequestParameters(binder, webRequest);</span><br><span class="line">            }</span><br><span class="line">            validateIfApplicable(binder, parameter);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> attribute;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p><code>ServletModelAttributeMethodProcessor</code>重写了<code>bindRequestParameters</code>方法</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">bindRequestParameters</span><span class="params">(WebDataBinder binder, NativeWebRequest request)</span> {</span><br><span class="line">    <span class="type">ServletRequest</span> <span class="variable">servletRequest</span> <span class="operator">=</span> request.getNativeRequest(ServletRequest.class);</span><br><span class="line">    <span class="type">ServletRequestDataBinder</span> <span class="variable">servletBinder</span> <span class="operator">=</span> (ServletRequestDataBinder) binder;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 先对请求做了下类型转换，然后使用WebDataBinder，将request传入</span></span><br><span class="line">    servletBinder.bind(servletRequest);</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h3 id="ServletRequestDataBinder"><a href="#ServletRequestDataBinder" class="headerlink" title="ServletRequestDataBinder"></a>ServletRequestDataBinder</h3><p>类继承关系：<code>DataBinder</code>&lt;-<code>WebDataBinder</code>&lt;-<code>ServletRequestDataBinder</code></p>
<p>我们首先来看一下<code>WebDataBinder</code>的基本结构。<code>WebDataBinder</code>利用其中的各种<code>Converter</code>，将请求数据转化成指定的数据类型。利用反射封装到<code>JavaBean</code>中。未来，我们还可以放自定义的<code>Converter</code>，将String转为想要的类型</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">target: 我们的空Person对象</span><br><span class="line">conversionService:</span><br><span class="line">	converters: 124种转换器，负责将字符串转化为具体java对象</span><br></pre></td></tr></table></figure></div>

<p><code>ServletRequestDataBinder</code>实现了<code>bind</code>方法。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">bind</span><span class="params">(ServletRequest request)</span> {</span><br><span class="line">    <span class="type">MutablePropertyValues</span> <span class="variable">mpvs</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServletRequestParameterPropertyValues</span>(request);</span><br><span class="line">    <span class="type">MultipartRequest</span> <span class="variable">multipartRequest</span> <span class="operator">=</span> WebUtils.getNativeRequest(request, MultipartRequest.class);</span><br><span class="line">    <span class="keyword">if</span> (multipartRequest != <span class="literal">null</span>) {</span><br><span class="line">        bindMultipart(multipartRequest.getMultiFileMap(), mpvs);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (StringUtils.startsWithIgnoreCase(request.getContentType(), MediaType.MULTIPART_FORM_DATA_VALUE)) {</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">httpServletRequest</span> <span class="operator">=</span> WebUtils.getNativeRequest(request, HttpServletRequest.class);</span><br><span class="line">        <span class="keyword">if</span> (httpServletRequest != <span class="literal">null</span> &amp;&amp; HttpMethod.POST.matches(httpServletRequest.getMethod())) {</span><br><span class="line">            StandardServletPartUtils.bindParts(httpServletRequest, mpvs, isBindEmptyMultipartFiles());</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    addBindValues(mpvs, request);</span><br><span class="line">    <span class="comment">// 上述操作绑定了所需的参数，mvps保存了请求中所有的key-value对</span></span><br><span class="line">    doBind(mpvs); <span class="comment">// 执行绑定的核心代码</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">// mpvs包含请求中的所有key-value对</span><br><span class="line">mpvs: </span><br><span class="line">	propertyValueList:</span><br><span class="line">		0:</span><br><span class="line">			name: "age"</span><br><span class="line">			value: "23"</span><br><span class="line">			converted: false</span><br><span class="line">			convertedValue: null</span><br><span class="line">			conversionNecessary: null</span><br><span class="line">			...</span><br><span class="line">		...</span><br></pre></td></tr></table></figure></div>

<p><code>WebDataBinder</code>实现了<code>doBind</code>方法</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doBind</span><span class="params">(MutablePropertyValues mpvs)</span> {</span><br><span class="line">    checkFieldDefaults(mpvs);</span><br><span class="line">    checkFieldMarkers(mpvs);</span><br><span class="line">    adaptEmptyArrayIndices(mpvs);</span><br><span class="line">    <span class="built_in">super</span>.doBind(mpvs);</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>下面进入到父类<code>DataBinder</code>中的<code>doBind</code>方法</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doBind</span><span class="params">(MutablePropertyValues mpvs)</span> {</span><br><span class="line">    checkAllowedFields(mpvs);</span><br><span class="line">    checkRequiredFields(mpvs);</span><br><span class="line">    <span class="comment">// 上述操作做了对所需属性的校验</span></span><br><span class="line">    applyPropertyValues(mpvs); <span class="comment">// 应用属性的值</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p><code>DataBinder</code>中的<code>applyPropertyValues</code>方法。这里通过<code>getPropertyAccessor</code>方法返回了经过处理的<code>bindingResult</code>（具体内容可以自行点开查看源码）</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 代码有删改</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">applyPropertyValues</span><span class="params">(MutablePropertyValues mpvs)</span> {</span><br><span class="line">    <span class="keyword">try</span> {</span><br><span class="line">        <span class="comment">// 设置属性的值</span></span><br><span class="line">        getPropertyAccessor().setPropertyValues(mpvs, isIgnoreUnknownFields(), isIgnoreInvalidFields());</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h3 id="AbstractPropertyAccessor"><a href="#AbstractPropertyAccessor" class="headerlink" title="AbstractPropertyAccessor"></a>AbstractPropertyAccessor</h3><p>这里通过<code>getPropertyAccessor</code>方法返回了经过处理的<code>bindingResult</code>后（其类别为<code>AbstractPropertyBindingResult</code>），调用了其<code>setPropertyValues</code>方法。我们可以看到核心为：遍历了<code>mpvs</code>中的所有值</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 代码有删改</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPropertyValues</span><span class="params">(PropertyValues pvs, <span class="type">boolean</span> ignoreUnknown, <span class="type">boolean</span> ignoreInvalid)</span></span><br><span class="line">        <span class="keyword">throws</span> BeansException {</span><br><span class="line">    <span class="comment">// 遍历了所有的值，并设置</span></span><br><span class="line">    <span class="keyword">for</span> (PropertyValue pv : propertyValues) {</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            setPropertyValue(pv);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>继续查看<code>AbstractPropertyAccessor</code>的<code>setPropertyValue</code>方法</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 代码有删改</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPropertyValue</span><span class="params">(PropertyValue pv)</span> <span class="keyword">throws</span> BeansException {</span><br><span class="line">	<span class="type">String</span> <span class="variable">propertyName</span> <span class="operator">=</span> pv.getName();</span><br><span class="line">    AbstractNestablePropertyAccessor nestedPa;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span> {</span><br><span class="line">        <span class="comment">// 利用反射工具PropertyAccessor，访问属性，返回</span></span><br><span class="line">        nestedPa = getPropertyAccessorForPropertyPath(propertyName);</span><br><span class="line">    }</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 利用wrapper设置属性的值</span></span><br><span class="line">    nestedPa.setPropertyValue(tokens, pv);</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>在这里，<code>nestedPa</code>是一个<code>BeanWrapperImpl</code>（继承自<code>AbstractNestablePropertyAccessor</code>），内部包装着原生对象</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">nestedPa {BeanWrapperImpl}:</span><br><span class="line">	rootObject: {User}</span><br></pre></td></tr></table></figure></div>

<h3 id="BeanWrapperImpl"><a href="#BeanWrapperImpl" class="headerlink" title="BeanWrapperImpl"></a>BeanWrapperImpl</h3><p>类继承关系：<code>BeanWrapperImpl</code>&lt;-<code>AbstractNestablePropertyAccessor</code></p>
<p><code>AbstractNestablePropertyAccessor</code>中，<code>setPropertyValue</code>方法</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">setPropertyValue</span><span class="params">(PropertyTokenHolder tokens, PropertyValue pv)</span> <span class="keyword">throws</span> BeansException {</span><br><span class="line">    <span class="keyword">if</span> (tokens.keys != <span class="literal">null</span>) {</span><br><span class="line">        <span class="comment">/* </span></span><br><span class="line"><span class="comment">        	用于处理键值对属性</span></span><br><span class="line"><span class="comment">        	例如，当属性名是person.address.street时，tokens.keys将包含[person, address]作为键的标记</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        processKeyedProperty(tokens, pv);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span> {</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        	用于处理本地属性。本地属性是指不涉及键值对的普通属性</span></span><br><span class="line"><span class="comment">        	例如，当属性名是name时，tokens.keys将为null，这个方法可以直接获取或设置属性值。</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        processLocalProperty(tokens, pv); <span class="comment">// 步入</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p><code>AbstractNestablePropertyAccessor</code>中，<code>processLocalProperty</code>方法</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 代码有删改</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">processLocalProperty</span><span class="params">(PropertyTokenHolder tokens, PropertyValue pv)</span> {</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 类型转换，比如将"23"转化为Integer</span></span><br><span class="line">    valueToApply = convertForProperty(tokens.canonicalName, oldValue, originalValue, ph.toTypeDescriptor());</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 最终将值设置到对象</span></span><br><span class="line">    ph.setValue(valueToApply);</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p><code>AbstractNestablePropertyAccessor</code>中，<code>convertForProperty</code>方法</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">protected</span> Object <span class="title function_">convertForProperty</span><span class="params">(</span></span><br><span class="line"><span class="params">        String propertyName, <span class="meta">@Nullable</span> Object oldValue, <span class="meta">@Nullable</span> Object newValue, TypeDescriptor td)</span></span><br><span class="line">        <span class="keyword">throws</span> TypeMismatchException {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> convertIfNecessary(propertyName, oldValue, newValue, td.getType(), td);</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p><code>AbstractNestablePropertyAccessor</code>中，<code>convertIfNecessary</code>方法</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 代码有删改</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> Object <span class="title function_">convertIfNecessary</span><span class="params">(<span class="meta">@Nullable</span> String propertyName, <span class="meta">@Nullable</span> Object oldValue,</span></span><br><span class="line"><span class="params">        <span class="meta">@Nullable</span> Object newValue, <span class="meta">@Nullable</span> Class&lt;?&gt; requiredType, <span class="meta">@Nullable</span> TypeDescriptor td)</span></span><br><span class="line">        <span class="keyword">throws</span> TypeMismatchException {</span><br><span class="line">	</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.typeConverterDelegate.convertIfNecessary(propertyName, oldValue, newValue, requiredType, td);</span><br><span class="line">    </span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h3 id="TypeConverterDelegate"><a href="#TypeConverterDelegate" class="headerlink" title="TypeConverterDelegate"></a>TypeConverterDelegate</h3><p>它是Spring的类型转换器委托类。<code>convertIfNecessary</code>方法目的在于将给定的值转换为指定的目标类型</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 代码有删改</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; T <span class="title function_">convertIfNecessary</span><span class="params">(<span class="meta">@Nullable</span> String propertyName, <span class="meta">@Nullable</span> Object oldValue, <span class="meta">@Nullable</span> Object newValue,</span></span><br><span class="line"><span class="params">        <span class="meta">@Nullable</span> Class&lt;T&gt; requiredType, <span class="meta">@Nullable</span> TypeDescriptor typeDescriptor)</span> <span class="keyword">throws</span> IllegalArgumentException {</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 拿到conversionService，某种转换工具。</span></span><br><span class="line">    <span class="comment">// 里面有converters，包含124种转换器。</span></span><br><span class="line">    <span class="type">ConversionService</span> <span class="variable">conversionService</span> <span class="operator">=</span> <span class="built_in">this</span>.propertyEditorRegistry.getConversionService();</span><br><span class="line">    <span class="keyword">if</span> (editor == <span class="literal">null</span> &amp;&amp; conversionService != <span class="literal">null</span> &amp;&amp; newValue != <span class="literal">null</span> &amp;&amp; typeDescriptor != <span class="literal">null</span>) {</span><br><span class="line">        <span class="type">TypeDescriptor</span> <span class="variable">sourceTypeDesc</span> <span class="operator">=</span> TypeDescriptor.forObject(newValue);</span><br><span class="line">        <span class="comment">// 判断能否转换，可以点开源码看看（和之前的各种解析器类似，第一次遍历找，找到加入缓存）</span></span><br><span class="line">        <span class="keyword">if</span> (conversionService.canConvert(sourceTypeDesc, typeDescriptor)) {</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                <span class="keyword">return</span> (T) conversionService.convert(newValue, sourceTypeDesc, typeDescriptor);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (T) convertedValue;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h3 id="GenericConversionService"><a href="#GenericConversionService" class="headerlink" title="GenericConversionService"></a>GenericConversionService</h3><p>类继承关系：<code>ConversionService</code> &lt;-<code>ConfigurableConversionService</code> &lt;-<code>GenericConversionService</code></p>
<p>我们继续查看<code>conversionService.convert</code>方法</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 代码有删改</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">convert</span><span class="params">(<span class="meta">@Nullable</span> Object source, <span class="meta">@Nullable</span> TypeDescriptor sourceType, TypeDescriptor targetType)</span> {</span><br><span class="line">    <span class="comment">// 拿到converter后进行处理</span></span><br><span class="line">    <span class="type">GenericConverter</span> <span class="variable">converter</span> <span class="operator">=</span> getConverter(sourceType, targetType);</span><br><span class="line">    <span class="keyword">if</span> (converter != <span class="literal">null</span>) {</span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> ConversionUtils.invokeConverter(converter, source, sourceType, targetType); <span class="comment">// 步入</span></span><br><span class="line">        <span class="keyword">return</span> handleResult(sourceType, targetType, result);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> handleConverterNotFound(source, sourceType, targetType);</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h3 id="ConversionUtils"><a href="#ConversionUtils" class="headerlink" title="ConversionUtils"></a>ConversionUtils</h3><p><code>ConversionUtils</code>内的静态方法<code>invokeConverter</code></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 代码有删改</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">invokeConverter</span><span class="params">(GenericConverter converter, <span class="meta">@Nullable</span> Object source,</span></span><br><span class="line"><span class="params">        TypeDescriptor sourceType, TypeDescriptor targetType)</span> {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> {</span><br><span class="line">        <span class="keyword">return</span> converter.convert(source, sourceType, targetType);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h3 id="GenericConversionService-1"><a href="#GenericConversionService-1" class="headerlink" title="GenericConversionService"></a>GenericConversionService</h3><p>调用了<code>converter.convert</code>方法，在当前例子中（<code>User.userAge</code>）<code>sourceType</code>是<code>String</code>，<code>targetType</code>是<code>Integer</code></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">convert</span><span class="params">(<span class="meta">@Nullable</span> Object source, TypeDescriptor sourceType, TypeDescriptor targetType)</span> {</span><br><span class="line">    <span class="keyword">if</span> (source == <span class="literal">null</span>) {</span><br><span class="line">        <span class="keyword">return</span> convertNullSource(sourceType, targetType);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.converterFactory.getConverter(targetType.getObjectType()).convert(source);</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h3 id="StringToNumberConverterFactory"><a href="#StringToNumberConverterFactory" class="headerlink" title="StringToNumberConverterFactory"></a>StringToNumberConverterFactory</h3><p>类继承关系：<code>ConverterFactory</code>&lt;-<code>StringToNumberConverterFactory</code></p>
<p><code>StringToNumberConverterFactory</code>实现了<code>ConverterFactory</code>接口。我们这里的<code>this.converterFactory</code>是<code>StringToNumberConverterFactory</code>类型的。</p>
<p>通过它，我们拿到了需要的<code>StringToNumber</code>（实现自<code>Converter&lt;String, T&gt;</code>）</p>
<h3 id="StringToNumber"><a href="#StringToNumber" class="headerlink" title="StringToNumber"></a>StringToNumber</h3><p><code>StringToNumber</code>类的<code>convert</code>方法如下，其实非常简单</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">public</span> T <span class="title function_">convert</span><span class="params">(String source)</span> {</span><br><span class="line">    <span class="keyword">if</span> (source.isEmpty()) {</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> NumberUtils.parseNumber(source, <span class="built_in">this</span>.targetType);</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>未来，我们可以给<code>WebDataBinder</code>里放自己的<code>Converter</code></p>
<h2 id="自定义Converter"><a href="#自定义Converter" class="headerlink" title="自定义Converter"></a>自定义Converter</h2><p>我们已经知道，当我们的参数标注了@ModelAttribute，或是一个复杂对象时，会使用<code>ServletModelAttributeMethodProcessor</code>这个参数解析器。而该解析器会寻找合适的<code>converter</code>来进行类型转换</p>
<p>假设我们的需求是：</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line">用户: <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"Tom,6"</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer userAge;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping("/user")</span></span><br><span class="line">String <span class="title function_">addUser</span><span class="params">(User user)</span> {</span><br><span class="line">    System.out.println(<span class="string">"user = "</span> + user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>我们可以通过<code>WebMvcConfigurer</code>的<code>addFormatters</code>方法，为容器中添加自定义的<code>converter</code></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在配置类中配置自定义webMvcConfigurer，利用其中addFormatters添加自定义Converter</span></span><br><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> {</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> WebMvcConfigurer <span class="title function_">webMvcConfigurer</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">WebMvcConfigurer</span>() {</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addFormatters</span><span class="params">(FormatterRegistry registry)</span> {</span><br><span class="line">                registry.addConverter(<span class="keyword">new</span> <span class="title class_">Converter</span>&lt;String, User&gt;() {</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> User <span class="title function_">convert</span><span class="params">(String source)</span> {</span><br><span class="line">                        <span class="keyword">if</span> (!source.isEmpty()) {</span><br><span class="line">                            <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">                            String[] split = source.split(<span class="string">","</span>);</span><br><span class="line">                            user.setUserName(split[<span class="number">0</span>]);</span><br><span class="line">                            user.setUserAge(Integer.parseInt(split[<span class="number">1</span>]));</span><br><span class="line">                            <span class="keyword">return</span> user;</span><br><span class="line">                        }</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                    }</span><br><span class="line">                });</span><br><span class="line">            }</span><br><span class="line">        };</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>java</category>
        <category>SpringBoot</category>
        <category>源码</category>
      </categories>
      <tags>
        <tag>SpringBoot源码系列</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot源码系列（9）：DispatcherServlet如何被注册进容器</title>
    <url>//post/19203/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在本文中，将探讨<code>DispatcherServlet</code>是怎样被注册到<code>SpringBoot</code>中的</p>
<p>原文地址：<a href="https://xuedongyun.cn/post/19203/">https://xuedongyun.cn/post/19203/</a></p>
<h2 id="注册进容器的原理"><a href="#注册进容器的原理" class="headerlink" title="注册进容器的原理"></a>注册进容器的原理</h2><h3 id="DispatcherServletAutoConfiguration"><a href="#DispatcherServletAutoConfiguration" class="headerlink" title="DispatcherServletAutoConfiguration"></a>DispatcherServletAutoConfiguration</h3><p>在<code>SpringBoot</code>的<code>web</code>模块中，有<code>DispatcherServletAutoConfiguration</code>这个自动配置类</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE)</span></span><br><span class="line"><span class="meta">@AutoConfiguration(after = ServletWebServerFactoryAutoConfiguration.class)</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication(type = Type.SERVLET)</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(DispatcherServlet.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DispatcherServletAutoConfiguration</span> {</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h3 id="DispatcherServletConfiguration"><a href="#DispatcherServletConfiguration" class="headerlink" title="DispatcherServletConfiguration"></a>DispatcherServletConfiguration</h3><p><code>DispatcherServletAutoConfiguration</code>中有一个<code>DispatcherServletConfiguration</code>配置类，通过<code>@Configuration</code>注解进行标注。 属性绑定到<code>WebMvcProperties</code>，对应配置项<code>spring.mvc</code></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@Conditional(DefaultDispatcherServletCondition.class)</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(ServletRegistration.class)</span></span><br><span class="line"><span class="comment">// 属性绑定到WebMvcProperties，对应配置项"spring.mvc"</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(WebMvcProperties.class)</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">DispatcherServletConfiguration</span> {</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 向容器中放入DispatcherServlet组件</span></span><br><span class="line">    <span class="meta">@Bean(name = DEFAULT_DISPATCHER_SERVLET_BEAN_NAME)</span></span><br><span class="line">    <span class="keyword">public</span> DispatcherServlet <span class="title function_">dispatcherServlet</span><span class="params">(WebMvcProperties webMvcProperties)</span> {</span><br><span class="line">        <span class="type">DispatcherServlet</span> <span class="variable">dispatcherServlet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DispatcherServlet</span>();</span><br><span class="line">        dispatcherServlet.setDispatchOptionsRequest(webMvcProperties.isDispatchOptionsRequest());</span><br><span class="line">        dispatcherServlet.setDispatchTraceRequest(webMvcProperties.isDispatchTraceRequest());</span><br><span class="line">        dispatcherServlet.setThrowExceptionIfNoHandlerFound(webMvcProperties.isThrowExceptionIfNoHandlerFound());</span><br><span class="line">        dispatcherServlet.setPublishEvents(webMvcProperties.isPublishRequestHandledEvents());</span><br><span class="line">        dispatcherServlet.setEnableLoggingRequestDetails(webMvcProperties.isLogRequestDetails());</span><br><span class="line">        <span class="keyword">return</span> dispatcherServlet;</span><br><span class="line">    }</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 文件解析器，这里不用管</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnBean(MultipartResolver.class)</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean(name = DispatcherServlet.MULTIPART_RESOLVER_BEAN_NAME)</span></span><br><span class="line">    <span class="keyword">public</span> MultipartResolver <span class="title function_">multipartResolver</span><span class="params">(MultipartResolver resolver)</span> {</span><br><span class="line">        <span class="comment">// Detect if the user has created a MultipartResolver but named it incorrectly</span></span><br><span class="line">        <span class="keyword">return</span> resolver;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h3 id="DispatcherServletRegistrationConfiguration"><a href="#DispatcherServletRegistrationConfiguration" class="headerlink" title="DispatcherServletRegistrationConfiguration"></a>DispatcherServletRegistrationConfiguration</h3><p><code>DispatcherServletAutoConfiguration</code>中还有一个<code>DispatcherServletRegistrationConfiguration</code>配置类</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@Conditional(DispatcherServletRegistrationCondition.class)</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(ServletRegistration.class)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(WebMvcProperties.class)</span></span><br><span class="line"><span class="meta">@Import(DispatcherServletConfiguration.class)</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">DispatcherServletRegistrationConfiguration</span> {</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(name = DEFAULT_DISPATCHER_SERVLET_REGISTRATION_BEAN_NAME)</span></span><br><span class="line">    <span class="meta">@ConditionalOnBean(value = DispatcherServlet.class, name = DEFAULT_DISPATCHER_SERVLET_BEAN_NAME)</span></span><br><span class="line">    <span class="keyword">public</span> DispatcherServletRegistrationBean <span class="title function_">dispatcherServletRegistration</span><span class="params">(DispatcherServlet dispatcherServlet,</span></span><br><span class="line"><span class="params">                                                                           WebMvcProperties webMvcProperties, </span></span><br><span class="line"><span class="params">                                                                           ObjectProvider&lt;MultipartConfigElement&gt; multipartConfig)</span> {</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 关键，此处将DispatcherServlet配置到web容器中</span></span><br><span class="line">        <span class="type">DispatcherServletRegistrationBean</span> <span class="variable">registration</span> <span class="operator">=</span> </span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">DispatcherServletRegistrationBean</span>(dispatcherServlet, webMvcProperties.getServlet().getPath());</span><br><span class="line">        </span><br><span class="line">        registration.setName(DEFAULT_DISPATCHER_SERVLET_BEAN_NAME);</span><br><span class="line">        registration.setLoadOnStartup(webMvcProperties.getServlet().getLoadOnStartup());</span><br><span class="line">        multipartConfig.ifAvailable(registration::setMultipartConfig);</span><br><span class="line">        <span class="keyword">return</span> registration;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p><code>DispatcherServletRegistrationBean</code> 继承自<code>ServletRegistrationBean</code></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DispatcherServletRegistrationBean</span> <span class="keyword">extends</span> <span class="title class_">ServletRegistrationBean</span>&lt;DispatcherServlet&gt; <span class="keyword">implements</span> <span class="title class_">DispatcherServletPath</span> {}</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>java</category>
        <category>SpringBoot</category>
        <category>源码</category>
      </categories>
      <tags>
        <tag>SpringBoot源码系列</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot中的@Asnyc注解</title>
    <url>//post/59240/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文将探讨在SpringBoot中的线程问题。Controller是线程安全的吗？如果我们想在用户请求时，开辟新的异步任务，该如何操作？</p>
<p>原文地址：<a href="https://xuedongyun.cn/post/59240/">https://xuedongyun.cn/post/59240/</a></p>
<h2 id="Controller线程安全"><a href="#Controller线程安全" class="headerlink" title="Controller线程安全"></a>Controller线程安全</h2><p>首先我们先测试一下<code>Controller</code>的线程问题。我们在<code>Controller</code>中创建成员变量，并在请求中对它进行更改（请注意，这是非常规操作，请勿在开发中使用）。并且，我们在收到请求时，打印当前线程的Id。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> {</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping("/hello")</span></span><br><span class="line">    String <span class="title function_">hello</span><span class="params">()</span> {</span><br><span class="line">        i = i + <span class="number">1</span>;</span><br><span class="line">        System.out.println(<span class="string">"i = "</span> + i);</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">threadId</span> <span class="operator">=</span> Thread.currentThread().getId();</span><br><span class="line">        System.out.println(<span class="string">"threadId = "</span> + threadId);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>最终结果显示，<code>Controller</code>默认是单例模式，而这种模式下是线程不安全的。我们每次的请求，都会从<code>SpringBoot</code>的线程池中拿到一个线程进行使用。</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">i = 1</span><br><span class="line">threadId = 40</span><br><span class="line">i = 2</span><br><span class="line">threadId = 43</span><br><span class="line">i = 3</span><br><span class="line">threadId = 42</span><br><span class="line">i = 4</span><br><span class="line">threadId = 40	// 线程池中，线程可以复用</span><br></pre></td></tr></table></figure></div>

<p>如果我们将<code>Controller</code>指定为单例模式，又会如何呢？我们使用<code>@Scope</code>注解，指定<code>HelloController</code>为原型模式。</p>
<blockquote>
<p><code>@Scope</code>有五种作用域：</p>
<ul>
<li>SINGLETON：单例模式，默认模式，不写的时候默认是SINGLETON</li>
<li>PROTOTYPE：原型模式</li>
<li>REQUEST：同一次请求则只创建一次实例</li>
<li>SESSION：同一个session只创建一次实例</li>
<li>GLOBAL SESSION：全局的web域，类似于servlet中的application</li>
</ul>
</blockquote>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Scope(value = ConfigurableBeanFactory.SCOPE_PROTOTYPE)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> {</span><br><span class="line">    </span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>此时可以看到，每次请求都会创建一个新的<code>Controller</code>实例，所以其实是线程安全的。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">i = 1</span><br><span class="line">threadId = 40</span><br><span class="line">i = 1</span><br><span class="line">threadId = 43</span><br><span class="line">i = 1</span><br><span class="line">threadId = 42</span><br><span class="line">i = 1</span><br><span class="line">threadId = 40</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>无论如何，请尽量不要在<code>Controller</code>中使用成员变量</p>
</blockquote>
<h2 id="Async异步调用"><a href="#Async异步调用" class="headerlink" title="@Async异步调用"></a>@Async异步调用</h2><p>假设用户提交一个任务，后端需要处理很久，最佳的方案应该是使用异步调用。用户提交任务之后，后端开辟新的线程处理任务。</p>
<p>首先在需要异步执行的方法上加上<code>@Async</code>注解</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AsyncTask</span> {</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doTask</span><span class="params">(String taskName)</span> <span class="keyword">throws</span> InterruptedException {</span><br><span class="line">        Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        log.info(Thread.currentThread().getName());</span><br><span class="line">        log.info(<span class="string">"task: "</span> + taskName+ <span class="string">" is finished!"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>然后需要在主启动类上加上<code>@EnableAsync</code>注解，开启异步功能</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableAsync</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringBootSourceApplication</span> {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">ConfigurableApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> SpringApplication.run(SpringBootSourceApplication.class, args);</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>现在我们就能对用户的请求进行异步的处理了，用户发起请求能直接收到响应，3000ms后服务器才完成任务</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AsyncController</span> {</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> AsyncTask asyncTask;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping("/task")</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">task</span><span class="params">(String taskName)</span> <span class="keyword">throws</span> InterruptedException {</span><br><span class="line">        asyncTask.doTask(taskName);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success to submit"</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h2 id="自定义线程池"><a href="#自定义线程池" class="headerlink" title="自定义线程池"></a>自定义线程池</h2><h3 id="配置文件修改默认线程池"><a href="#配置文件修改默认线程池" class="headerlink" title="配置文件修改默认线程池"></a>配置文件修改默认线程池</h3><p>我们可以通过配置文件来修改SpringBoot默认线程池的参数</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">task:</span></span><br><span class="line">    <span class="attr">execution:</span></span><br><span class="line">      <span class="attr">pool:</span></span><br><span class="line">        <span class="attr">core-size:</span> <span class="number">5</span></span><br><span class="line">        <span class="attr">max-size:</span> <span class="number">50</span></span><br><span class="line">        <span class="attr">queue-capacity:</span> <span class="number">200</span></span><br><span class="line">      <span class="attr">thread-name-prefix:</span> <span class="string">myTask-</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 代码有删改，具体配置类</span></span><br><span class="line"><span class="meta">@ConfigurationProperties("spring.task.execution")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TaskExecutionProperties</span> {</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Pool</span> <span class="variable">pool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Pool</span>();</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Shutdown</span> <span class="variable">shutdown</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Shutdown</span>();</span><br><span class="line">	<span class="keyword">private</span> <span class="type">String</span> <span class="variable">threadNamePrefix</span> <span class="operator">=</span> <span class="string">"task-"</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Pool</span> {</span><br><span class="line">		<span class="keyword">private</span> <span class="type">int</span> <span class="variable">queueCapacity</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">		<span class="keyword">private</span> <span class="type">int</span> <span class="variable">coreSize</span> <span class="operator">=</span> <span class="number">8</span>;</span><br><span class="line">		<span class="keyword">private</span> <span class="type">int</span> <span class="variable">maxSize</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">	}</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h3 id="配置类定义新的线程池"><a href="#配置类定义新的线程池" class="headerlink" title="配置类定义新的线程池"></a>配置类定义新的线程池</h3><p>也可以在配置类中定义自己的线程池（由于<code>@ConditionalOnMissingBean</code>，默认线程池已经没了）</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AsyncConfig</span> {</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(name = "customTaskExecutor")</span></span><br><span class="line">    <span class="keyword">public</span> ThreadPoolTaskExecutor <span class="title function_">customTaskExecutor</span><span class="params">()</span> {</span><br><span class="line">        <span class="type">ThreadPoolTaskExecutor</span> <span class="variable">taskExecutor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolTaskExecutor</span>();</span><br><span class="line">        taskExecutor.setCorePoolSize(<span class="number">2</span>);</span><br><span class="line">        taskExecutor.setMaxPoolSize(<span class="number">10</span>);</span><br><span class="line">        taskExecutor.setKeepAliveSeconds(<span class="number">200</span>);</span><br><span class="line">        taskExecutor.setThreadNamePrefix(executorPrefix);</span><br><span class="line">        taskExecutor.setRejectedExecutionHandler(<span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.CallerRunsPolicy());</span><br><span class="line">        taskExecutor.initialize();</span><br><span class="line">        <span class="keyword">return</span> taskExecutor;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h3 id="AsyncConfigurer接口"><a href="#AsyncConfigurer接口" class="headerlink" title="AsyncConfigurer接口"></a>AsyncConfigurer接口</h3><p>在配置类中实现<code>AsyncConfigurer</code>接口</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AsyncConfig</span> <span class="keyword">implements</span> <span class="title class_">AsyncConfigurer</span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指定默认线程池</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Executor <span class="title function_">getAsyncExecutor</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> getExecutor();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> AsyncUncaughtExceptionHandler <span class="title function_">getAsyncUncaughtExceptionHandler</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> AsyncConfigurer.<span class="built_in">super</span>.getAsyncUncaughtExceptionHandler();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ThreadPoolTaskExecutor <span class="title function_">getExecutor</span><span class="params">()</span> {</span><br><span class="line">        <span class="type">ThreadPoolTaskExecutor</span> <span class="variable">taskExecutor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolTaskExecutor</span>();</span><br><span class="line">        taskExecutor.setCorePoolSize(<span class="number">2</span>);</span><br><span class="line">        taskExecutor.setMaxPoolSize(<span class="number">10</span>);</span><br><span class="line">        taskExecutor.setKeepAliveSeconds(<span class="number">200</span>);</span><br><span class="line">        taskExecutor.setThreadNamePrefix(<span class="string">"custom-"</span>);</span><br><span class="line">        taskExecutor.setRejectedExecutionHandler(<span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.CallerRunsPolicy());</span><br><span class="line">        taskExecutor.initialize();</span><br><span class="line">        <span class="keyword">return</span> taskExecutor;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h2 id="为任务指定不同线程池"><a href="#为任务指定不同线程池" class="headerlink" title="为任务指定不同线程池"></a>为任务指定不同线程池</h2><p>若<code>@Async</code>不指定具体的线程池，会使用默认的线程池。具体规则如下：</p>
<ul>
<li><p>若容器中只有一个<code>TaskExecutor</code>组件，其为默认执行器；</p>
</li>
<li><p>若不唯一，拿名字叫”taskExecutor”的，类型为<code>Executor</code>的组件。</p>
</li>
<li><p>若都不满足，使用<code>SimpleAsyncTaskExecutor</code>作为默认执行器（每次执行被注解方法时，单独创建一个Thread来执行）</p>
</li>
</ul>
<p>我们可以通过value属性，为不同任务指定不同的线程池</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 不同方法，指定不同的线程池</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Async("otherTaskExecutor")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doTask1</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException {</span><br><span class="line">    Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">    log.info(Thread.currentThread().getName());</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@Async("testTaskExecutor")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doTask2</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException {</span><br><span class="line">    Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">    log.info(Thread.currentThread().getName());</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean(name = "otherTaskExecutor")</span></span><br><span class="line"><span class="keyword">public</span> ThreadPoolTaskExecutor <span class="title function_">otherExecutor</span><span class="params">()</span> {</span><br><span class="line">    <span class="type">ThreadPoolTaskExecutor</span> <span class="variable">taskExecutor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolTaskExecutor</span>();</span><br><span class="line">    taskExecutor.setCorePoolSize(<span class="number">2</span>);</span><br><span class="line">    taskExecutor.setMaxPoolSize(<span class="number">10</span>);</span><br><span class="line">    taskExecutor.setKeepAliveSeconds(<span class="number">200</span>);</span><br><span class="line">    taskExecutor.setThreadNamePrefix(<span class="string">"other-"</span>);</span><br><span class="line">    taskExecutor.setRejectedExecutionHandler(<span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.CallerRunsPolicy());</span><br><span class="line">    taskExecutor.initialize();</span><br><span class="line">    <span class="keyword">return</span> taskExecutor;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean(name = "testTaskExecutor")</span></span><br><span class="line"><span class="keyword">public</span> ThreadPoolTaskExecutor <span class="title function_">testExecutor</span><span class="params">()</span> {</span><br><span class="line">    <span class="type">ThreadPoolTaskExecutor</span> <span class="variable">taskExecutor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolTaskExecutor</span>();</span><br><span class="line">    taskExecutor.setCorePoolSize(<span class="number">2</span>);</span><br><span class="line">    taskExecutor.setMaxPoolSize(<span class="number">10</span>);</span><br><span class="line">    taskExecutor.setKeepAliveSeconds(<span class="number">200</span>);</span><br><span class="line">    taskExecutor.setThreadNamePrefix(<span class="string">"test-"</span>);</span><br><span class="line">    taskExecutor.setRejectedExecutionHandler(<span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.CallerRunsPolicy());</span><br><span class="line">    taskExecutor.initialize();</span><br><span class="line">    <span class="keyword">return</span> taskExecutor;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>如果你想知道背后的原理（源码），可以查看我之前的文章：<a href="https://xuedongyun.cn/post/24765/">SpringBoot源码系列（10）：@Async原理</a></p>
]]></content>
      <categories>
        <category>java</category>
        <category>SpringBoot</category>
        <category>应用</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring6学习拾遗</title>
    <url>//post/386/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文主要是在学习Spring6时的知识点拾遗，涉及多个方面，内容较为基础</p>
<p>原文地址：<a href="https://xuedongyun.cn/post/386/">https://xuedongyun.cn/post/386/</a></p>
<h2 id="Spring是如何创建对象的（xml）"><a href="#Spring是如何创建对象的（xml）" class="headerlink" title="Spring是如何创建对象的（xml）"></a>Spring是如何创建对象的（xml）</h2><ul>
<li>调用了无参构造器创建对象</li>
<li><code>dom4j</code>解析<code>beans.xml</code>文件，从中获取类的全类名</li>
<li>通过反射机制调用无参数构造方法创建对象</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">"com.example.spring6.User"</span>);</span><br><span class="line"><span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> clazz.getDeclaredConstructor().newInstance();</span><br></pre></td></tr></table></figure></div>

<ul>
<li>bean最终存储在spring容器中，底层是一个map。map在<code>DefaultListableBeanFactory</code>类中<ul>
<li>key：<code>String</code>，默认是类名首字母小写</li>
<li>values：<code>BeanDefinition</code> , 存的是类的定义(描述信息)</li>
</ul>
</li>
</ul>
<blockquote>
<p><code>BeanDefinition</code></p>
<p>每一个被扫描到的bean都会生成一个<code>BeanDefinition</code>。描述一个bean的全部信息，比如他的class类型、Bean的作用域、是否懒加载…</p>
<p><code>BeanDefinition</code>的常见属性：</p>
<ul>
<li><code>beanClass</code>：表示Bean类型，未加载类的时候存放Bean的名字，加载类后存放Bean的class信息。</li>
<li><code>scope</code>：表示Bean的作用域，一般值为单例或者原型。</li>
<li><code>lazyInit</code>：表示Bean是否是懒加载。</li>
<li><code>initMethodName</code>：Bean初始化需要执行的方法。</li>
<li><code>destroyMethodName</code>：Bean销毁时要执行的方法。</li>
<li><code>factoryBeanName</code>：创建当前Bean的工厂。</li>
</ul>
</blockquote>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefaultListableBeanFactory</span> <span class="keyword">extends</span> <span class="title class_">AbstractAutowireCapableBeanFactory</span> </span><br><span class="line">    									<span class="keyword">implements</span> <span class="title class_">ConfigurableListableBeanFactory</span>, BeanDefinitionRegistry, Serializable {</span><br><span class="line">    </span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, BeanDefinition&gt; beanDefinitionMap = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;(<span class="number">256</span>);</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h2 id="什么是控制反转（IoC）和依赖注入（DI）"><a href="#什么是控制反转（IoC）和依赖注入（DI）" class="headerlink" title="什么是控制反转（IoC）和依赖注入（DI）"></a>什么是控制反转（IoC）和依赖注入（DI）</h2><p>控制反转</p>
<ul>
<li>是一种思想</li>
<li>为了降低程序耦合，提高扩展能力</li>
<li>反转的是什么<ul>
<li>对象的创建权，交由第三方容器负责</li>
<li>对象之间关系的维护权，交由第三方容器负责</li>
</ul>
</li>
<li>如何实现的：依赖注入</li>
</ul>
<p>依赖注入</p>
<ul>
<li>依赖注入实现了控制反转</li>
<li>Spring中，对象创建的过程中，将对象依赖属性通过配置进行注入</li>
<li>常见依赖注入方式<ul>
<li>setter输入</li>
<li>构造器注入</li>
</ul>
</li>
</ul>
<h2 id="IOC容器在Spring中的实现"><a href="#IOC容器在Spring中的实现" class="headerlink" title="IOC容器在Spring中的实现"></a>IOC容器在Spring中的实现</h2><p>Spring中的IoC容器：IoC思想的具体实现，管理的组件叫Bean。</p>
<ol>
<li><code>BeanFactory</code>：IoC 容器的基本实现，Spring内部使用的接口</li>
<li><code>ApplicationContext</code>：子接口，提供了更多高级特性，面向 Spring 的使用者</li>
</ol>
<p><code>ApplicationContext</code>的主要实现类：</p>
<table>
<thead>
<tr>
<th>类型名</th>
<th>简介</th>
</tr>
</thead>
<tbody><tr>
<td><code>ClassPathXmlApplicationContext</code></td>
<td>通过读取类路径下的 XML 格式的配置文件创建 IOC 容器对象</td>
</tr>
<tr>
<td><code>FileSystemXmlApplicationContext</code></td>
<td>通过文件系统路径读取 XML 格式的配置文件创建 IOC 容器对象</td>
</tr>
<tr>
<td><code>ConfigurableApplicationContext</code></td>
<td><code>ApplicationContext</code> 的子接口，包含一些扩展方法 refresh() 和 close() ，让 <code>ApplicationContext</code> 具有启动、关闭和刷新上下文的能力。</td>
</tr>
<tr>
<td><code>WebApplicationContext</code></td>
<td>专门为 Web 应用准备，基于 Web 环境创建 IOC 容器对象，并将对象引入存入 <code>ServletContext</code> 域中。</td>
</tr>
</tbody></table>
<h2 id="获取Bean时的类型判断"><a href="#获取Bean时的类型判断" class="headerlink" title="获取Bean时的类型判断"></a>获取Bean时的类型判断</h2><p>根据类型来获取Bean时，实际使用的是<code>instanceof</code>。也即，在满足Bean唯一条件下，我们可以拿到子类型的Bean</p>
<h2 id="Autowired和-Resource的区别"><a href="#Autowired和-Resource的区别" class="headerlink" title="@Autowired和@Resource的区别"></a>@Autowired和@Resource的区别</h2><table>
<thead>
<tr>
<th><code>@Autowired</code></th>
<th><code>@Resource</code></th>
</tr>
</thead>
<tbody><tr>
<td>Spring框架的注解</td>
<td>JDK扩展包<code>javax.annotation-api</code>中的注解</td>
</tr>
<tr>
<td>默认byType注入；若要根据名称，需使用@Qualifier注解</td>
<td>默认byName注入，没有指定name时把属性名当做name；根据name找不到时，才会byType注入</td>
</tr>
<tr>
<td>属性，setter，方法，构造函数</td>
<td>属性，setter</td>
</tr>
</tbody></table>
<h2 id="Bean的生命周期"><a href="#Bean的生命周期" class="headerlink" title="Bean的生命周期"></a>Bean的生命周期</h2><p>Bean的生命周期</p>
<ul>
<li>bean对象创建（调用无参构造器）</li>
<li>为bean对象设置属性</li>
<li>bean的<strong>后置处理器（初始化之前）</strong></li>
<li>bean对象<strong>初始化（需在配置bean时指定初始化方法）</strong></li>
<li>bean的<strong>后置处理器（初始化之后）</strong></li>
<li>bean对象就绪（可以使用了）</li>
<li>bean对象<strong>销毁（需在配置bean时指定销毁方法）</strong></li>
<li>IoC容器关闭</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initMethod</span><span class="params">()</span>{</span><br><span class="line">        System.out.println(<span class="string">"生命周期：初始化"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroyMethod</span><span class="params">()</span>{</span><br><span class="line">        System.out.println(<span class="string">"生命周期：销毁"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> {</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initMethod</span><span class="params">()</span>{</span><br><span class="line">        System.out.println(<span class="string">"生命周期：初始化"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PreDestroy</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroyMethod</span><span class="params">()</span>{</span><br><span class="line">        System.out.println(<span class="string">"生命周期：销毁"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 后置处理器需要放到容器中，才能生效</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBeanProcessor</span> <span class="keyword">implements</span> <span class="title class_">BeanPostProcessor</span> {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException {</span><br><span class="line">        System.out.println(<span class="string">"生命周期：后置处理器，初始化之前"</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException {</span><br><span class="line">        System.out.println(<span class="string">"生命周期：后置处理器，初始化之后"</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>配置<code>initMethod</code>和<code>destroyMethod</code>的几种方法：</p>
<ol>
<li><code>@PostConstruct</code>注解和<code>@PreDestroy</code>注解</li>
<li><code>xml</code>方式：<code>&lt;bean class="xxx" init-method="initMethod" destroy-method="destroyMethod"&gt;</code></li>
<li><code>@Bean</code>注解方式：<code>@Bean(initMethod = "initMethod", destroyMethod = "destroyMethod")</code></li>
</ol>
</blockquote>
<h2 id="FactoryBean"><a href="#FactoryBean" class="headerlink" title="FactoryBean"></a>FactoryBean</h2><p><code>FactoryBean</code>是Spring提供的一种整合第三方框架的常用机制。配置一个<code>FactoryBean</code>类型的bean，在获取bean的时候得到的是<code>getObject()</code>方法的返回值。</p>
<p><code>Mybatis</code>就是通过FactoryBean机制来创建<code>SqlSessionFactory</code>对象的</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserFactoryBean</span> <span class="keyword">implements</span> <span class="title class_">FactoryBean</span>&lt;User&gt; {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() {</span><br><span class="line">        <span class="keyword">return</span> User.class;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> context.getBean(<span class="string">"userFactoryBean"</span>, User.class);</span><br></pre></td></tr></table></figure></div>

<h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2><h3 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h3><p>二十三种设计模式的一种。调用目标方法，需要先经过代理，由代理对象调用目标方法。可以让不属于目标方法的逻辑剥离出来，解耦。</p>
<h4 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h4><p>原本的类，用于计算</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Calculator</span> {</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CalculatorImpl</span> <span class="keyword">implements</span> <span class="title class_">Calculator</span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> i + j;</span><br><span class="line">        System.out.println(<span class="string">"result = "</span> + result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>静态代理模式，将被代理的对象声明为成员变量</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CalculatorStaticProxy</span> <span class="keyword">implements</span> <span class="title class_">Calculator</span>{</span><br><span class="line">    <span class="keyword">private</span> Calculator target;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CalculatorStaticProxy</span><span class="params">(Calculator target)</span> {</span><br><span class="line">        <span class="built_in">this</span>.target = target;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> {</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"方法执行前"</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> target.add(i, j);</span><br><span class="line">        System.out.println(<span class="string">"方法执行后"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>调用方法</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Calculator</span> <span class="variable">calculator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CalculatorImpl</span>();</span><br><span class="line"><span class="type">Calculator</span> <span class="variable">staticProxy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CalculatorStaticProxy</span>(calculator);</span><br><span class="line"><span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> staticProxy.add(<span class="number">1</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure></div>

<h4 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h4><p>使用<code>Proxy.newProxyInstance</code>来创建代理对象</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 工厂类，用来生产代理对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyFactory</span> {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ProxyFactory</span><span class="params">(Object target)</span> {</span><br><span class="line">        <span class="built_in">this</span>.target = target;</span><br><span class="line">    }</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 生产代理对象，使用Proxy.newProxyInstance</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getProxy</span><span class="params">()</span> {</span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> target.getClass().getClassLoader();</span><br><span class="line">        Class&lt;?&gt;[] interfaces = target.getClass().getInterfaces();</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvocationHandler</span>() {</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable {</span><br><span class="line">                System.out.println(<span class="string">"方法执行前"</span>);</span><br><span class="line">                <span class="type">Object</span> <span class="variable">res</span> <span class="operator">=</span> method.invoke(target, args);</span><br><span class="line">                System.out.println(<span class="string">"方法执行后"</span>);</span><br><span class="line">                <span class="keyword">return</span> res;</span><br><span class="line">            }</span><br><span class="line">        };</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(classLoader, interfaces, handler);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h4 id="调用方法"><a href="#调用方法" class="headerlink" title="调用方法"></a>调用方法</h4><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Calculator</span> <span class="variable">calculator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CalculatorImpl</span>();</span><br><span class="line"><span class="type">ProxyFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProxyFactory</span>(calculator);</span><br><span class="line"><span class="type">Calculator</span> <span class="variable">proxy</span> <span class="operator">=</span> (Calculator) factory.getProxy();</span><br><span class="line">proxy.add(<span class="number">1</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure></div>

<h3 id="AOP概念"><a href="#AOP概念" class="headerlink" title="AOP概念"></a>AOP概念</h3><p>AOP（面向切面编程）是一种设计思想，是面向对象编程的一种补充。他通过预编译的方式和运行期间动态代理的方式实现。我们可以在不修改源代码的情况下，给程序统一添加额外的功能。</p>
<ul>
<li><p>简化代码：把方法中固定位置的重复的代码<strong>抽取</strong>出来，让被抽取的方法更专注于自己的核心功能，提高内聚性</p>
</li>
<li><p>代码增强：把特定的功能封装到切面类中，看哪里有需要，就往上套，被<strong>套用</strong>了切面逻辑的方法就被切面给增强了</p>
</li>
</ul>
<h3 id="AOP相关术语"><a href="#AOP相关术语" class="headerlink" title="AOP相关术语"></a>AOP相关术语</h3><h4 id="横切关注点"><a href="#横切关注点" class="headerlink" title="横切关注点"></a>横切关注点</h4><p>这是一个逻辑上的概念：分散在每个各个模块中解决同样的问题。比如用户验证，日志管理…</p>
<img lazyload="" src="/images/loading.svg" data-src="https://s2.loli.net/2023/06/16/m5jN7cziPUMFSlZ.png" alt="img019" style="zoom:50%;">

<h4 id="通知（增强）"><a href="#通知（增强）" class="headerlink" title="通知（增强）"></a>通知（增强）</h4><p>横切关注点上要做的事情都，需要一个方法来实现，这样的方法就叫通知方法</p>
<ul>
<li>前置通知：在被代理的目标方法<strong>前</strong>执行</li>
<li>返回通知：在被代理的目标方法<strong>成功结束</strong>后执行（<strong>寿终正寝</strong>）</li>
<li>异常通知：在被代理的目标方法<strong>异常结束</strong>后执行（<strong>死于非命</strong>）</li>
<li>后置通知：在被代理的目标方法<strong>最终结束</strong>后执行（<strong>盖棺定论</strong>）</li>
<li>环绕通知：使用try…catch…finally结构围绕<strong>整个</strong>被代理的目标方法，包括上面四种通知对应的所有位置</li>
</ul>
<img lazyload="" src="/images/loading.svg" data-src="https://s2.loli.net/2023/06/16/zomuTxDWpF6fZKU.png" alt="img020" style="zoom:50%;">

<h4 id="切面"><a href="#切面" class="headerlink" title="切面"></a>切面</h4><p>封装通知方法的类</p>
<img lazyload="" src="/images/loading.svg" data-src="https://s2.loli.net/2023/06/16/4cUNnYRje5ZB8Fu.png" alt="img021" style="zoom:50%;">

<h4 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h4><p>被代理的目标对象</p>
<h4 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h4><p>目标对象应用通知后的代理对象</p>
<h4 id="连接点"><a href="#连接点" class="headerlink" title="连接点"></a>连接点</h4><p>这是一个逻辑概念：把方法排成一排，每个横切位置看成x轴方向，方法由上到下执行的顺序看成y轴方向，x轴和y轴交叉点就是连接点。</p>
<p>简单来说：<strong>就是Spring允许你使用通知的地方</strong></p>
<h4 id="切入点"><a href="#切入点" class="headerlink" title="切入点"></a>切入点</h4><p>定位连接点的方式。每个类的方法都有多个连接点（连接点是客观存在的事物）</p>
<p>Spring的AOP技术可以<strong>通过切入点，定位到特定的连接点</strong></p>
<h3 id="基于注解的AOP"><a href="#基于注解的AOP" class="headerlink" title="基于注解的AOP"></a>基于注解的AOP</h3><h4 id="技术说明"><a href="#技术说明" class="headerlink" title="技术说明"></a>技术说明</h4><pre class="mermaid">graph TB;
    subgraph Spring基于注解的AOP;
        AspectJ注解层
        subgraph 具体实现层;
            动态代理
            cglib
        end
    end</pre>

<img lazyload="" src="/images/loading.svg" data-src="https://s2.loli.net/2023/06/16/AQh2eMS79mIv4Xs.png" alt="image-20221216132844066" style="zoom:50%;">

<ul>
<li><p>动态代理分为<strong>JDK动态代理</strong>，<strong>cglib动态代理</strong>。有接口的情况可以使用<strong>JDK动态代理</strong>或<strong>cglib动态代理</strong>；没有接口只能使用<strong>cglib动态代理</strong></p>
<ul>
<li><strong>JDK动态代理</strong>：JDK原生的实现方式，被代理的目标类必须实现接口</li>
<li><strong>cglib动态代理</strong>：通过继承被代理的目标类实现代理，不需要目标实现接口</li>
</ul>
</li>
<li><p><strong>JDK动态代理</strong>生成的代理类会在com.sum.proxy包下，类名为$proxy1，和目标方法实现了相同的接口</p>
</li>
<li><p><strong>cglib动态代理</strong>生成的代理类会和目标方法在相同的包下，会继承目标类</p>
</li>
</ul>
<h4 id="所需依赖"><a href="#所需依赖" class="headerlink" title="所需依赖"></a>所需依赖</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring-aop</span><br><span class="line">spring-aspects</span><br></pre></td></tr></table></figure></div>

<h4 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h4><p>配置切面类</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogAspect</span> {</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before("execution(public int org.example.aop.CalculatorImpl.*(..))")</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeMethod</span><span class="params">(JoinPoint joinPoint)</span> {</span><br><span class="line">        </span><br><span class="line">        <span class="type">Signature</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature();</span><br><span class="line">        Object[] args = joinPoint.getArgs();</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">"LogAspect.beforeMethod methodName="</span> + methodName + <span class="string">", args="</span> + Arrays.toString(args));</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h4 id="各种通知"><a href="#各种通知" class="headerlink" title="各种通知"></a>各种通知</h4><p><code>@Before</code>：前置通知，目标方法执行前</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Before("...")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeMethod</span><span class="params">(JoinPoint joinPoint)</span></span><br></pre></td></tr></table></figure></div>

<p><code>@AfterReturning</code>：返回通知，目标方法成功后</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@AfterReturning("...")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturningMethod</span><span class="params">(JoinPoint joinPoint, Object result)</span></span><br></pre></td></tr></table></figure></div>

<p><code>@AfterThrowing</code>：异常通知，目标方法异常结束后</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@AfterThrowing("...")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterThrowingMethod</span><span class="params">(JoinPoint joinPoint, Throwable ex)</span></span><br></pre></td></tr></table></figure></div>

<p><code>@After</code>：后置通知，目标方法最终结束后</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@After("...")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterMethod</span><span class="params">(JoinPoint joinPoint)</span></span><br></pre></td></tr></table></figure></div>

<p><code>@Around</code>：环绕通知</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Around("...")</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">aroundMethod</span><span class="params">(ProceedingJoinPoint joinPoint)</span> {</span><br><span class="line">    <span class="keyword">try</span> {</span><br><span class="line">        result = joinPoint.proceed();</span><br><span class="line">    } <span class="keyword">catch</span> (Throwable throwable) {</span><br><span class="line">        throwable.printStackTrace();</span><br><span class="line">    } <span class="keyword">finally</span> {</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>执行顺序（5.3.x版本以后）：前置通知-&gt;目标操作-&gt;返回通知/异常通知-&gt;后置通知</p>
<h4 id="切入点表达式"><a href="#切入点表达式" class="headerlink" title="切入点表达式"></a>切入点表达式</h4><p><img lazyload="" src="/images/loading.svg" data-src="https://s2.loli.net/2023/06/16/crdRw458ZBFuz2j.png" alt="img025"></p>
<blockquote>
<p>补：</p>
<p>如果要明确返回值类型，必须写明权限修饰符</p>
<p>在方法参数列表部分，使用(int,..)表示参数列表以一个int类型的参数开头</p>
</blockquote>
<h4 id="重用切入点"><a href="#重用切入点" class="headerlink" title="重用切入点"></a>重用切入点</h4><p>声明切入点</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Pointcut("execution(* org.example.aop.*.*(..))")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pointCut</span><span class="params">()</span>{}</span><br></pre></td></tr></table></figure></div>

<p>在同一个类中使用</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Before("pointCut()")</span></span><br></pre></td></tr></table></figure></div>

<p>在不同类中使用</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Before("org.example.aop.CommonPointCut.pointCut()")</span></span><br></pre></td></tr></table></figure></div>

<h4 id="切面的优先级"><a href="#切面的优先级" class="headerlink" title="切面的优先级"></a>切面的优先级</h4><p>使用@Order注解可以控制切面的优先级：</p>
<ul>
<li><code>@Order</code>(较小的数)：优先级高，外面</li>
<li><code>@Order</code>(较大的数)：优先级低，内层</li>
</ul>
<img lazyload="" src="/images/loading.svg" data-src="https://s2.loli.net/2023/06/16/znJUXcBQFKuTYiO.png" alt="img026" style="zoom: 50%;">

<h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>事务：一个数据库操作序列，这些操作要么全部执行，要么全部不执行</p>
<p>特性：ACID（原子性，一致性，隔离性，持久性）</p>
<h3 id="jdbcTemplate"><a href="#jdbcTemplate" class="headerlink" title="jdbcTemplate"></a>jdbcTemplate</h3><p><code>jdbcTemplate</code>是Spring对JDBC的封装</p>
<p>所需依赖：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring-jdbc</span><br><span class="line">mysql-connector-java</span><br></pre></td></tr></table></figure></div>

<p>容器中配置<code>jdbcTemplate</code></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan("org.example")</span></span><br><span class="line"><span class="comment">// 开启事务管理功能</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcConfig</span> {</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 数据源</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    DataSource <span class="title function_">dataSource</span><span class="params">()</span> {</span><br><span class="line">        <span class="type">HikariDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HikariDataSource</span>();</span><br><span class="line">        dataSource.setJdbcUrl(<span class="string">"jdbc:mysql://localhost:3306/flask?characterEncoding=utf8&amp;useSSL=false"</span>);</span><br><span class="line">        dataSource.setUsername(<span class="string">"root"</span>);</span><br><span class="line">        dataSource.setPassword(<span class="string">"122599"</span>);</span><br><span class="line">        dataSource.setDriverClassName(<span class="string">"com.mysql.cj.jdbc.Driver"</span>);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    }</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 事务管理器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSourceTransactionManager <span class="title function_">transactionManager</span><span class="params">(DataSource datasource)</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DataSourceTransactionManager</span>(datasource);</span><br><span class="line">    }</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// jdbcTemplate</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    JdbcTemplate <span class="title function_">jdbcTemplate</span><span class="params">(DataSource dataSource)</span> {</span><br><span class="line">        <span class="type">JdbcTemplate</span> <span class="variable">jdbcTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdbcTemplate</span>();</span><br><span class="line">        jdbcTemplate.setDataSource(dataSource);</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>使用<code>jdbcTemplate</code>（细节略）</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 添加</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">"insert into t_emp values(null,?,?,?)"</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> jdbcTemplate.update(sql, <span class="string">"xdy"</span>, <span class="number">23</span>, <span class="string">"男"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">"update t_emp set name=? where id=?"</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> jdbcTemplate.update(sql, <span class="string">"xdy"</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">"delete from t_emp where id=?"</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> jdbcTemplate.update(sql, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询一</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">"select * from t_emp where id=?"</span>;</span><br><span class="line"><span class="type">Emp</span> <span class="variable">empResult</span> <span class="operator">=</span> jdbcTemplate.queryForObject(sql, </span><br><span class="line">                                            (rs, rowNum) -&gt; {</span><br><span class="line">                                                <span class="type">Emp</span> <span class="variable">emp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Emp</span>();</span><br><span class="line">                                                emp.setId(rs.getInt(<span class="string">"id"</span>));</span><br><span class="line">                                                emp.setName(rs.getString(<span class="string">"name"</span>));</span><br><span class="line">                                                emp.setAge(rs.getInt(<span class="string">"age"</span>));</span><br><span class="line">                                                emp.setSex(rs.getString(<span class="string">"sex"</span>));</span><br><span class="line">                                                <span class="keyword">return</span> emp;</span><br><span class="line">                                            }, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询二</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">"select * from t_emp where id=?"</span>;</span><br><span class="line"><span class="type">Emp</span> <span class="variable">emp</span> <span class="operator">=</span> jdbcTemplate.queryForObject(sql, <span class="keyword">new</span> <span class="title class_">BeanPropertyRowMapper</span>&lt;&gt;(Emp.class), <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询三</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">"select * from t_emp"</span>;</span><br><span class="line">List&lt;Emp&gt; list = jdbcTemplate.query(sql, <span class="keyword">new</span> <span class="title class_">BeanPropertyRowMapper</span>&lt;&gt;(Emp.class));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询四</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">"select count(id) from t_emp"</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> jdbcTemplate.queryForObject(sql, Integer.class);</span><br></pre></td></tr></table></figure></div>

<h3 id="编程式事务"><a href="#编程式事务" class="headerlink" title="编程式事务"></a>编程式事务</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> ...;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">try</span> {</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 开启事务：关闭事务的自动提交</span></span><br><span class="line">    conn.setAutoCommit(<span class="literal">false</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 核心操作</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 提交事务</span></span><br><span class="line">    conn.commit();</span><br><span class="line">    </span><br><span class="line">} <span class="keyword">catch</span>(Exception e){</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 回滚事务</span></span><br><span class="line">    conn.rollBack();</span><br><span class="line">    </span><br><span class="line">} <span class="keyword">finally</span>{</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 释放数据库连接</span></span><br><span class="line">    conn.close();</span><br><span class="line">    </span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>框架可以将固定模式抽取出来，进行封装</p>
</blockquote>
<h3 id="声明式事务"><a href="#声明式事务" class="headerlink" title="声明式事务"></a>声明式事务</h3><blockquote>
<p>记得先配置好事务管理（前面有）</p>
</blockquote>
<p><code>@Transactional</code>注解可以标注在类或者方法上</p>
<h4 id="只读操作"><a href="#只读操作" class="headerlink" title="只读操作"></a>只读操作</h4><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional(readOnly = true)</span></span><br></pre></td></tr></table></figure></div>

<h4 id="超时回滚"><a href="#超时回滚" class="headerlink" title="超时回滚"></a>超时回滚</h4><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional(timeout = 3)</span></span><br></pre></td></tr></table></figure></div>

<h4 id="回滚策略"><a href="#回滚策略" class="headerlink" title="回滚策略"></a>回滚策略</h4><p>针对具体的异常</p>
<ul>
<li>注意：声明式事务只针对运行时异常</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 只有指定的异常才回滚</span></span><br><span class="line"><span class="meta">@Transactional(rollbackFor = ArithmeticException.class)</span></span><br><span class="line"><span class="meta">@Transactional(rollbackForClassName ="java.lang.ArithmeticException")</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定的异常不回滚</span></span><br><span class="line"><span class="meta">@Transactional(noRollbackFor = ArithmeticException.class)</span></span><br><span class="line"><span class="meta">@Transactional(noRollbackForClassName ="java.lang.ArithmeticException")</span></span><br></pre></td></tr></table></figure></div>

<h4 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h4><p><code>READ_UNCOMMITTED</code>：有脏读的问题（读到了未提交的数据）</p>
<p><code>READ_COMMITTED</code>：有不可重复读的问题（前后两次读取结果不同）</p>
<p><code>REPEATABLE_READ</code>：有幻读的问题（前一次查询没有，后一次查询又有了）</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional(isolation = Isolation.DEFAULT)</span>			<span class="comment">//使用数据库默认的隔离级别</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Transactional(isolation = Isolation.READ_UNCOMMITTED)</span>	<span class="comment">//读未提交，允许A读取B更新但未提交的修改</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Transactional(isolation = Isolation.READ_COMMITTED)</span>	<span class="comment">//读已提交，A只能读取B已提交的修改</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Transactional(isolation = Isolation.REPEATABLE_READ)</span>	<span class="comment">//可重复读，A可以多次读到相同的值，也即A执行期间禁止修改（MySQL默认）</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Transactional(isolation = Isolation.SERIALIZABLE)</span>		<span class="comment">//串行化，A执行期间，禁止其他事务对表增删改</span></span><br></pre></td></tr></table></figure></div>

<h4 id="传播行为"><a href="#传播行为" class="headerlink" title="传播行为"></a>传播行为</h4><p>A设定了事务，B也设定了事务。A方法中调B方法，事务是如何传递的：</p>
<ul>
<li><code>REQUIRED</code>：没有就新建，有就加入</li>
<li><code>SUPPORTS</code>：有就加入，没有就不管了（以非事务方式运行）</li>
<li><code>MANDATORY</code>：有就加入，没有就抛异常</li>
<li><code>REQUIRES_NEW</code>：不管有没有，直接开启一个新事务，开启的新事务和之前的事务不存在嵌套关系，之前事务被挂起</li>
<li><code>NOT_SUPPORTED</code>：挂起当前事务，以非事务方式运行</li>
<li><code>NEVER</code>：不支持事务，存在就抛异常</li>
<li><code>NESTED</code>：有事务的话，就嵌套一个独立的事务，嵌套的事务可以独立提交和回滚。没有事务的话和<code>REQUIRED</code>一样</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 结账</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkout</span><span class="params">(Integer[] bookIds, Integer userId)</span> {</span><br><span class="line">    <span class="keyword">for</span> (Integer bookId : bookIds) {</span><br><span class="line">        <span class="comment">// 调用buyBook</span></span><br><span class="line">        buyBook(bookId, userId);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p><code>REQUIRED</code>：加入原有事务，只要有一本买不起，就全购买失败</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 买一本书</span></span><br><span class="line"><span class="meta">@Transactional(propagation = Propagation.REQUIRED)</span> <span class="comment">// 加入原有事务中</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buyBook</span><span class="params">(Integer bookId, Integer userId)</span>{</span><br><span class="line">    checkoutService.checkout(bookIds, userId);</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p><code>REQUIRES_NEW</code>：开启新事务，可以一直买书到买不起为止</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 买一本书</span></span><br><span class="line"><span class="meta">@Transactional(propagation = Propagation.REQUIRES_NEW)</span> <span class="comment">// 开启新事务</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buyBook</span><span class="params">(Integer bookId, Integer userId)</span>{</span><br><span class="line">    checkoutService.checkout(bookIds, userId);</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h2 id="资源操作Resource"><a href="#资源操作Resource" class="headerlink" title="资源操作Resource"></a>资源操作Resource</h2><p>给予了访问low-level资源的能力</p>
<h3 id="Resource接口"><a href="#Resource接口" class="headerlink" title="Resource接口"></a>Resource接口</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Resource</span> <span class="keyword">extends</span> <span class="title class_">InputStreamSource</span> {</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 资源是否存在</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">exists</span><span class="params">()</span>;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 资源是否可以通过InputStreamResource读取</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isReadable</span><span class="params">()</span>;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 指示当前资源，是否具有开放流的handle</span></span><br><span class="line">    <span class="comment">// 如果是true，InputStream就不能够多次读取，只能够读取一次并且及时关闭以避免内存泄漏</span></span><br><span class="line">    <span class="comment">// 对于所有常规资源实现，返回false，但是InputStreamResource除外</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isOpen</span><span class="params">()</span>;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 资源是否是一个文件</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isFile</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    URL <span class="title function_">getURL</span><span class="params">()</span> <span class="keyword">throws</span> IOException;</span><br><span class="line"></span><br><span class="line">    URI <span class="title function_">getURI</span><span class="params">()</span> <span class="keyword">throws</span> IOException;</span><br><span class="line">	</span><br><span class="line">    File <span class="title function_">getFile</span><span class="params">()</span> <span class="keyword">throws</span> IOException;</span><br><span class="line"></span><br><span class="line">    ReadableByteChannel <span class="title function_">readableChannel</span><span class="params">()</span> <span class="keyword">throws</span> IOException;</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> <span class="title function_">contentLength</span><span class="params">()</span> <span class="keyword">throws</span> IOException;</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> <span class="title function_">lastModified</span><span class="params">()</span> <span class="keyword">throws</span> IOException;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 创建此资源的相关资源</span></span><br><span class="line">    Resource <span class="title function_">createRelative</span><span class="params">(String relativePath)</span> <span class="keyword">throws</span> IOException;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">getFilename</span><span class="params">()</span>;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 返回描述信息，通常是完全限定的文件名或资源的URL</span></span><br><span class="line">    String <span class="title function_">getDescription</span><span class="params">()</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>Resource接口继承了InputStreamSource接口</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">InputStreamSource</span> {</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 找到并打开资源，返回InputStream以从资源中读取。每次调用都返回新的InputStream()，调用者需关闭每个流</span></span><br><span class="line">    InputStream <span class="title function_">getInputStream</span><span class="params">()</span> <span class="keyword">throws</span> IOException;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h3 id="Resource实现类"><a href="#Resource实现类" class="headerlink" title="Resource实现类"></a>Resource实现类</h3><h4 id="UrlResource"><a href="#UrlResource" class="headerlink" title="UrlResource"></a>UrlResource</h4><p>用来访问网络资源，它支持URL的绝对路径</p>
<ul>
<li>http: 访问基于HTTP协议的网络资源</li>
<li>ftp: 访问基于FTP协议的网络资源</li>
<li>file: 从文件系统中读取</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> {</span><br><span class="line">    <span class="type">UrlResource</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UrlResource</span>(<span class="string">"http://www.baidu.com"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ""</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">filename</span> <span class="operator">=</span> resource.getFilename(); </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// http://www.baidu.com</span></span><br><span class="line">    <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> resource.getURL(); </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// URL [http://www.baidu.com]</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">description</span> <span class="operator">=</span> resource.getDescription(); </span><br><span class="line">    </span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> resource.getInputStream();</span><br><span class="line">    <span class="type">byte</span>[] allBytes = inputStream.readAllBytes();</span><br><span class="line">    <span class="comment">// &lt;!--STATUS OK--&gt;&lt;html&gt; &lt;head&gt;&lt;meta http-equiv=content-type content=text/html;charset=utf-8&gt;&lt;me...</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(allBytes); </span><br><span class="line">    </span><br><span class="line">} <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> {</span><br><span class="line">    <span class="type">UrlResource</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UrlResource</span>(<span class="string">"file:C:/test.txt"</span>);</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// test.txt</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">filename</span> <span class="operator">=</span> resource.getFilename();</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// file:C:/test.txt</span></span><br><span class="line">    <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> resource.getURL();</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// URL [file:C:/test.txt]</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">description</span> <span class="operator">=</span> resource.getDescription();</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// s = hello my name is xuedongyun</span></span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> resource.getInputStream();</span><br><span class="line">    <span class="type">byte</span>[] allBytes = inputStream.readAllBytes();</span><br><span class="line">    <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(allBytes);</span><br><span class="line">    </span><br><span class="line">} <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h4 id="ClassPathResource"><a href="#ClassPathResource" class="headerlink" title="ClassPathResource"></a>ClassPathResource</h4><p>用来访问类加载路径下的资源，可自动搜索位于 classes 下的资源文件，无须使用绝对路径访问</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ClassPathResource</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="string">"test.txt"</span>);</span><br></pre></td></tr></table></figure></div>

<ul>
<li><code>filename</code>：test.txt</li>
<li><code>url</code>：file:/C:/Users/xdy/Desktop/%e5%8d%9a%e5%ae%a2/LearnSpring6/target/classes/test.txt</li>
<li><code>description</code>：class path resource [test.txt]</li>
</ul>
<h4 id="FileSystemResource"><a href="#FileSystemResource" class="headerlink" title="FileSystemResource"></a>FileSystemResource</h4><p>用来访问文件系统资源（并没有太大的优势，因为File 类也可访问文件系统资源）</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//相对路径</span></span><br><span class="line"><span class="type">FileSystemResource</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileSystemResource</span>(<span class="string">"test.txt"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//绝对路径</span></span><br><span class="line"><span class="type">FileSystemResource</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileSystemResource</span>(<span class="string">"C:/test.txt"</span>);</span><br></pre></td></tr></table></figure></div>

<h4 id="ServletContextResource"><a href="#ServletContextResource" class="headerlink" title="ServletContextResource"></a>ServletContextResource</h4><p>这是<code>ServletContext</code>资源的<code>Resource</code>实现，依赖于Servlet容器</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ServletContextResource</span> <span class="variable">src</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServletContextResource</span>(application, <span class="string">"WEB-INF/book.xml"</span>);</span><br></pre></td></tr></table></figure></div>

<h4 id="InputStreamResource"><a href="#InputStreamResource" class="headerlink" title="InputStreamResource"></a>InputStreamResource</h4><p>是给定的输入流<code>InputStream</code>的<code>Resource</code>实现。在没有特定的资源实现的时候使用。与其他Resource实现相比，这是已打开资源的描述符。 因此，它的isOpen()方法返回true。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 一次性输入流资源</span></span><br><span class="line"><span class="type">InputStreamResource</span> <span class="variable">inputStreamResource</span> <span class="operator">=</span> </span><br><span class="line"><span class="keyword">new</span> <span class="title class_">InputStreamResource</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">"C:\\dir\\application.xml"</span>)));</span><br></pre></td></tr></table></figure></div>

<h4 id="ByteArrayResource"><a href="#ByteArrayResource" class="headerlink" title="ByteArrayResource"></a>ByteArrayResource</h4><p>字节数组的Resource实现类。通过给定的数组创建了一个ByteArrayInputStream。它对于从任何给定的字节数组加载内容非常有用，而无需求助于单次使用的InputStreamResource。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[] {<span class="number">127</span>, -<span class="number">128</span>, <span class="number">0</span>, <span class="number">22</span>};</span><br><span class="line"><span class="type">ByteArrayResource</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayResource</span>(bytes);</span><br></pre></td></tr></table></figure></div>

<h3 id="ResourceLoader接口"><a href="#ResourceLoader接口" class="headerlink" title="ResourceLoader接口"></a>ResourceLoader接口</h3><p>该接口<code>getResource</code>方法，可用于获得一个<code>Resource</code>实例。<code>ApplicationContext</code>即实现了这个接口。Spring将采用和<code>ApplicationContext</code>相同的策略来访问资源。</p>
<ul>
<li>如果<code>ApplicationContext</code>是<code>FileSystemXmlApplicationContext</code>，<code>resource</code>就是<code>FileSystemResource</code>实例；</li>
<li>如果<code>ApplicationContext</code>是<code>ClassPathXmlApplicationContext</code>，<code>resource</code>就是<code>ClassPathResource</code>实例；</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(MyConfig.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 路径方面，默认采用与ApplicationContext相同的资源访问策略</span></span><br><span class="line"><span class="type">Resource</span> <span class="variable">resource</span> <span class="operator">=</span> context.getResource(<span class="string">"test.txt"</span>);</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>当Spring应用需要进行资源访问时，实际上并不需要直接使用<code>Resource</code>实现类，而是调用<code>ResourceLoader</code>实例的<code>getResource()</code>方法来获得资源，<code>ReosurceLoader</code>将会负责选择<code>Reosurce</code>实现类，从而<strong>将应用程序和具体的资源访问策略分离</strong></p>
<p>另外，使用<code>ApplicationContext</code>访问资源时，可通过不同前缀指定强制使用指定的<code>ClassPathResource</code>、<code>FileSystemResource</code>等实现类</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Resource</span> <span class="variable">res</span> <span class="operator">=</span> ctx.getResource(<span class="string">"calsspath:bean.xml"</span>);</span><br><span class="line"><span class="type">Resrouce</span> <span class="variable">res</span> <span class="operator">=</span> ctx.getResource(<span class="string">"file:bean.xml"</span>);</span><br><span class="line"><span class="type">Resource</span> <span class="variable">res</span> <span class="operator">=</span> ctx.getResource(<span class="string">"http://localhost:8080/beans.xml"</span>);</span><br></pre></td></tr></table></figure></div>
</blockquote>
<h3 id="ResourceLoaderAware接口"><a href="#ResourceLoaderAware接口" class="headerlink" title="ResourceLoaderAware接口"></a>ResourceLoaderAware接口</h3><p>该接口有<code>setResourceLoader()</code>方法。该方法将由Spring容器负责调用，会将一个<code>ResourceLoader</code>对象作为该方法的参数传入。</p>
<p>把实现<code>ResourceLoaderAware</code>接口的类放在容器中，Spring容器会将自身作为<code>setResourceLoader()</code>方法的参数传入。（<code>ApplicationContext</code>实现了<code>ResourceLoader</code>接口）</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestBean</span> <span class="keyword">implements</span> <span class="title class_">ResourceLoaderAware</span> {</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> ResourceLoader resourceLoader;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setResourceLoader</span><span class="params">(<span class="meta">@Nonnull</span> ResourceLoader resourceLoader)</span> {</span><br><span class="line">        <span class="built_in">this</span>.resourceLoader = resourceLoader;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ResourceLoader <span class="title function_">getResourceLoader</span><span class="params">()</span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.resourceLoader;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">TestBean</span> <span class="variable">bean</span> <span class="operator">=</span> context.getBean(TestBean.class);</span><br><span class="line"><span class="type">ResourceLoader</span> <span class="variable">resourceLoader</span> <span class="operator">=</span> bean.getResourceLoader();</span><br><span class="line"><span class="type">Resource</span> <span class="variable">resource</span> <span class="operator">=</span> resourceLoader.getResource(<span class="string">"/test.txt"</span>);</span><br></pre></td></tr></table></figure></div>

<h3 id="依赖注入Resource"><a href="#依赖注入Resource" class="headerlink" title="依赖注入Resource"></a>依赖注入Resource</h3><p><code>Resource</code>可以以字符串形式进行依赖注入，使用file:，http:，ftp:等前缀强制Spring采用对应的资源访问策略。无前缀，则将采用与<code>ApplicationContext</code>相同的资源访问策略</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResourceBean</span> {</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value("classpath:test.txt")</span></span><br><span class="line">    <span class="keyword">private</span> Resource res;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRes</span><span class="params">(Resource res)</span> {</span><br><span class="line">        <span class="built_in">this</span>.res = res;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> Resource <span class="title function_">getRes</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">parse</span><span class="params">()</span> <span class="keyword">throws</span> IOException {</span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(res.getInputStream().readAllBytes()));</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h2 id="数据校验Validation"><a href="#数据校验Validation" class="headerlink" title="数据校验Validation"></a>数据校验Validation</h2><p>在开发过程中，我们经常遇到参数需要校验的需求，比如用户的电话，邮箱等等。Spring Validation是对Hibernate Validator的进一步的封装，方便在Spring中使用。</p>
<p>Spring中的校验方式：</p>
<ul>
<li>实现Validator接口，然后在代码中调用这个类</li>
<li>按照Bean Validation方式（即注解方式）</li>
<li>基于方法实现校验</li>
</ul>
<h3 id="Validator接口"><a href="#Validator接口" class="headerlink" title="Validator接口"></a>Validator接口</h3><p>导入依赖</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">hibernate-validator</span><br><span class="line">jakarta.el</span><br></pre></td></tr></table></figure></div>

<p>实体类</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> {</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// setter和getter省略</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>创建Validator实现类</p>
<ul>
<li>support方法用来判断支持的类型</li>
<li>validate方法设置检验的逻辑，其中ValidationUtils是Spring封装的校验工具类，帮助快速实现校验</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PeopleValidator</span> <span class="keyword">implements</span> <span class="title class_">Validator</span> {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">supports</span><span class="params">(Class&lt;?&gt; clazz)</span> {</span><br><span class="line">        <span class="keyword">return</span> People.class.equals(clazz);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">validate</span><span class="params">(Object target, Errors errors)</span> {</span><br><span class="line">        ValidationUtils.rejectIfEmpty(errors, <span class="string">"name"</span>, <span class="string">"name.empty"</span>);</span><br><span class="line">        <span class="type">People</span> <span class="variable">p</span> <span class="operator">=</span> (People) target;</span><br><span class="line">        <span class="keyword">if</span> (p.getAge() &lt; <span class="number">0</span>) {</span><br><span class="line">            errors.rejectValue(<span class="string">"age"</span>, <span class="string">"error value &lt; 0"</span>);</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (p.getAge() &gt; <span class="number">110</span>) {</span><br><span class="line">            errors.rejectValue(<span class="string">"age"</span>, <span class="string">"error value too old"</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>使用校验</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建对象</span></span><br><span class="line"><span class="type">People</span> <span class="variable">people</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">People</span>();</span><br><span class="line">people.setName(<span class="string">"xdy"</span>);</span><br><span class="line">people.setAge(-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建People对象对应的DataBinder</span></span><br><span class="line"><span class="type">DataBinder</span> <span class="variable">binder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataBinder</span>(people);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置校验器</span></span><br><span class="line">binder.setValidator(<span class="keyword">new</span> <span class="title class_">PeopleValidator</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 校验</span></span><br><span class="line">binder.validate();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获得结果</span></span><br><span class="line"><span class="type">BindingResult</span> <span class="variable">result</span> <span class="operator">=</span> binder.getBindingResult();</span><br><span class="line">System.out.println(<span class="string">"result.getAllErrors() = "</span> + result.getAllErrors());</span><br></pre></td></tr></table></figure></div>

<h3 id="Bean-Validation注解"><a href="#Bean-Validation注解" class="headerlink" title="Bean Validation注解"></a>Bean Validation注解</h3><p>需要将<code>ValidatorFactory</code>和<code>Validator</code>注入到容器中。Spring中默认有一个实现类<code>LocalValidatorFactoryBean</code>，实现了上述接口。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan("org.example")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfig</span> {</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    LocalValidatorFactoryBean <span class="title function_">localValidatorFactoryBean</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LocalValidatorFactoryBean</span>();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>实体类使用注解定义校验规则</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">People</span> {</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Min(0)</span></span><br><span class="line">    <span class="meta">@Max(120)</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// getter和setter省略</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<table>
<thead>
<tr>
<th>注解</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>@NotNull</td>
<td>限制必须不为null</td>
</tr>
<tr>
<td>@NotEmpty</td>
<td>只作用于字符串类型，字符串不为空，并且长度不为0</td>
</tr>
<tr>
<td>@NotBlank</td>
<td>只作用于字符串类型，字符串不为空，并且trim()后不为空串</td>
</tr>
<tr>
<td>@DecimalMax(value)</td>
<td>限制必须为一个不大于指定值的数字</td>
</tr>
<tr>
<td>@DecimalMin(value)</td>
<td>限制必须为一个不小于指定值的数字</td>
</tr>
<tr>
<td>@Max(value)</td>
<td>限制必须为一个不大于指定值的数字</td>
</tr>
<tr>
<td>@Min(value)</td>
<td>限制必须为一个不小于指定值的数字</td>
</tr>
<tr>
<td>@Pattern(value)</td>
<td>限制必须符合指定的正则表达式</td>
</tr>
<tr>
<td>@Size(max,min)</td>
<td>限制字符长度必须在min到max之间</td>
</tr>
<tr>
<td>@Email</td>
<td>验证注解的元素值是Email，也可以通过正则表达式和flag指定自定义的email格式</td>
</tr>
</tbody></table>
<p>方法一：使用<code>jakarta.validation.Validator</code>校验</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> Validator validator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">validatePeople</span><span class="params">(People people)</span> {</span><br><span class="line">    Set&lt;ConstraintViolation&lt;People&gt;&gt; violations = validator.validate(people);</span><br><span class="line">    <span class="keyword">return</span>  violations.isEmpty();</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>方法二：使用<code>org.springframework.validation.Validator</code>校验</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> Validator validator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">validatePeople</span><span class="params">(People people)</span> {</span><br><span class="line">    <span class="comment">// 第二个参数是bean的名字，用于输出错误信息等，不重要</span></span><br><span class="line">    <span class="type">BindException</span> <span class="variable">bindException</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BindException</span>(people, people.getName());</span><br><span class="line">    validator.validate(people, bindException);</span><br><span class="line">    <span class="keyword">return</span> bindException.hasErrors();</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h3 id="基于方法实现校验"><a href="#基于方法实现校验" class="headerlink" title="基于方法实现校验"></a>基于方法实现校验</h3><p>向容器中配置<code>MethodValidationPostProcessor</code></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan("org.example")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfig</span> {</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MethodValidationPostProcessor <span class="title function_">validationPostProcessor</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MethodValidationPostProcessor</span>();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>实体类上使用注解定义校验</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">People</span> {</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Min(0)</span></span><br><span class="line">    <span class="meta">@Max(120)</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// getter和setter省略</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>在需要使用的地方，通过注解标注函数参数（类需要加上<code>@Validated</code>注解）</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PeopleService</span> {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">testParams</span><span class="params">(<span class="meta">@NotNull</span> <span class="meta">@Valid</span> People people)</span> {</span><br><span class="line">        <span class="keyword">return</span> people.toString();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>使用时，如果校验不通过，会抛出<code>ConstraintViolationException</code>错误</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> peopleService.testParams(people);</span><br></pre></td></tr></table></figure></div>

<h3 id="实现自定义校验"><a href="#实现自定义校验" class="headerlink" title="实现自定义校验"></a>实现自定义校验</h3><p>编写校验逻辑，实现<code>ConstraintValidator</code>接口</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CannotBlankValidator</span> <span class="keyword">implements</span> <span class="title class_">ConstraintValidator</span>&lt;CannotBlank, String&gt; {</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initialize</span><span class="params">(CannotBlank constraintAnnotation)</span> {</span><br><span class="line">        ConstraintValidator.<span class="built_in">super</span>.initialize(constraintAnnotation);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(String value, ConstraintValidatorContext context)</span> {</span><br><span class="line">        <span class="keyword">if</span> (value.contains(<span class="string">" "</span>)) {</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 获取默认提示信息（也即注解中的message()），可以如下操作更改默认提示信息</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">template</span> <span class="operator">=</span> context.getDefaultConstraintMessageTemplate();</span><br><span class="line">            System.out.println(<span class="string">"template = "</span> + template);</span><br><span class="line">            <span class="comment">// 禁用默认提示信息</span></span><br><span class="line">            context.disableDefaultConstraintViolation();</span><br><span class="line">            <span class="comment">// 设置提示语</span></span><br><span class="line">            context.buildConstraintViolationWithTemplate(<span class="string">"can not contains blank"</span>).addConstraintViolation();</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>编写自定义注解</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target({ElementType.METHOD, ElementType.FIELD, ElementType.ANNOTATION_TYPE, ElementType.CONSTRUCTOR, ElementType.PARAMETER})</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Constraint(validatedBy = {CannotBlankValidator.class})</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> CannotBlank {</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 默认错误消息</span></span><br><span class="line">    String <span class="title function_">message</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">"不能包含空格"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 分组</span></span><br><span class="line">    Class&lt;?&gt;[] groups() <span class="keyword">default</span> {};</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 负载</span></span><br><span class="line">    Class&lt;? <span class="keyword">extends</span> <span class="title class_">Payload</span>&gt;[] payload() <span class="keyword">default</span> {};</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用来解决一个元素上不能标多个@CannotBlank的问题</span></span><br><span class="line">    <span class="meta">@Target({ElementType.METHOD, ElementType.FIELD, ElementType.ANNOTATION_TYPE, ElementType.CONSTRUCTOR, ElementType.PARAMETER, ElementType.TYPE_USE})</span></span><br><span class="line">    <span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line">    <span class="meta">@Documented</span></span><br><span class="line">    <span class="meta">@interface</span> List {</span><br><span class="line">        CannotBlank[] value();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>List的写法让我们可以在参数上标注多个相同注解（此处没什么用，仅作展示）</p>
</blockquote>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@CannotBlank</span>.List({</span><br><span class="line">    <span class="meta">@CannotBlank()</span>,</span><br><span class="line">    <span class="meta">@CannotBlank()</span></span><br><span class="line">})</span><br><span class="line"><span class="keyword">private</span> String name;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>java</category>
        <category>Spring</category>
      </categories>
  </entry>
  <entry>
    <title>手写实现Spring中的IoC</title>
    <url>//post/35893/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>依赖反转（IoC）是Spring中一个非常重要的功能。我们基于java反射机制，来尝试实现一个简单的IoC。</p>
<p>原文地址：<a href="https://xuedongyun.cn/post/35893/">https://xuedongyun.cn/post/35893/</a></p>
<h2 id="回顾反射"><a href="#回顾反射" class="headerlink" title="回顾反射"></a>回顾反射</h2><h4 id="获取Class对象"><a href="#获取Class对象" class="headerlink" title="获取Class对象"></a>获取Class对象</h4><ol>
<li>类名.class</li>
</ol>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Car.class;</span><br></pre></td></tr></table></figure></div>

<ol start="2">
<li>对象.getClass</li>
</ol>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Car</span> <span class="variable">car</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Car</span>();</span><br><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> car.getClass();</span><br></pre></td></tr></table></figure></div>

<ol start="3">
<li>Class.forName + 全类名</li>
</ol>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">"com.xuedongyun.project.Car"</span>);</span><br></pre></td></tr></table></figure></div>

<h3 id="获取构造方法"><a href="#获取构造方法" class="headerlink" title="获取构造方法"></a>获取构造方法</h3><ol>
<li>获取所有构造方法</li>
</ol>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// public</span></span><br><span class="line">Constructor[] constructors = clazz.getConstructors();</span><br><span class="line"></span><br><span class="line"><span class="comment">// public 和 private</span></span><br><span class="line">Constructor[] constructors = clazz.getDeclaredConstructors();</span><br></pre></td></tr></table></figure></div>

<ol start="3">
<li>指定获取有参构造器</li>
</ol>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// public</span></span><br><span class="line"><span class="type">Constructor</span> <span class="variable">c</span> <span class="operator">=</span> clazz.getConstructor(String.class, <span class="type">int</span>.class, String.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 无参构造器不写参数即可</span></span><br><span class="line"><span class="type">Constructor</span> <span class="variable">c</span> <span class="operator">=</span> clazz.getConstructor();</span><br><span class="line"></span><br><span class="line"><span class="comment">// public 和 private</span></span><br><span class="line"><span class="type">Constructor</span> <span class="variable">c</span> <span class="operator">=</span> clazz.getDeclaredConstructor(String.class, <span class="type">int</span>.class, String.class);</span><br></pre></td></tr></table></figure></div>

<ol start="4">
<li>创建对象</li>
</ol>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置允许访问</span></span><br><span class="line">constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">Car</span> <span class="variable">car</span> <span class="operator">=</span> constructor.newInstance();</span><br></pre></td></tr></table></figure></div>

<h3 id="获取属性"><a href="#获取属性" class="headerlink" title="获取属性"></a>获取属性</h3><ol>
<li>获取所有属性</li>
</ol>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// public</span></span><br><span class="line">Field[] fields = clazz.getFields();</span><br><span class="line"></span><br><span class="line"><span class="comment">// public 和 private</span></span><br><span class="line">Field[] fields = clazz.getDeclaredFields();</span><br></pre></td></tr></table></figure></div>

<ol start="2">
<li>获取某个属性</li>
</ol>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// public</span></span><br><span class="line"><span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> clazz.getField(<span class="string">"name"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// public 和 private</span></span><br><span class="line"><span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">"name"</span>);</span><br></pre></td></tr></table></figure></div>

<ol start="3">
<li>修改属性</li>
</ol>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置允许访问</span></span><br><span class="line">field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">field.set(car,<span class="string">"五菱宏光"</span>);</span><br></pre></td></tr></table></figure></div>

<h3 id="获取方法"><a href="#获取方法" class="headerlink" title="获取方法"></a>获取方法</h3><ol>
<li>获取所有方法</li>
</ol>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// public</span></span><br><span class="line">Method[] methods = clazz.getMethods();</span><br><span class="line"></span><br><span class="line"><span class="comment">// public 和 private</span></span><br><span class="line">Method[] methods = clazz.getDeclaredMethods();</span><br></pre></td></tr></table></figure></div>

<ol start="2">
<li>获得某一个方法</li>
</ol>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// public</span></span><br><span class="line"><span class="type">Method</span> <span class="variable">m</span> <span class="operator">=</span> clazz.getMethod(<span class="string">"func"</span>, String.class, <span class="type">int</span>.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">// public 和 private</span></span><br><span class="line"><span class="type">Method</span> <span class="variable">m</span> <span class="operator">=</span> clazz.getDeclaredMethod(<span class="string">"func"</span>, String.class, <span class="type">int</span>.class);</span><br></pre></td></tr></table></figure></div>

<ol start="3">
<li>执行方法</li>
</ol>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置允许访问</span></span><br><span class="line">m.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> m.invoke(car, <span class="string">"test"</span>, <span class="number">123</span>);</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>int.class表示基本数据类型int的Class对象，以便在反射时使用。它等价于Integer.TYPE</p>
</blockquote>
<h2 id="实现Spring的IoC"><a href="#实现Spring的IoC" class="headerlink" title="实现Spring的IoC"></a>实现Spring的IoC</h2><h3 id="创建所需的注解"><a href="#创建所需的注解" class="headerlink" title="创建所需的注解"></a>创建所需的注解</h3><p>Bean注解</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.annotation;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Bean {</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>依赖注入的注解</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.annotation;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(ElementType.FIELD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Autowired {</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h3 id="定义IoC容器"><a href="#定义IoC容器" class="headerlink" title="定义IoC容器"></a>定义IoC容器</h3><p>定义容器接口</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.context;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ApplicationContext</span> {</span><br><span class="line">    Object <span class="title function_">getBean</span><span class="params">(Class&lt;?&gt; clazz)</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>定义容器实现类</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.context;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnnotationApplicationContext</span> <span class="keyword">implements</span> <span class="title class_">ApplicationContext</span>{</span><br><span class="line">    <span class="keyword">private</span> Map&lt;Class&lt;?&gt;, Object&gt; beanFactory =  <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AnnotationApplicationContext</span><span class="params">(String basePackage)</span> {</span><br><span class="line">		<span class="comment">// TODO</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getBean</span><span class="params">(Class&lt;?&gt; clazz)</span> {</span><br><span class="line">        <span class="keyword">return</span> beanFactory.get(clazz);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h3 id="扫描Bean功能"><a href="#扫描Bean功能" class="headerlink" title="扫描Bean功能"></a>扫描Bean功能</h3><p>获取<code>packageDirName</code>的绝对路径</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">AnnotationApplicationContext</span><span class="params">(String basePackage)</span> {</span><br><span class="line">    <span class="type">String</span> <span class="variable">packageDirName</span> <span class="operator">=</span> basePackage.replace(<span class="string">"."</span>, <span class="string">"\\"</span>);</span><br><span class="line">    <span class="keyword">try</span> {</span><br><span class="line">        Enumeration&lt;URL&gt; dirs = Thread.currentThread().getContextClassLoader().getResources(packageDirName);</span><br><span class="line">        <span class="keyword">while</span> (dirs.hasMoreElements()) {</span><br><span class="line">            <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> dirs.nextElement();</span><br><span class="line">            <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> URLDecoder.decode(url.getFile(), StandardCharsets.UTF_8);</span><br><span class="line">            <span class="type">String</span> <span class="variable">rootPath</span> <span class="operator">=</span> filePath.substring(<span class="number">0</span>, filePath.length() - packageDirName.length());</span><br><span class="line">            loadBean(<span class="keyword">new</span> <span class="title class_">File</span>(rootPath));</span><br><span class="line">        }</span><br><span class="line">    } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>遍历所有.class文件，若标注有<code>@Bean</code>注解，则将其实例化</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">loadBean</span><span class="params">(File fileParent, String rootPath)</span> {</span><br><span class="line">    <span class="comment">// 遍历所有子文件</span></span><br><span class="line">    <span class="keyword">if</span> (fileParent.isDirectory()) {</span><br><span class="line">        File[] childFiles = fileParent.listFiles();</span><br><span class="line">        <span class="keyword">if</span> (childFiles == <span class="literal">null</span> || childFiles.length == <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 子文件若为文件夹，递归访问</span></span><br><span class="line">        <span class="keyword">for</span> (File childFile : childFiles) {</span><br><span class="line">            <span class="keyword">if</span> (childFile.isDirectory()) {</span><br><span class="line">                loadBean(childFile, rootPath);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">// 获得文件相对路径</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">pathWithClass</span> <span class="operator">=</span> childFile.getAbsolutePath().substring(rootPath.length() - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (!pathWithClass.contains(<span class="string">".class"</span>)) {</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                <span class="comment">// 对所有.class文件，获得其类路径</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">fullName</span> <span class="operator">=</span> pathWithClass.replace(<span class="string">"\\"</span>, <span class="string">"."</span>).replace(<span class="string">".class"</span>, <span class="string">""</span>);</span><br><span class="line">                Class&lt;?&gt; clazz = Class.forName(fullName);</span><br><span class="line">                <span class="keyword">if</span> (clazz.isAnnotation() || clazz.isInterface()) {</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                }</span><br><span class="line">                <span class="comment">// 如果标注了@Bean注解，放入容器中</span></span><br><span class="line">                <span class="type">Bean</span> <span class="variable">annotation</span> <span class="operator">=</span> clazz.getAnnotation(Bean.class);</span><br><span class="line">                <span class="keyword">if</span> (annotation != <span class="literal">null</span>) {</span><br><span class="line">                    <span class="type">Object</span> <span class="variable">instance</span> <span class="operator">=</span> clazz.getConstructor().newInstance();</span><br><span class="line">                    <span class="comment">// 如果实现了接口，以接口为key</span></span><br><span class="line">                    <span class="keyword">if</span> (clazz.getInterfaces().length &gt; <span class="number">0</span>) {</span><br><span class="line">                        beanFactory.put(clazz.getInterfaces()[<span class="number">0</span>], instance);</span><br><span class="line">                    } <span class="keyword">else</span> {</span><br><span class="line">                        beanFactory.put(clazz, instance);</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h3 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">AnnotationApplicationContext</span><span class="params">(String basePackage)</span> {</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 所有Bean放入容器后，执行依赖注入</span></span><br><span class="line">    loadDi();</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>实现依赖注入</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">loadDi</span><span class="params">()</span> {</span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;Class&lt;?&gt;, Object&gt; entry : beanFactory.entrySet()) {</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> entry.getValue();</span><br><span class="line">        Class&lt;?&gt; clazz = obj.getClass();</span><br><span class="line">        Field[] fields = clazz.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (Field field : fields) {</span><br><span class="line">            <span class="type">Autowired</span> <span class="variable">annotation</span> <span class="operator">=</span> field.getAnnotation(Autowired.class);</span><br><span class="line">            <span class="keyword">if</span> (annotation != <span class="literal">null</span>) {</span><br><span class="line">                field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                <span class="keyword">try</span> {</span><br><span class="line">                    field.set(obj, beanFactory.get(field.getType()));</span><br><span class="line">                } <span class="keyword">catch</span> (IllegalAccessException e) {</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.test;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Pet</span> {</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">"dodo"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Pet{"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'}'</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.test;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> {</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Pet pet;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">"xdy"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User{"</span> +</span><br><span class="line">                <span class="string">"pet="</span> + pet +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'}'</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationApplicationContext</span>(<span class="string">"org.example"</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">bean</span> <span class="operator">=</span> context.getBean(User.class);</span><br><span class="line">        System.out.println(<span class="string">"bean = "</span> + bean);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>java</category>
        <category>Spring</category>
      </categories>
  </entry>
  <entry>
    <title>脏读，不可重复读，幻读以及四种隔离级别</title>
    <url>//post/64889/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在事务中，我们常听到脏读，不可重复读，幻读这三种概念。本文将根据例子来讨论这三种问题。同时，再依次谈谈解决上述问题的三种隔离级别。<br>原文地址：<a href="https://xuedongyun.cn/post/64889/">https://xuedongyun.cn/post/64889/</a></p>
<h2 id="脏读"><a href="#脏读" class="headerlink" title="脏读"></a>脏读</h2><h3 id="脏读的定义"><a href="#脏读的定义" class="headerlink" title="脏读的定义"></a>脏读的定义</h3><p>脏读，又称为<strong>“读未提交”</strong>，就是事务A读取到了事务B<strong>已修改但未提交</strong>的数据</p>
<p>我们来看一个例子：假设age原本是13。事务B修改age后，被事务A读到了，但是事务B最后回滚了。也就是说，事务A读到了事务B修改但未提交的数据。</p>
<table>
<thead>
<tr>
<th>事务A</th>
<th>事务B</th>
</tr>
</thead>
<tbody><tr>
<td>开始事务</td>
<td>开始事务</td>
</tr>
<tr>
<td></td>
<td>修改age（从13改为23）</td>
</tr>
<tr>
<td>查询age（age=23）</td>
<td></td>
</tr>
<tr>
<td>commit</td>
<td>rollback（回滚，age实际上还是13）</td>
</tr>
</tbody></table>
<h3 id="解决脏读的隔离级别"><a href="#解决脏读的隔离级别" class="headerlink" title="解决脏读的隔离级别"></a>解决脏读的隔离级别</h3><p>我们可以使用<code>READ COMMITTED</code>这个隔离级别来解决脏读的问题。<code>READ COMMITTED</code>要求事务A只能读取其他事务<strong>已提交的修改</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional(isolation = Isolation.READ_COMMITTED)</span></span><br></pre></td></tr></table></figure></div>

<h2 id="不可重复读"><a href="#不可重复读" class="headerlink" title="不可重复读"></a>不可重复读</h2><h3 id="不可重复读的定义"><a href="#不可重复读的定义" class="headerlink" title="不可重复读的定义"></a>不可重复读的定义</h3><p>不可重复读，又称为<strong>“读已提交”</strong>，就是事务A中多次读取数据，读取到的结果不一样</p>
<p>我们来看一个例子：在事务A中，先查询了一次，age=13。此时事务B修改并提交。在事务A中，又查询了一次，此时事务B已提交，所以能成功读取，但此时age=23，已经和之前不一致了</p>
<table>
<thead>
<tr>
<th>事务A</th>
<th>事务B</th>
</tr>
</thead>
<tbody><tr>
<td>开始事务</td>
<td>开始事务</td>
</tr>
<tr>
<td>查询age（age=13）</td>
<td></td>
</tr>
<tr>
<td></td>
<td>修改age（从13改为23）</td>
</tr>
<tr>
<td></td>
<td>commit</td>
</tr>
<tr>
<td>查询age（age=23）</td>
<td></td>
</tr>
<tr>
<td>commit</td>
<td></td>
</tr>
</tbody></table>
<h3 id="解决不可重复读的隔离级别"><a href="#解决不可重复读的隔离级别" class="headerlink" title="解决不可重复读的隔离级别"></a>解决不可重复读的隔离级别</h3><p>我们可以使用<code>REPEATABLE_READ</code>这个隔离级别来解决脏读的问题。<code>READ COMMITTED</code>要求事务A执行时，其他事务<strong>禁止对这个字段进行修改</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional(isolation = Isolation.REPEATABLE_READ)</span></span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>这也是MySQL的默认隔离级别</p>
</blockquote>
<h2 id="幻读"><a href="#幻读" class="headerlink" title="幻读"></a>幻读</h2><h3 id="幻读的定义"><a href="#幻读的定义" class="headerlink" title="幻读的定义"></a>幻读的定义</h3><p>幻读，就是事务A前后两次读取中，事务B插入或者删除数据，从而发生的一种类似幻觉的现象</p>
<p>我们来看一个例子：事务A前后两次查询id=1001的用户，第一次找不到，第二次又找到了。这是因为在两次查询之间，事务B插入了新的数据。（<code>REPEATABLE_READ</code>只限制了不能修改，没有限制增删）</p>
<table>
<thead>
<tr>
<th>事务A</th>
<th>事务B</th>
</tr>
</thead>
<tbody><tr>
<td>开始事务</td>
<td>开始事务</td>
</tr>
<tr>
<td>查询id=1001的用户，发现没找到</td>
<td></td>
</tr>
<tr>
<td></td>
<td>插入id=1001的用户</td>
</tr>
<tr>
<td></td>
<td>commit</td>
</tr>
<tr>
<td>查询id=1001的用户，发现又能找到了</td>
<td></td>
</tr>
<tr>
<td>commit</td>
<td></td>
</tr>
</tbody></table>
<h3 id="解决幻读的隔离级别"><a href="#解决幻读的隔离级别" class="headerlink" title="解决幻读的隔离级别"></a>解决幻读的隔离级别</h3><p>我们可以使用<code>SERIALIZABLE</code>这个隔离级别来解决脏读的问题。<code>SERIALIZABLE</code>要求事务A执行时，其他事务<strong>禁止对这个表进行添加、更新、删除操作</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional(isolation = Isolation.SERIALIZABLE)</span></span><br></pre></td></tr></table></figure></div>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="三种问题"><a href="#三种问题" class="headerlink" title="三种问题"></a>三种问题</h3><ul>
<li>脏读：读到了已修改但未提交的数据</li>
<li>不可重复读：前后两次读取的结果不一样</li>
<li>幻读：之前读取存在，再读发现不存在了（或者反之亦然）</li>
</ul>
<h3 id="四种隔离级别"><a href="#四种隔离级别" class="headerlink" title="四种隔离级别"></a>四种隔离级别</h3><ul>
<li><code>READ UNCOMMIT</code>：最低的级别，能读到未提交的数据</li>
<li><code>READ COMMIT</code>：只能读修改已提交的数据<ul>
<li>解决：脏读</li>
</ul>
</li>
<li><code>REPEATABLE READ</code>：读取期间，其他事务不能对该字段进行修改<ul>
<li>解决：脏读，不可重复读</li>
</ul>
</li>
<li><code>SERIALIZABLE</code>：读取期间，其他事务不能对这个表进行增删改<ul>
<li>解决：脏读，不可重复读，幻读</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
  </entry>
  <entry>
    <title>Java设计模式系列（1）：单例模式</title>
    <url>//post/25714/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>单例模式（Singleton Pattern）是 Java 中最简单的设计模式之一。这种模式涉及单一的类，需确保代码中最多只有一个该类对象被创建。</p>
<p>原文地址：<a href="https://xuedongyun.cn/post/25714/">https://xuedongyun.cn/post/25714/</a></p>
<h2 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h2><p>饿汉式，在一开始就创建对象</p>
<h3 id="方法一：静态成员变量"><a href="#方法一：静态成员变量" class="headerlink" title="方法一：静态成员变量"></a>方法一：静态成员变量</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> {</span><br><span class="line">    <span class="comment">// 私有化构造器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> {}</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 成员变量位置创建对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 静态方法提供对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h3 id="方法二：静态代码块"><a href="#方法二：静态代码块" class="headerlink" title="方法二：静态代码块"></a>方法二：静态代码块</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> {</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> {}</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 使用静态代码块</span></span><br><span class="line">    <span class="keyword">static</span> {</span><br><span class="line">        instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h2 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h2><h3 id="方式一：线程不安全"><a href="#方式一：线程不安全" class="headerlink" title="方式一：线程不安全"></a>方式一：线程不安全</h3><p>第一次使用时才创建对象</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 线程不安全</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> {</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> {}</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) {</span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h3 id="方式二：线程安全"><a href="#方式二：线程安全" class="headerlink" title="方式二：线程安全"></a>方式二：线程安全</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 线程安全，使用synchronized关键词</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> {</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> {}</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line">	</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) {</span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h3 id="方式三：双重检查锁"><a href="#方式三：双重检查锁" class="headerlink" title="方式三：双重检查锁"></a>方式三：双重检查锁</h3><p>因为绝大多数操作都是读操作，给方法加锁影响性能，可以改为：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> {</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> {}</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line">	</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) {</span><br><span class="line">            <span class="comment">// 写操作时，给类加锁</span></span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class) {</span><br><span class="line">                <span class="comment">// 抢到锁的时候还要判断一下是否已经被竞争者赋过值了</span></span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="literal">null</span>) {</span><br><span class="line">                    instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>上述代码看起来很完美，但实际上可能会有空指针问题，原因是JVM在实例化对象的时候会进行指令重排</p>
<p>在java中，创建对象实际上不是不是原子操作，而是有三步：</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 分配对象的内存空间</span></span><br><span class="line">memory = <span class="built_in">allocate</span>(); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 初始化对象</span></span><br><span class="line"><span class="built_in">ctorInstance</span>(memory);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 设置instance指向刚分配的内存地址</span></span><br><span class="line">instance = memory;</span><br></pre></td></tr></table></figure></div>

<p>指令重排后，就可能变成：</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 分配对象的内存空间</span></span><br><span class="line">memory = <span class="built_in">allocate</span>(); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 设置instance指向刚分配的内存地址</span></span><br><span class="line">instance = memory;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 初始化对象</span></span><br><span class="line"><span class="built_in">ctorInstance</span>(memory);</span><br></pre></td></tr></table></figure></div>

<p>上述懒汉式代码中，很有可能：某个线程获取了非空instance，但是此时还没来得及初始化。我们可以使用volatile关键词来解决这个问题</p>
<p>volatile 关键字有如下特征：</p>
<ul>
<li>可见性：当一个线程修改了这个变量的值，volatile保证了新值能立即同步到主内存，以及每次使用前立即从主内存刷新。但普通变量做不到这点，普通变量的值在线程间传递均需要通过主内存</li>
<li>禁止指令重排序优化：被volatile 修饰的变量，不会被JVM指令重排</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> {}</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 使用volatile关键词解决指令重排的问题</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton instance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="literal">null</span>) {</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class) {</span><br><span class="line">                <span class="keyword">if</span>(instance == <span class="literal">null</span>) {</span><br><span class="line">                    instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h3 id="方式四：静态内部类"><a href="#方式四：静态内部类" class="headerlink" title="方式四：静态内部类"></a>方式四：静态内部类</h3><p>首次使用时，静态内部类才会被加载，进而初始化INSTANCE。这是开源项目中一种较为常见的单例模式</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> {</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> {}</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SingletonHolder</span> {</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Singleton</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.INSTANCE;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h3 id="方法五：枚举方式"><a href="#方法五：枚举方式" class="headerlink" title="方法五：枚举方式"></a>方法五：枚举方式</h3><p>这是一种极力推荐的单例实现模式，因为枚举类是线程安全的，且只会装载一次。枚举类无法使用反射创建，因此是唯一不会被破坏的单例模式。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Singleton</span> {</span><br><span class="line">    INSTANCE;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> value;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h2 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h2><p>序列化和反射能破坏单例模式（枚举方法除外）</p>
<h3 id="序列化破坏单例模式"><a href="#序列化破坏单例模式" class="headerlink" title="序列化破坏单例模式"></a>序列化破坏单例模式</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> Singleton.getInstance();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 序列化后存入文件</span></span><br><span class="line"><span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">"C:/test.txt"</span>));</span><br><span class="line">oos.writeObject(instance);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从文件中读取</span></span><br><span class="line"><span class="type">ObjectInputStream</span> <span class="variable">ois1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">"C:/test.txt"</span>));</span><br><span class="line"><span class="type">Singleton</span> <span class="variable">singleton1</span> <span class="operator">=</span> (Singleton) ois1.readObject();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从文件中读取</span></span><br><span class="line"><span class="type">ObjectInputStream</span> <span class="variable">ois2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">"C:/test.txt"</span>));</span><br><span class="line"><span class="type">Singleton</span> <span class="variable">singleton2</span> <span class="operator">=</span> (Singleton) ois2.readObject();</span><br><span class="line"></span><br><span class="line"><span class="comment">// singleton1和singleton2是两个对象，单例模式被破坏</span></span><br></pre></td></tr></table></figure></div>

<h3 id="反射破坏单例模式"><a href="#反射破坏单例模式" class="headerlink" title="反射破坏单例模式"></a>反射破坏单例模式</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">Class&lt;Singleton&gt; clazz = Singleton.class;</span><br><span class="line">Constructor&lt;Singleton&gt; constructor = clazz.getDeclaredConstructor();</span><br><span class="line">constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">Singleton</span> <span class="variable">singleton1</span> <span class="operator">=</span> constructor.newInstance();</span><br><span class="line"><span class="type">Singleton</span> <span class="variable">singleton2</span> <span class="operator">=</span> constructor.newInstance();</span><br></pre></td></tr></table></figure></div>

<h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>解决序列化破坏</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> {</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> {}</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SingletonHolder</span> {</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Singleton</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.INSTANCE;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 解决序列化，反序列化破解单例模式</span></span><br><span class="line">    <span class="keyword">private</span> Object <span class="title function_">readResolve</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.INSTANCE;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>原理：可以看看<code>ObjectInputStream.readObject</code>的源码：</p>
<p><code>readObject</code>-&gt;<code>readObject0</code>-&gt;<code>readOrdinaryObject</code>-&gt;如果有<code>readResolve()</code>方法，在反序列化的时候会调用该方法返回对象</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (obj != <span class="literal">null</span> &amp;&amp; handles.lookupException(passHandle) == <span class="literal">null</span> &amp;&amp; desc.hasReadResolveMethod()) {</span><br><span class="line">	<span class="type">Object</span> <span class="variable">rep</span> <span class="operator">=</span> desc.invokeReadResolve(obj);</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
</blockquote>
<p>解决反射破坏</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> {</span><br><span class="line"></span><br><span class="line">    <span class="comment">//私有构造方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> {</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 被反射调用时，直接抛出错误</span></span><br><span class="line">        <span class="keyword">if</span>(instance != <span class="literal">null</span>) {</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h2 id="JDK源码-Runtime类"><a href="#JDK源码-Runtime类" class="headerlink" title="JDK源码-Runtime类"></a>JDK源码-Runtime类</h2><p>Runtime类使用饿汉式（静态变量）实现</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Runtime</span> {</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Runtime</span> <span class="variable">currentRuntime</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runtime</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Runtime <span class="title function_">getRuntime</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> currentRuntime;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>Runtime类的使用</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Runtime</span> <span class="variable">runtime</span> <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 虚拟机内存总量</span></span><br><span class="line"><span class="type">long</span> <span class="variable">totalMemory</span> <span class="operator">=</span> runtime.totalMemory();</span><br><span class="line">System.out.println(<span class="string">"totalMemory = "</span> + totalMemory);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 虚拟机试图使用的最大内存量</span></span><br><span class="line"><span class="type">long</span> <span class="variable">maxMemory</span> <span class="operator">=</span> runtime.maxMemory();</span><br><span class="line">System.out.println(<span class="string">"maxMemory = "</span> + maxMemory);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建新的进程，执行指定的字符串命令，返回进程对象</span></span><br><span class="line"><span class="type">Process</span> <span class="variable">process</span> <span class="operator">=</span> runtime.exec(<span class="string">"ipconfig"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过输入流，获取命令执行后的结果</span></span><br><span class="line"><span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> process.getInputStream();</span><br><span class="line"><span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span> * <span class="number">1024</span> * <span class="number">100</span>];</span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> is.read(bytes);</span><br><span class="line">System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(bytes, <span class="number">0</span>, i, <span class="string">"gbk"</span>));</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>java</category>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>java设计模式系列</tag>
      </tags>
  </entry>
  <entry>
    <title>Java设计模式系列（2）：工厂模式</title>
    <url>//post/33663/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>正常情况下，我们如果有<code>PhoneStore</code>类，其中需要有<code>orderPhone(String type)</code>方法，为用户提供不同的<code>Phone</code>。此时代码耦合十分严重，如果我们要更换或增加对象，都需要改new对象的地方。我们其实可以使用工厂类来生成对象，<code>PhoneStore</code>只需要和工厂打交道即可，实现最终目的：<strong>解耦</strong></p>
<p>原文地址：<a href="https://xuedongyun.cn/post/33663/">https://xuedongyun.cn/post/33663/</a></p>
<h2 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h2><p>简单工厂包含：</p>
<ul>
<li>抽象产品（<code>Phone</code>）</li>
<li>具体产品（<code>XiaomiPhone</code>，<code>HuaweiPhone</code>）</li>
<li>具体工厂（<code>PhoneFactory</code>）</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PhoneFactory</span> {</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 这里方法也可以设置为static，即“静态工厂模式”</span></span><br><span class="line">    <span class="keyword">public</span> Phone <span class="title function_">createPhone</span><span class="params">(String type)</span> {</span><br><span class="line">        <span class="type">Phone</span> <span class="variable">phone</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (type.equals(<span class="string">"xiaomi"</span>)) {</span><br><span class="line">            phone = <span class="keyword">new</span> <span class="title class_">XiaomiPhone</span>();</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (type.equals(<span class="string">"huawei"</span>)) {</span><br><span class="line">            phone = <span class="keyword">new</span> <span class="title class_">HuaweiPhone</span>();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> phone;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>此时，<code>PhoneStore</code>需要手机时，只需要从<code>PhoneFactory</code>中获取即可</p>
<p>问题：要增加新的手机，就需要修改<code>PhoneFactory</code>的代码，违背开闭原则</p>
<h2 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h2><p>工厂方法模式包含：</p>
<ul>
<li>抽象产品（<code>Phone</code>）</li>
<li>具体产品（<code>XiaomiPhone</code>，<code>HuaweiPhone</code>）</li>
<li>抽象工厂（<code>PhoneFactory</code>）</li>
<li>具体工厂（<code>XiaomiPhoneFactory</code>，<code>HuaweiPhoneFactory</code>）</li>
</ul>
<p>抽象工厂</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PhoneFactory</span> {</span><br><span class="line">    </span><br><span class="line">    Phone <span class="title function_">createPhone</span><span class="params">()</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>具体工厂</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XiaomiPhoneFactory</span> implement PhoneFactory {</span><br><span class="line">	</span><br><span class="line">    <span class="keyword">public</span> Phone <span class="title function_">createPhone</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">XiaomiPhoneFactory</span>();</span><br><span class="line">    } </span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p><code>PhoneStore</code>中具体使用</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PhoneStore</span> {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> PhoneFactory factory;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PhoneStore</span><span class="params">(PhoneFactory factory)</span> {</span><br><span class="line">        <span class="built_in">this</span>.factory = factory;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Phone <span class="title function_">orderPhone</span><span class="params">()</span> {</span><br><span class="line">        <span class="type">Phone</span> <span class="variable">phone</span> <span class="operator">=</span> factory.createPhone();</span><br><span class="line">        <span class="keyword">return</span> phone;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>此时，当增加手机时，无需修改<code>PhoneFactory</code>，只需要增加新的接口实现类即可</p>
<p>问题：每增加一种手机，就要创建一个新的对应工厂类，增加了系统复杂度</p>
<h2 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h2><img lazyload="" src="/images/loading.svg" data-src="https://s2.loli.net/2023/06/21/qpUPvj8JLZtGilF.png" alt="image-20200401214509176" style="zoom: 50%;">

<ul>
<li><p>工厂方法模式：只能生产一个级别的产品</p>
</li>
<li><p>抽象工厂模式：生产多个级别的产品</p>
</li>
</ul>
<p>现在工厂可以生产同一产品族的产品，比如手机和电脑。小米和华为都会生产自己的手机和电脑。现在关系如图：</p>
<pre class="mermaid">classDiagram

class XiaomiFactory {
    + createPhone(): Phone
    + createComputer(): Computer
}

class HuaweiFactory {
    + createPhone(): Phone
    + createComputer(): Computer
}
    
Phone &lt;|-- XiaomiPhone
Phone &lt;|-- HuaweiPhone

Computer &lt;|-- XiaomiComputer
Computer &lt;|-- HuaweiComputer

XiaomiPhone &lt;.. XiaomiFactory
XiaomiComputer &lt;.. XiaomiFactory

HuaweiPhone &lt;.. HuaweiFactory
HuaweiComputer &lt;.. HuaweiFactory

XiaomiFactory ..|&gt; DeviceFacotry
HuaweiFactory ..|&gt; DeviceFacotry</pre>

<p>抽象工厂</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DeviceFactory</span> {</span><br><span class="line">    </span><br><span class="line">    Phone <span class="title function_">createPhone</span><span class="params">()</span>;</span><br><span class="line">    </span><br><span class="line">    Computer <span class="title function_">createComputer</span><span class="params">()</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>具体工厂</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">xiaomiFactory</span> implement DeviceFactory {</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> Phone <span class="title function_">createPhone</span><span class="params">()</span> {</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">XiaomiPhone</span>();</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> Computer <span class="title function_">createComputer</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">XiaomiComputer</span>();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>现在，当一个产品族种的多个对象被设计成一起工作时，能保证客户端只使用同一个产品族种的对象</p>
<p>问题：产品族中需要增加新的产品时，所有工厂类都需要修改</p>
<h2 id="JDK源码-Collection-iterator方法"><a href="#JDK源码-Collection-iterator方法" class="headerlink" title="JDK源码-Collection.iterator方法"></a>JDK源码-Collection.iterator方法</h2><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">list.add(<span class="number">1</span>);</span><br><span class="line">list.add(<span class="number">2</span>);</span><br><span class="line">list.add(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">Iterator&lt;Integer&gt; it = list.iterator();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (it.hasNext()) {</span><br><span class="line">    System.out.println(<span class="string">"it.next() = "</span> + it.next());</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>获取迭代器时，使用了工厂方法模式，类图如下</p>
<pre class="mermaid">classDiagram
class Iterator {
    &lt;<interface>&gt;
}
class Collection {
    &lt;<interface>&gt;
    + iterator(): Iterator
}
class ArrayList {
    + iterator(): Iterator
}

Collection &lt;|.. ArrayList
Iterator &lt;|.. ArrayList_Itr
Iterator &lt;.. Collection
ArrayList_Itr &lt;.. ArrayList

Factory &lt;|.. EntityFactory
Product &lt;|.. EntityProduct
Product &lt;.. Factory
EntityProduct &lt;.. EntityFactory</interface></interface></pre>

<p>抽象产品：<code>Iterator</code></p>
<p>具体产品：<code>ArrayList.Itr</code></p>
<p>抽象工厂：<code>Collection</code></p>
<p>具体工厂：<code>ArrayList</code></p>
]]></content>
      <categories>
        <category>java</category>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>java设计模式系列</tag>
      </tags>
  </entry>
  <entry>
    <title>Java设计模式系列（3）：原型模式</title>
    <url>//post/12331/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>原型模式：用已经创建的实例作为原型，通过复制该原型的值来创建一个相同的新对象</p>
<p>原文地址：<a href="https://xuedongyun.cn/post/12331/">https://xuedongyun.cn/post/12331/</a></p>
<h2 id="浅克隆"><a href="#浅克隆" class="headerlink" title="浅克隆"></a>浅克隆</h2><p>原型模式包含以下角色：</p>
<ul>
<li>抽象原型类</li>
<li>具体原型类</li>
<li>访问类（调用clone方法）</li>
</ul>
<pre class="mermaid">classDiagram
class Prototype {
    &lt;<interface>&gt;
    + clone(): Prototype
}

class Realizetype {
    + clone(): Prototype
}

Prototype &lt;|.. Realizetype</interface></pre>

<p>Object类中实现了一个protected修饰的naive方法<code>clone()</code>。我们必须实现<code>Cloneable</code>接口并重写<code>clone()</code>（其实就是调用父类方法），才能调用这个方法</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Cloneable</span> {</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> User <span class="title function_">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException {</span><br><span class="line">        <span class="keyword">return</span> (User) <span class="built_in">super</span>.clone();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h2 id="深克隆"><a href="#深克隆" class="headerlink" title="深克隆"></a>深克隆</h2><p>对象实现<code>Serializable</code>接口，使用序列化的方式存到文档中，再读出来</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 对象写出到文件</span></span><br><span class="line"><span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">"c://test.txt"</span>));</span><br><span class="line">oos.writeObject(user);</span><br><span class="line">oos.close();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从文件中写入</span></span><br><span class="line"><span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">"c://test.txt"</span>));</span><br><span class="line"><span class="type">User</span> <span class="variable">clone</span> <span class="operator">=</span> (User) ois.readObject();</span><br><span class="line">ois.close();</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>java</category>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>java设计模式系列</tag>
      </tags>
  </entry>
  <entry>
    <title>Java设计模式系列（4）：建造者模式</title>
    <url>//post/24102/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>构造者模式：使用多个简单的对象，逐渐构建成一个复杂的对象。构造者模式属于创建型模式，它提供了一种创建对象的最佳方式</p>
<p>原文地址：<a href="https://xuedongyun.cn/post/24102/">https://xuedongyun.cn/post/24102/</a></p>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>构造者模式包含以下角色：</p>
<ul>
<li>抽象构造者（Builder）</li>
<li>具体构造者（ConcreteBuilder）</li>
<li>产品类（Product）</li>
<li>指挥者类（Director）</li>
</ul>
<p>产品类：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Phone</span> {</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String cpu;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 省略getter和setter</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>抽象构造者：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Builder</span> {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">Phone</span> <span class="variable">phone</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Phone</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">buildName</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">buildCpu</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> Phone <span class="title function_">createPhone</span><span class="params">()</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>具体构造者：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApplePhoneBuilder</span> <span class="keyword">extends</span> <span class="title class_">Builder</span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buildName</span><span class="params">()</span> {</span><br><span class="line">        phone.setName(<span class="string">"iphone"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buildCpu</span><span class="params">()</span> {</span><br><span class="line">        phone.setCpu(<span class="string">"A14"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Phone <span class="title function_">createPhone</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> phone;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>指挥者：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Director</span> {</span><br><span class="line">    <span class="keyword">private</span> Builder builder;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Director</span><span class="params">(Builder builder)</span> {</span><br><span class="line">        <span class="built_in">this</span>.builder = builder;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 核心，使用不同builder来创建对象</span></span><br><span class="line">    <span class="keyword">public</span> Phone <span class="title function_">construct</span><span class="params">()</span> {</span><br><span class="line">        builder.buildName();</span><br><span class="line">        builder.buildCpu();</span><br><span class="line">        <span class="keyword">return</span> builder.createPhone();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>使用：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Builder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AppleBuilder</span>();</span><br><span class="line"></span><br><span class="line"><span class="type">Director</span> <span class="variable">director</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Director</span>(builder);</span><br><span class="line"></span><br><span class="line"><span class="type">Phone</span> <span class="variable">phone</span> <span class="operator">=</span> director.construct();</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>有时，可以把<code>Director</code>和<code>Builder</code>合二为一，简化系统结构。不过如果<code>construct()</code>方法过于复杂，还是建议封装到<code>Director</code>中</p>
</blockquote>
<p>将<code>Director</code>和<code>Builder</code>合二为一</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> abstruct <span class="keyword">class</span> <span class="title class_">Builder</span> {</span><br><span class="line">	</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">Phone</span> <span class="variable">phone</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Phone</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">buildName</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">buildCpu</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> Phone <span class="title function_">createPhone</span><span class="params">()</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> Phone <span class="title function_">construct</span><span class="params">()</span> {</span><br><span class="line">		<span class="built_in">this</span>.buildName();</span><br><span class="line">        <span class="built_in">this</span>.buildCpu();</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.phone;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h2 id="模式扩展"><a href="#模式扩展" class="headerlink" title="模式扩展"></a>模式扩展</h2><p>建造者模式还有一个用途。如果类构造器需要传入很多参数时，可读性会很差，而且容易出错。此时就可以使用建造者模式重构。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Computer</span> {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Computer</span><span class="params">(String cpu, String gpu, String motherboard)</span> {</span><br><span class="line">        <span class="built_in">this</span>.cpu = cpu;</span><br><span class="line">        <span class="built_in">this</span>.gpu = gpu;</span><br><span class="line">        <span class="built_in">this</span>.motherboard = motherboard;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String cpu;</span><br><span class="line">    <span class="keyword">private</span> String gpu;</span><br><span class="line">    <span class="keyword">private</span> String motherboard;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Builder</span> {</span><br><span class="line">        <span class="keyword">private</span> String cpu;</span><br><span class="line">        <span class="keyword">private</span> String gpu;</span><br><span class="line">        <span class="keyword">private</span> String motherboard;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Builder</span><span class="params">()</span> {}</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Builder <span class="title function_">cpu</span><span class="params">(String cpu)</span> {</span><br><span class="line">            <span class="built_in">this</span>.cpu = cpu;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Builder <span class="title function_">gpu</span><span class="params">(String gpu)</span> {</span><br><span class="line">            <span class="built_in">this</span>.gpu = gpu;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Builder <span class="title function_">motherBoard</span><span class="params">(String motherboard)</span> {</span><br><span class="line">            <span class="built_in">this</span>.motherboard = motherboard;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Computer <span class="title function_">build</span><span class="params">()</span> {</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Computer</span>(cpu, gpu, motherboard);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>使用</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Computer</span> <span class="variable">computer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Computer</span>.Builder()</span><br><span class="line">                            .cpu(<span class="string">"i9"</span>)</span><br><span class="line">                            .gpu(<span class="string">"3060"</span>)</span><br><span class="line">                            .motherBoard(<span class="string">"asus"</span>)</span><br><span class="line">                            .build();</span><br></pre></td></tr></table></figure></div>

<h2 id="与工厂模式对比"><a href="#与工厂模式对比" class="headerlink" title="与工厂模式对比"></a>与工厂模式对比</h2><h3 id="工厂方法模式-VS-建造者模式"><a href="#工厂方法模式-VS-建造者模式" class="headerlink" title="工厂方法模式 VS 建造者模式"></a>工厂方法模式 VS 建造者模式</h3><ul>
<li>工厂方法模式：注重对整体的创建方式</li>
<li>建造者模式：注重的是部件的创建过程</li>
</ul>
<h3 id="抽象工厂模式-VS-建造者模式"><a href="#抽象工厂模式-VS-建造者模式" class="headerlink" title="抽象工厂模式 VS 建造者模式"></a>抽象工厂模式 VS 建造者模式</h3><ul>
<li><p>抽象工厂模式：实现对产品家族的创建。不关心构建的过程，只关心什么产品由什么工厂生产</p>
</li>
<li><p>建造者模式：要求按照指定的蓝图建造产品，主要目的是通过组装零配件产生新产品</p>
</li>
</ul>
]]></content>
      <categories>
        <category>java</category>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>java设计模式系列</tag>
      </tags>
  </entry>
  <entry>
    <title>Java设计模式系列（5）：代理模式</title>
    <url>//post/23348/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>有时，我们想要给某对象提供一个代理对象，以控制对该对象的访问。代理对象应该作为访问对象和目标对象之间的中介。<br>Java中的代理可以分为静态代理和动态代理。静态代理类在编译期间就生成，动态代理类在Java运行时动态产生。动态代理又分为JDK代理和cglib代理两种。</p>
<p>原文地址：<a href="https://xuedongyun.cn/post/23348/">https://xuedongyun.cn/post/23348/</a></p>
<h2 id="代理模式的角色"><a href="#代理模式的角色" class="headerlink" title="代理模式的角色"></a>代理模式的角色</h2><p>代理（Proxy）模式分为三种角色：</p>
<ul>
<li>抽象主题类（Subject）：声明需要实现的业务方法</li>
<li>真实主题类（Real Subject）：实现抽象主题类。是代理对象所代表的真实对象</li>
<li>代理类（Proxy）：实现抽象主题类。内部有对真实主题类的引用</li>
</ul>
<h2 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h2><p>抽象主题类（Subject）</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SellTickets</span> {</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">sell</span><span class="params">()</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>真实主题类（Real Subject）</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TrainStation</span> <span class="keyword">implements</span> <span class="title class_">SellTickets</span> {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sell</span><span class="params">()</span> {</span><br><span class="line">        System.out.println(<span class="string">"车站买票"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>代理类（Proxy）</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyPoint</span> <span class="keyword">implements</span> <span class="title class_">SellTickets</span> {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SellTickets target;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ProxyPoint</span><span class="params">(SellTickets target)</span> {</span><br><span class="line">        <span class="built_in">this</span>.target = target;</span><br><span class="line">    }</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 代理类作为中介，调用引用对象的放，实现代理</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sell</span><span class="params">()</span> {</span><br><span class="line">        System.out.println(<span class="string">"before"</span>);</span><br><span class="line">        target.sell();</span><br><span class="line">        System.out.println(<span class="string">"after"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>使用代理</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">TrainStation</span> <span class="variable">trainStation</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TrainStation</span>();</span><br><span class="line"><span class="type">ProxyPoint</span> <span class="variable">proxy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProxyPoint</span>(trainStation);</span><br><span class="line">proxy.sell();</span><br></pre></td></tr></table></figure></div>

<h2 id="JDK动态代理"><a href="#JDK动态代理" class="headerlink" title="JDK动态代理"></a>JDK动态代理</h2><p>Java中提供了一个动态代理类<code>Proxy</code>，其中有一个<code>newProxyInstance</code>方法用来获取代理对象</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 工厂类，用来生产代理对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyFactory</span> {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">TrainStation</span> <span class="variable">station</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TrainStation</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ProxyFactory</span><span class="params">(TrainStation station)</span> {</span><br><span class="line">        <span class="built_in">this</span>.station = station;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> SellTickets <span class="title function_">getProxyObject</span><span class="params">()</span> {</span><br><span class="line">        <span class="type">SellTickets</span> <span class="variable">proxyInstance</span> <span class="operator">=</span> (SellTickets) Proxy.newProxyInstance(station.getClass().getClassLoader(),</span><br><span class="line">                station.getClass().getInterfaces(),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvocationHandler</span>() {</span><br><span class="line">                    </span><br><span class="line">                    <span class="comment">/*</span></span><br><span class="line"><span class="comment">                    	参数说明</span></span><br><span class="line"><span class="comment">                    	proxy: 代理对象本身（不用this，是因为此处this指向的是InvocationHandler匿名类）</span></span><br><span class="line"><span class="comment">                    	method: 接口中的方法的Method实例</span></span><br><span class="line"><span class="comment">                    	args: 调用方法时传递的实际参数</span></span><br><span class="line"><span class="comment">                    */</span></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable {</span><br><span class="line">                        System.out.println(<span class="string">"before"</span>);</span><br><span class="line">                        <span class="type">Object</span> <span class="variable">res</span> <span class="operator">=</span> method.invoke(station, args);</span><br><span class="line">                        System.out.println(<span class="string">"after"</span>);</span><br><span class="line">                        <span class="keyword">return</span> res;</span><br><span class="line">                    }</span><br><span class="line">                });</span><br><span class="line">        <span class="keyword">return</span> proxyInstance;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>使用代理</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">TrainStation</span> <span class="variable">trainStation</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TrainStation</span>();</span><br><span class="line"></span><br><span class="line"><span class="type">ProxyFactory</span> <span class="variable">proxyFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProxyFactory</span>(trainStation);</span><br><span class="line"><span class="type">SellTickets</span> <span class="variable">proxy</span> <span class="operator">=</span> proxyFactory.getProxyObject();</span><br><span class="line"></span><br><span class="line">proxy.sell();</span><br></pre></td></tr></table></figure></div>

<p>原理分析如下：</p>
<p>Java创建了<code>com.sun.proxy.$Proxy0</code>类作为代理类，是程序在运行中动态的在内存中创建的，我们摘取重点代码来查看</p>
<p>执行时流程如下：</p>
<ol>
<li>测试时，调用代理对象的sell方法</li>
<li>代理对象（$Proxy0）中的sell方法，调用<code>invocationHandler</code>实现类的sell方法（此时传入了this，也即前面提到的proxy参数）</li>
<li><code>invocationHandler</code>实现类中，使用反射执行了真实对象的sell方法</li>
</ol>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 程序运行过程中动态生成的代理类（部分）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">$Proxy0</span> <span class="keyword">extends</span> <span class="title class_">Proxy</span> <span class="keyword">implements</span> <span class="title class_">SellTickets</span> {</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m3;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> $Proxy0(InvocationHandler invocationHandler) {</span><br><span class="line">        <span class="built_in">super</span>(invocationHandler);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> {</span><br><span class="line">        m3 = Class.forName(<span class="string">"com.itheima.proxy.dynamic.jdk.SellTickets"</span>).getMethod(<span class="string">"sell"</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">sell</span><span class="params">()</span> {</span><br><span class="line">        <span class="built_in">this</span>.h.invoke(<span class="built_in">this</span>, m3, <span class="literal">null</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h2 id="CGLIB动态代理"><a href="#CGLIB动态代理" class="headerlink" title="CGLIB动态代理"></a>CGLIB动态代理</h2><p>JDK动态代理要求被代理的对象必须实现接口。CGLIB是一个功能强大的第三方包，能为没有实现接口的类提供代理</p>
<p>需要先引入依赖</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;cglib&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;cglib&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">3.3</span><span class="number">.0</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>截至目前为止，官方的CGLIB任然没有更新，无法在JDK17下使用。可以使用Spring中官方修改过的CGLIB来代替</p>
</blockquote>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyFactory</span> <span class="keyword">implements</span> <span class="title class_">MethodInterceptor</span> {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TrainStation station;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ProxyFactory</span><span class="params">(TrainStation station)</span> {</span><br><span class="line">        <span class="built_in">this</span>.station = station;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> TrainStation <span class="title function_">getProxyObject</span><span class="params">()</span> {</span><br><span class="line">        <span class="comment">// 创建Enhancer对象，类似于JDK动态代理的Proxy类，下一步就是设置几个参数</span></span><br><span class="line">        <span class="type">Enhancer</span> <span class="variable">enhancer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Enhancer</span>();</span><br><span class="line">        <span class="comment">// 设置父类的字节码对象</span></span><br><span class="line">        enhancer.setSuperclass(station.getClass());</span><br><span class="line">        <span class="comment">// 设置回调函数</span></span><br><span class="line">        enhancer.setCallback(<span class="built_in">this</span>);</span><br><span class="line">        <span class="comment">// 返回代理对象</span></span><br><span class="line">        <span class="keyword">return</span> (TrainStation) enhancer.create();</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">		参数说明</span></span><br><span class="line"><span class="comment">		Object o: 代理对象</span></span><br><span class="line"><span class="comment">		method: 真实对象中的方法</span></span><br><span class="line"><span class="comment">		objects: 实际参数</span></span><br><span class="line"><span class="comment">		methodProxy: 代理对象中的方法</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">intercept</span><span class="params">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable {</span><br><span class="line">        System.out.println(<span class="string">"before"</span>);</span><br><span class="line">        <span class="type">TrainStation</span> <span class="variable">res</span> <span class="operator">=</span> (TrainStation) methodProxy.invokeSuper(o, objects);</span><br><span class="line">        System.out.println(<span class="string">"after"</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h2 id="两种代理的对比"><a href="#两种代理的对比" class="headerlink" title="两种代理的对比"></a>两种代理的对比</h2><ul>
<li>JDK代理 VS CGLIB 代理<ul>
<li>CGLIB底层采用ASM字节码生成框架，使用字节码生成代理类。在JDK1.6之前比反射效率高。CGLIB的原理为生成被代理对象的子类。（因此不能代理final修饰的类）</li>
<li>目前，JDK代理效率高于CGLIB。所以有接口类的使用JDK代理，没接口的类使用CGLIB</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>java</category>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>java设计模式系列</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis实战系列（1）：短信登录</title>
    <url>//post/44039/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本系列为Redis实战系列，旨在通过实际场景学习Redis相关使用方法。本系列项目使用<code>spring-boot-starter-data-redis</code>（SpringDataRedis）来操作Redis。</p>
<p>原文地址：<a href="https://xuedongyun.cn/post/44039/">https://xuedongyun.cn/post/44039/</a></p>
<h2 id="项目流程"><a href="#项目流程" class="headerlink" title="项目流程"></a>项目流程</h2><p>发送验证码：</p>
<ol>
<li>随机生成验证码</li>
<li>保存验证码（之前用Session，现在用Redis）</li>
<li>发送验证码</li>
<li>返回ok</li>
</ol>
<p>登录阶段：</p>
<ol>
<li>使用手机号从Redis中获取验证码</li>
<li>校验验证码是否一致（不一致报错）</li>
<li>一致，根据手机号查询用户</li>
<li>判断用户是否存在（不存在则创建用户）</li>
<li>保存用户信息到Redis，使用token作为key</li>
<li>返回token</li>
</ol>
<h2 id="用到的实体类"><a href="#用到的实体类" class="headerlink" title="用到的实体类"></a>用到的实体类</h2><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> {</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDto</span> {</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginFormDto</span> {</span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line">    <span class="keyword">private</span> String code;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Result</span> {</span><br><span class="line">    <span class="keyword">private</span> Boolean success;</span><br><span class="line">    <span class="keyword">private</span> String errorMsg;</span><br><span class="line">    <span class="keyword">private</span> Object data;</span><br><span class="line">    <span class="keyword">private</span> Long total;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">ok</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(<span class="literal">true</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">ok</span><span class="params">(Object data)</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(<span class="literal">true</span>, <span class="literal">null</span>, data, <span class="literal">null</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">ok</span><span class="params">(List&lt;?&gt; data, Long total)</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(<span class="literal">true</span>, <span class="literal">null</span>, data, total);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">fail</span><span class="params">(String errorMsg)</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(<span class="literal">false</span>, errorMsg, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h2 id="UserService（发送短信验证码）"><a href="#UserService（发送短信验证码）" class="headerlink" title="UserService（发送短信验证码）"></a>UserService（发送短信验证码）</h2><p>用户上传手机号，生成随机验证码，短信发送给用户</p>
<p>Redis中存储验证码</p>
<table>
<thead>
<tr>
<th>key</th>
<th>value（验证码）</th>
</tr>
</thead>
<tbody><tr>
<td>login:code:13001234567</td>
<td>672636</td>
</tr>
</tbody></table>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Result <span class="title function_">sendCode</span><span class="params">(String phone)</span> {</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成验证码</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> RandomUtil.randomNumbers(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 验证码存在Redis中，并设置过期时间</span></span><br><span class="line">    stringRedisTemplate.opsForValue().set(<span class="string">"login:code:"</span> + phone, code);</span><br><span class="line">    stringRedisTemplate.expire(<span class="string">"login:code:"</span> + phone, <span class="number">5</span>, TimeUnit.MINUTES);</span><br><span class="line"></span><br><span class="line">    log.info(<span class="string">"模拟发送短信：{}"</span>, code);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Result.ok();</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h2 id="UserService（登录）"><a href="#UserService（登录）" class="headerlink" title="UserService（登录）"></a>UserService（登录）</h2><p>登录的主要逻辑</p>
<ul>
<li>验证用户上传的验证码（根据手机号从Redis中拿）</li>
<li>登录成功后，将User信息存入Redis中，返回token</li>
</ul>
<p>Redis中存储用户信息</p>
<table>
<thead>
<tr>
<th>key</th>
<th>value（hash格式的用户信息）</th>
</tr>
</thead>
<tbody><tr>
<td>login:token:b725075b-1ba4-4658-8c89-597d7c43f965</td>
<td>name: xdy, phone: 13001234567</td>
</tr>
</tbody></table>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Result <span class="title function_">login</span><span class="params">(LoginFormDto loginForm)</span> {</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取手机号</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> loginForm.getPhone();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断用户上传的验证码，和Redis中缓存的验证码是否一致</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">cacheCode</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(<span class="string">"login:code:"</span> + phone);</span><br><span class="line">    <span class="keyword">if</span> (cacheCode == <span class="literal">null</span> || !cacheCode.equals(loginForm.getCode())) {</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">"验证码错误"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从数据库中查询用户是否存在，存在就直接获取</span></span><br><span class="line">    <span class="comment">// 如果不存在，数据库创建新用户</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">"xdy"</span>, phone, <span class="string">"123456"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 随机生成token，作为登录令牌</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> UUID.randomUUID().toString();</span><br><span class="line">    <span class="type">String</span> <span class="variable">tokenKey</span> <span class="operator">=</span> <span class="string">"login:token:"</span> + token;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将User转换为UserDto, 再转化为HashMap</span></span><br><span class="line">    <span class="type">UserDto</span> <span class="variable">userDto</span> <span class="operator">=</span> BeanUtil.copyProperties(user, UserDto.class);</span><br><span class="line">    Map&lt;String, Object&gt; userMap = BeanUtil.beanToMap(userDto, <span class="literal">false</span>, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将用户信息存在redis中，并设置token有效期</span></span><br><span class="line">    stringRedisTemplate.opsForHash().putAll(tokenKey, userMap);</span><br><span class="line">    stringRedisTemplate.expire(tokenKey, <span class="number">10</span>, TimeUnit.DAYS);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回token</span></span><br><span class="line">    <span class="keyword">return</span> Result.ok(token);</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h2 id="UserHolder"><a href="#UserHolder" class="headerlink" title="UserHolder"></a>UserHolder</h2><p>工具类，用于将<code>UserDto</code>变量存储在<code>ThreadLocal</code>中</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserHolder</span> {</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;UserDto&gt; tl = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">saveUser</span><span class="params">(UserDto user)</span>{</span><br><span class="line">        tl.set(user);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> UserDto <span class="title function_">getUser</span><span class="params">()</span>{</span><br><span class="line">        <span class="keyword">return</span> tl.get();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">removeUser</span><span class="params">()</span>{</span><br><span class="line">        tl.remove();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h2 id="RefreshTokenInterceptor"><a href="#RefreshTokenInterceptor" class="headerlink" title="RefreshTokenInterceptor"></a>RefreshTokenInterceptor</h2><p>该拦截器用于<strong>刷新token有效期</strong>（因为有的请求未必需要登录，所以此部分独立出来）</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RefreshTokenInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> {</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RefreshTokenInterceptor</span><span class="params">(StringRedisTemplate stringRedisTemplate)</span> {</span><br><span class="line">        <span class="built_in">this</span>.stringRedisTemplate = stringRedisTemplate;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> {</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(<span class="string">"authorization"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (Strings.isBlank(token)) {</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 若有token，从redis中获取userMap</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">tokenKey</span> <span class="operator">=</span> <span class="string">"login:token:"</span> + token;</span><br><span class="line">        Map&lt;Object, Object&gt; userMap = stringRedisTemplate.opsForHash().entries(tokenKey);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果用户存在，保存信息到ThreadLocal</span></span><br><span class="line">        <span class="keyword">if</span> (userMap.isEmpty()) {</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="type">UserDto</span> <span class="variable">userDto</span> <span class="operator">=</span> BeanUtil.fillBeanWithMap(userMap, <span class="keyword">new</span> <span class="title class_">UserDto</span>(), <span class="literal">false</span>);</span><br><span class="line">        UserHolder.saveUser(userDto);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 刷新token有效期</span></span><br><span class="line">        stringRedisTemplate.expire(tokenKey, <span class="number">10</span>, TimeUnit.DAYS);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h2 id="LoginInterceptor"><a href="#LoginInterceptor" class="headerlink" title="LoginInterceptor"></a>LoginInterceptor</h2><p>该拦截器用于<strong>判断登录状态</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> {</span><br><span class="line">        <span class="comment">// 登录才放行</span></span><br><span class="line">        <span class="keyword">if</span> (UserHolder.getUser() == <span class="literal">null</span>) {</span><br><span class="line">            response.setStatus(<span class="number">401</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h2 id="WebConfig"><a href="#WebConfig" class="headerlink" title="WebConfig"></a>WebConfig</h2><p>将拦截器注册到SpringBoot中</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> {</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    StringRedisTemplate stringRedisTemplate;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> {</span><br><span class="line">        <span class="type">var</span> <span class="variable">loginInterceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LoginInterceptor</span>();</span><br><span class="line">        <span class="type">var</span> <span class="variable">refreshTokenInterceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RefreshTokenInterceptor</span>(stringRedisTemplate);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 先注册refreshTokenInterceptor，后注册loginInterceptor</span></span><br><span class="line">        registry.addInterceptor(refreshTokenInterceptor).addPathPatterns(<span class="string">"/**"</span>);</span><br><span class="line">        registry.addInterceptor(loginInterceptor)</span><br><span class="line">                .addPathPatterns(<span class="string">"/**"</span>)</span><br><span class="line">                .excludePathPatterns(<span class="string">"/login"</span>, <span class="string">"/sendCode"</span>);</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h2 id="UserController"><a href="#UserController" class="headerlink" title="UserController"></a>UserController</h2><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> {</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping("/sendCode")</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">sendCode</span><span class="params">(<span class="meta">@RequestParam</span> String phone)</span> {</span><br><span class="line">        <span class="keyword">return</span> userService.sendCode(phone);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping("/login")</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">login</span><span class="params">(LoginFormDto loginFormDto)</span> {</span><br><span class="line">        <span class="keyword">return</span> userService.login(loginFormDto);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping("/test")</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">test</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> Result.ok();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h2 id="使用效果"><a href="#使用效果" class="headerlink" title="使用效果"></a>使用效果</h2><p>测试是否已登录（请求被拦截，响应401）</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET		http://localhost:8080/test</span><br></pre></td></tr></table></figure></div>

<p>首先获取验证码</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST	http://localhost:8080/sendCode</span><br><span class="line"># 请求体</span><br><span class="line">phone	13001234567</span><br></pre></td></tr></table></figure></div>

<p>使用手机号和验证码登录</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST	http://localhost:8080/login</span><br><span class="line"># 请求体</span><br><span class="line">phone	13001234567</span><br><span class="line">code	081256</span><br></pre></td></tr></table></figure></div>

<p>测试是否已登录（请求被放行）</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET		http://localhost:8080/test</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>Redis</category>
        <category>实战</category>
      </categories>
      <tags>
        <tag>Redis实战系列</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis实战系列（2）：商户查询缓存</title>
    <url>//post/39214/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本系列为Redis实战系列，旨在通过实际场景学习Redis相关使用方法。本系列项目使用<code>spring-boot-starter-data-redis</code>（SpringDataRedis）来操作Redis。</p>
<p>原文地址：<a href="https://xuedongyun.cn/post/44039/">https://xuedongyun.cn/post/44039/</a></p>
<h2 id="添加缓存"><a href="#添加缓存" class="headerlink" title="添加缓存"></a>添加缓存</h2><ul>
<li>查询数据前先查询缓存<ul>
<li>如果缓存有，直接返回</li>
<li>如果缓存无，查询数据库，再存入redis中</li>
</ul>
</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShopService</span> {</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">queryById</span><span class="params">(Long shopId)</span> {</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">"cache:shop:"</span> + shopId;</span><br><span class="line">        <span class="type">String</span> <span class="variable">shopJson</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(key);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 缓存中有直接返回</span></span><br><span class="line">        <span class="keyword">if</span> (shopJson != <span class="literal">null</span>) {</span><br><span class="line">            <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> JSONUtil.toBean(shopJson, Shop.class);</span><br><span class="line">            <span class="keyword">return</span> Result.ok(shop);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 缓存中无，需要去数据库查询</span></span><br><span class="line">        <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Shop</span>(<span class="number">1001L</span>, <span class="string">"KaKaShop"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查不到，返回错误</span></span><br><span class="line">        <span class="keyword">if</span> (shop == <span class="literal">null</span>) {</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">"店铺不存在"</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 存在，写入Redis中</span></span><br><span class="line">        stringRedisTemplate.opsForValue().set(key, JSONUtil.toJsonStr(shop));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Result.ok(shop);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h2 id="缓存更新策略"><a href="#缓存更新策略" class="headerlink" title="缓存更新策略"></a>缓存更新策略</h2><p>三种缓存更新策略</p>
<ul>
<li><p><strong>内存淘汰：</strong>Redis自动进行，当redis内存达到设定的max-memory时，自动触发淘汰机制，淘汰掉一些不重要的数据（可以自行设置）</p>
</li>
<li><p><strong>超时删除：</strong>给Redis中的变量设置ttl，超时的数据自动删除</p>
</li>
<li><p><strong>主动更新：</strong>手动调用方法把缓存删除，用于解决缓存和数据库不一致问题</p>
</li>
</ul>
<p>业务场景：</p>
<ul>
<li>低一致性需求：使用内存淘汰机制</li>
<li>高一致性需求：主动更新，并以超时删除作为兜底方案（本案例使用此方案）</li>
</ul>
<p>在本实例的场景中，如果有人修改了数据库，会导致数据库和缓存不一致。因此需要操作缓存，那么应该更新缓存还是删除缓存？</p>
<ul>
<li>更新缓存：每次修改数据库都更新缓存，无效写操作过多</li>
<li>删除缓存：跟新数据库时，让缓存失效，查询时再写入缓存（更优）</li>
</ul>
<p>那么，应该先<strong>更新数据库</strong>还是先<strong>删除缓存</strong>？（考虑这两个操作之间可能会有新的操作）</p>
<ul>
<li>先删除缓存：在还未来得及更新数据库时，可能会有新的请求读取了数据库并写入到缓存中，出现不一致的情况</li>
<li>先更新数据库：能够保证数据一致性</li>
</ul>
<p><img lazyload="" src="/images/loading.svg" data-src="https://s2.loli.net/2023/06/26/pRX65NztiBaEFTJ.png" alt="1653323595206"></p>
<blockquote>
<p>总结：我们应该先更新数据库，再删除缓存</p>
</blockquote>
<p>修改一：读取数据库，并写入Redis时，设置超时时间</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Result <span class="title function_">queryById</span><span class="params">(Long shopId)</span> {</span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">"cache:shop:"</span> + shopId;</span><br><span class="line">    <span class="type">String</span> <span class="variable">shopJson</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(key);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 缓存中有直接返回</span></span><br><span class="line">    <span class="keyword">if</span> (shopJson != <span class="literal">null</span>) {</span><br><span class="line">        <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> JSONUtil.toBean(shopJson, Shop.class);</span><br><span class="line">        <span class="keyword">return</span> Result.ok(shop);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 缓存中无，需要去数据库查询</span></span><br><span class="line">    <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Shop</span>(<span class="number">1001L</span>, <span class="string">"KaKaShop"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查不到，返回错误</span></span><br><span class="line">    <span class="keyword">if</span> (shop == <span class="literal">null</span>) {</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">"店铺不存在"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 存在，写入Redis中，设置超时时间</span></span><br><span class="line">    stringRedisTemplate.opsForValue().set(key, JSONUtil.toJsonStr(shop), <span class="number">30L</span>, TimeUnit.MINUTES);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Result.ok(shop);</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>修改二：更新数据后，把缓存中的数据删掉</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Result <span class="title function_">update</span><span class="params">(Shop shop)</span> {</span><br><span class="line">    <span class="comment">// 更新数据库</span></span><br><span class="line">    System.out.println(<span class="string">"模拟更新数据库"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除缓存</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">shopId</span> <span class="operator">=</span> shop.getShopId();</span><br><span class="line">    stringRedisTemplate.delete(<span class="string">"cache:shop:"</span> + shopId);</span><br><span class="line">    <span class="keyword">return</span> Result.ok();</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h2 id="缓存穿透问题"><a href="#缓存穿透问题" class="headerlink" title="缓存穿透问题"></a>缓存穿透问题</h2><p>缓存穿透：请求的数据在数据库和缓存中都不存在，每次请求都会打到数据库中</p>
<p>解决方案：</p>
<ul>
<li>缓存空对象：简单方便。但会有额外内存消耗，且会造成数据短期不一致。</li>
<li>布隆过滤：内存占用少。但实现复杂，存在误判，且无法删除元素。</li>
</ul>
<blockquote>
<p>更改思路（使用缓存空对象）：</p>
<ul>
<li>以前：查询数据时，如果数据库中不存在，返回查询失败</li>
<li>现在：查询数据时，如果数据库中不存在，依然写入Redis缓存null值，返回查询失败</li>
</ul>
</blockquote>
<p><img lazyload="" src="/images/loading.svg" data-src="https://s2.loli.net/2023/06/28/POC3ntLzXpbSWAJ.png" alt="1653326156516"></p>
<h2 id="缓存雪崩问题"><a href="#缓存雪崩问题" class="headerlink" title="缓存雪崩问题"></a>缓存雪崩问题</h2><p>缓存雪崩：指同一时间大量缓存的key同时失效，或Redis宕机，导致大量请求到达数据库，带来压力</p>
<p>解决方案：</p>
<ul>
<li>给不同key的TTL添加随机值</li>
<li>利用Redis集群提高服务可用性</li>
<li>给业务添加降级限流策略（微服务相关）</li>
<li>给业务添加多级缓存（请求到达浏览器，nginx可以做缓存，未命中找Redis，再未命中找JVM，最后到数据库……）</li>
</ul>
<h2 id="缓存击穿问题"><a href="#缓存击穿问题" class="headerlink" title="缓存击穿问题"></a>缓存击穿问题</h2><p>缓存击穿：指一个key失效了，在高并发的情况下，会有大量的请求都访问数据库（因为都暂时从缓存中读不到），带来冲击</p>
<p>解决方案：</p>
<ul>
<li>互斥锁</li>
<li>逻辑过期</li>
</ul>
<h3 id="使用互斥锁"><a href="#使用互斥锁" class="headerlink" title="使用互斥锁"></a>使用互斥锁</h3><p>如果从缓存中没有查询到数据，需要不停尝试获取互斥锁。直到获取到锁为止，才能重新进行查询。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">(String key)</span> {</span><br><span class="line">    <span class="type">Boolean</span> <span class="variable">flag</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().setIfAbsent(key, <span class="string">"1"</span>, <span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line">    <span class="keyword">return</span> BooleanUtil.isTrue(flag);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">(String key)</span> {</span><br><span class="line">    stringRedisTemplate.delete(key);</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Result <span class="title function_">queryById</span><span class="params">(Long shopId)</span> {</span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">"cache:shop:"</span> + shopId;</span><br><span class="line">    <span class="type">String</span> <span class="variable">shopJson</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(key);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 缓存中有直接返回</span></span><br><span class="line">    <span class="keyword">if</span> (shopJson != <span class="literal">null</span>) {</span><br><span class="line">        <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> JSONUtil.toBean(shopJson, Shop.class);</span><br><span class="line">        <span class="keyword">return</span> Result.ok(shop);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 需要互斥锁才能查询数据库</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">lockKey</span> <span class="operator">=</span> <span class="string">"lock:shop:"</span> + shopId;</span><br><span class="line">    <span class="keyword">try</span> {</span><br><span class="line">        <span class="comment">// 获取锁</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isLock</span> <span class="operator">=</span> tryLock(lockKey);</span><br><span class="line">        <span class="keyword">if</span> (!isLock) {</span><br><span class="line">            Thread.sleep(<span class="number">50</span>);</span><br><span class="line">            <span class="keyword">return</span> queryById(shopId);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 缓存中无，去数据库查询</span></span><br><span class="line">        <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Shop</span>(<span class="number">1001L</span>, <span class="string">"KaKaShop"</span>);</span><br><span class="line">        <span class="comment">// 查不到，返回错误</span></span><br><span class="line">        <span class="keyword">if</span> (shop == <span class="literal">null</span>) {</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">"店铺不存在"</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 存在，写入Redis中，设置超时时间</span></span><br><span class="line">        stringRedisTemplate.opsForValue().set(key, JSONUtil.toJsonStr(shop), <span class="number">30L</span>, TimeUnit.MINUTES);</span><br><span class="line">		</span><br><span class="line">        <span class="keyword">return</span> Result.ok(shop);</span><br><span class="line"></span><br><span class="line">    } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">    } <span class="keyword">finally</span> {</span><br><span class="line">        <span class="comment">// 释放锁</span></span><br><span class="line">        unlock(lockKey);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h3 id="使用逻辑过期"><a href="#使用逻辑过期" class="headerlink" title="使用逻辑过期"></a>使用逻辑过期</h3><ul>
<li><p>需要进行缓存预热，提前将数据加入到Redis中</p>
</li>
<li><p>查询Redis时，如果没有命中，直接返回空，不查询数据库</p>
</li>
<li><p>一旦命中，将value取出，判断value中的过期时间是否满足。如果没有过期，则直接返回数据</p>
</li>
<li><p>如果过期，开启独立线程后直接返回数据。独立线程能获取互斥锁，才去重构数据，重构完成后释放互斥锁</p>
</li>
</ul>
<p>新建一个实体类，用来存储数据以及过期时间</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisData</span> {</span><br><span class="line">    <span class="keyword">private</span> LocalDateTime expireTime;</span><br><span class="line">    <span class="keyword">private</span> Object data;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>在ShopService中封装一个方法（测试的时候，缓存预热用）</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveShop2Redis</span><span class="params">(Long shopId, Long expireSeconds)</span> {</span><br><span class="line">    <span class="comment">// 从数据库中查询shop（模拟）</span></span><br><span class="line">    <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Shop</span>(shopId, <span class="string">"testShop"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 写入数据到Redis</span></span><br><span class="line">    <span class="type">RedisData</span> <span class="variable">redisData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RedisData</span>();</span><br><span class="line">    redisData.setData(shop);</span><br><span class="line">    redisData.setExpireTime(LocalDateTime.now().plusSeconds(expireSeconds));</span><br><span class="line"></span><br><span class="line">    stringRedisTemplate.opsForValue().set(<span class="string">"cache:shop:"</span> + shopId, JSONUtil.toJsonStr(redisData));</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>在测试类中预热一下</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testSaveShop</span><span class="params">()</span> {</span><br><span class="line">    shopService.saveShop2Redis(<span class="number">1L</span>, <span class="number">10L</span>);</span><br><span class="line">    shopService.saveShop2Redis(<span class="number">2L</span>, <span class="number">10L</span>);</span><br><span class="line">    shopService.saveShop2Redis(<span class="number">3L</span>, <span class="number">10L</span>);</span><br><span class="line">    shopService.saveShop2Redis(<span class="number">4L</span>, <span class="number">10L</span>);</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>核心业务</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Result <span class="title function_">queryById</span><span class="params">(Long shopId)</span> {</span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">"cache:shop:"</span> + shopId;</span><br><span class="line">    <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(key);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不存在直接返回null</span></span><br><span class="line">    <span class="keyword">if</span> (Strings.isBlank(json)) {</span><br><span class="line">        <span class="keyword">return</span> Result.ok(<span class="literal">null</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 命中，需要先把json反序列化为对象</span></span><br><span class="line">    <span class="type">RedisData</span> <span class="variable">redisData</span> <span class="operator">=</span> JSONUtil.toBean(json, RedisData.class);</span><br><span class="line">    <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> JSONUtil.toBean((JSONObject) redisData.getData(), Shop.class);</span><br><span class="line">    <span class="type">LocalDateTime</span> <span class="variable">expireTime</span> <span class="operator">=</span> redisData.getExpireTime();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断是否过期，未过期直接返回</span></span><br><span class="line">    <span class="keyword">if</span> (expireTime.isAfter(LocalDateTime.now())) {</span><br><span class="line">        <span class="keyword">return</span> Result.ok(shop);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 过期则重建缓存</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">lockKey</span> <span class="operator">=</span> <span class="string">"lock:shop:"</span> + shopId;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">isLock</span> <span class="operator">=</span> tryLock(lockKey);</span><br><span class="line">    <span class="keyword">if</span> (isLock) {</span><br><span class="line">        CACHE_REBUILD_EXECUTOR.submit(() -&gt; {</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                <span class="comment">// 重建缓存</span></span><br><span class="line">                <span class="built_in">this</span>.saveShop2Redis(shopId, <span class="number">10L</span>);</span><br><span class="line">            } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>();</span><br><span class="line">            } <span class="keyword">finally</span> {</span><br><span class="line">                <span class="comment">// 释放锁</span></span><br><span class="line">                unlock(lockKey);</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回过期的商铺信息</span></span><br><span class="line">    <span class="keyword">return</span> Result.ok(shop);</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h2 id="封装Redis工具类"><a href="#封装Redis工具类" class="headerlink" title="封装Redis工具类"></a>封装Redis工具类</h2><p>针对上述问题，我们可以发现，其实很多业务的逻辑都是相似的。因此其实可以封装一个工具类来处理</p>
<ul>
<li>方法1：将任意Java对象序列化为json，存储在String类型的key中，设置TTL</li>
<li>方法2：将任意Java对象序列化为json，存储在String类型的key中，设置逻辑过期时间</li>
<li>方法3：根据key查询缓存，并反序列化为指定类型，利用<strong>缓存空值</strong>的方式解决<strong>缓存穿透</strong>问题</li>
<li>方法4：根据key查询缓存，并反序列化为指定类型，利用<strong>互斥锁</strong>的方式解决<strong>缓存击穿</strong>问题</li>
<li>方法5：根据key查询缓存，并反序列化为指定类型，利用<strong>逻辑过期</strong>的方式解决<strong>缓存击穿</strong>问题</li>
</ul>
<p>创建此工具类</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisClient</span> {</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ExecutorService</span>  <span class="variable">CACHE_REBUILD_EXECUTOR</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h3 id="存储到缓存，设置过期"><a href="#存储到缓存，设置过期" class="headerlink" title="存储到缓存，设置过期"></a>存储到缓存，设置过期</h3><p>实现方法1：存储到缓存，并设置过期时间</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(String key, Object value, Long time, TimeUnit unit)</span> {</span><br><span class="line">    stringRedisTemplate.opsForValue().set(key, JSONUtil.toJsonStr(value), time, unit);</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h3 id="存储到缓存，逻辑过期"><a href="#存储到缓存，逻辑过期" class="headerlink" title="存储到缓存，逻辑过期"></a>存储到缓存，逻辑过期</h3><p>实现方法2：存储到缓存，并设置逻辑过期时间</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setWithLogicalExpire</span><span class="params">(String key, Object value, Long time, TimeUnit unit)</span> {</span><br><span class="line">    <span class="type">RedisData</span> <span class="variable">redisData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RedisData</span>();</span><br><span class="line">    redisData.setData(value);</span><br><span class="line">    redisData.setExpireTime(LocalDateTime.now().plus(time, unit.toChronoUnit()));</span><br><span class="line">    stringRedisTemplate.opsForValue().set(key, JSONUtil.toJsonStr(redisData));</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h3 id="缓存null（缓存穿透）"><a href="#缓存null（缓存穿透）" class="headerlink" title="缓存null（缓存穿透）"></a>缓存null（缓存穿透）</h3><p>实现方法3：使用key查询缓存，数据库中也没有则缓存null</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;R, ID&gt; R <span class="title function_">queryWithPassThrough</span><span class="params">(String keyPrefix,</span></span><br><span class="line"><span class="params">                                           ID id,</span></span><br><span class="line"><span class="params">                                           Class&lt;R&gt; type,</span></span><br><span class="line"><span class="params">                                           Function&lt;ID, R&gt; dbFallback,</span></span><br><span class="line"><span class="params">                                           Long time,</span></span><br><span class="line"><span class="params">                                           TimeUnit unit)</span> {</span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> keyPrefix + id;</span><br><span class="line">    <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(key);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 缓存中有直接返回</span></span><br><span class="line">    <span class="keyword">if</span> (!Strings.isBlank(json)) {</span><br><span class="line">        <span class="keyword">return</span> JSONUtil.toBean(json, type);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果命中的是空值，直接返回null</span></span><br><span class="line">    <span class="keyword">if</span> (json != <span class="literal">null</span>) {</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不存在，去数据库中拿</span></span><br><span class="line">    <span class="type">R</span> <span class="variable">data</span> <span class="operator">=</span> dbFallback.apply(id);</span><br><span class="line">    <span class="comment">// 若数据库中没有，缓存空值</span></span><br><span class="line">    <span class="keyword">if</span> (data == <span class="literal">null</span>) {</span><br><span class="line">        <span class="built_in">this</span>.set(key, <span class="string">""</span>, time, unit);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">this</span>.set(key, data, time, unit);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h3 id="互斥锁（缓存击穿）"><a href="#互斥锁（缓存击穿）" class="headerlink" title="互斥锁（缓存击穿）"></a>互斥锁（缓存击穿）</h3><p>实现方法4：使用互斥锁，解决缓存击穿问题</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;R, ID&gt; R <span class="title function_">queryWithMutex</span><span class="params">(String keyPrefix,</span></span><br><span class="line"><span class="params">                                ID id, Class&lt;R&gt; type,</span></span><br><span class="line"><span class="params">                                Function&lt;ID, R&gt; dbFallback,</span></span><br><span class="line"><span class="params">                                Long time,</span></span><br><span class="line"><span class="params">                                TimeUnit unit)</span> {</span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> keyPrefix + id;</span><br><span class="line">    <span class="type">String</span> <span class="variable">shopJson</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(key);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 缓存中有直接返回</span></span><br><span class="line">    <span class="keyword">if</span> (Strings.isNotBlank(shopJson)) {</span><br><span class="line">        <span class="keyword">return</span> JSONUtil.toBean(shopJson, type);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断命中的是否是空值，是返回null</span></span><br><span class="line">    <span class="keyword">if</span> (shopJson != <span class="literal">null</span>) {</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4.1.获取互斥锁</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">lockKey</span> <span class="operator">=</span> <span class="string">"lock:"</span> + keyPrefix + id;</span><br><span class="line">    R data;</span><br><span class="line">    <span class="keyword">try</span> {</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isLock</span> <span class="operator">=</span> tryLock(lockKey);</span><br><span class="line">        <span class="keyword">if</span> (!isLock) {</span><br><span class="line">            <span class="comment">// 获取锁失败，休眠并重试</span></span><br><span class="line">            Thread.sleep(<span class="number">50</span>);</span><br><span class="line">            <span class="keyword">return</span> queryWithMutex(keyPrefix, id, type, dbFallback, time, unit);</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 获取锁成功，查询数据库</span></span><br><span class="line">        data = dbFallback.apply(id);</span><br><span class="line">        <span class="keyword">if</span> (data == <span class="literal">null</span>) {</span><br><span class="line">            set(key, <span class="string">""</span>, time, unit);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">this</span>.set(key, data, time, unit);</span><br><span class="line">    } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">    }<span class="keyword">finally</span> {</span><br><span class="line">        unlock(lockKey);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h3 id="逻辑超时（缓存击穿）"><a href="#逻辑超时（缓存击穿）" class="headerlink" title="逻辑超时（缓存击穿）"></a>逻辑超时（缓存击穿）</h3><p>实现方法5：使用逻辑超时，解决缓存击穿问题</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;ID, R&gt; R <span class="title function_">queryWithLogicalExpire</span><span class="params">(String keyPrefix,</span></span><br><span class="line"><span class="params">                                    ID id,</span></span><br><span class="line"><span class="params">                                    Class&lt;R&gt; type,</span></span><br><span class="line"><span class="params">                                    Function&lt;ID, R&gt; dbFallback,</span></span><br><span class="line"><span class="params">                                    Long time,</span></span><br><span class="line"><span class="params">                                    TimeUnit unit)</span> {</span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> keyPrefix + id;</span><br><span class="line">    <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(key);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不存在直接返回null</span></span><br><span class="line">    <span class="keyword">if</span> (Strings.isBlank(json)) {</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 命中，进行反序列化</span></span><br><span class="line">    <span class="type">RedisData</span> <span class="variable">redisData</span> <span class="operator">=</span> JSONUtil.toBean(json, RedisData.class);</span><br><span class="line">    <span class="type">R</span> <span class="variable">data</span> <span class="operator">=</span> JSONUtil.toBean((JSONObject) redisData.getData(), type);</span><br><span class="line">    <span class="type">LocalDateTime</span> <span class="variable">expireTime</span> <span class="operator">=</span> redisData.getExpireTime();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 未过期直接返回</span></span><br><span class="line">    <span class="keyword">if</span> (expireTime.isAfter(LocalDateTime.now())) {</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 已过期需要缓存重建</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">lockKey</span> <span class="operator">=</span> <span class="string">"lock:"</span> + keyPrefix + id;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">isLock</span> <span class="operator">=</span> tryLock(lockKey);</span><br><span class="line">    <span class="keyword">if</span> (isLock) {</span><br><span class="line">        CACHE_REBUILD_EXECUTOR.submit(()-&gt;{</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                <span class="comment">// 获取到锁的人才有资格，查询数据库，重建缓存</span></span><br><span class="line">                <span class="type">R</span> <span class="variable">dbData</span> <span class="operator">=</span> dbFallback.apply(id);</span><br><span class="line">                <span class="built_in">this</span>.setWithLogicalExpire(key, dbData, time, unit);</span><br><span class="line">            } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>();</span><br><span class="line">            } <span class="keyword">finally</span> {</span><br><span class="line">                unlock(lockKey);</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>Redis</category>
        <category>实战</category>
      </categories>
      <tags>
        <tag>Redis实战系列</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis实战系列（3）：优惠卷秒杀</title>
    <url>//post/20783/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本系列为Redis实战系列，旨在通过实际场景学习Redis相关使用方法。本系列项目使用<code>spring-boot-starter-data-redis</code>（SpringDataRedis）来操作Redis。</p>
<p>原文地址：<a href="https://xuedongyun.cn/post/20783/">https://xuedongyun.cn/post/20783/</a></p>
<h2 id="全局唯一ID"><a href="#全局唯一ID" class="headerlink" title="全局唯一ID"></a>全局唯一ID</h2><p>当用户抢购时，会生成订单，保存到表中。但是如果使用自增ID就会出现问题：</p>
<ul>
<li>id规律太明显</li>
<li>受表单数据量限制</li>
</ul>
<p>所以我们需要全局ID生成器，需满足以下要求：</p>
<ul>
<li>唯一性</li>
<li>高性能</li>
<li>安全性</li>
<li>递增性</li>
<li>高可用</li>
</ul>
<p>为了安全，我们可以不直接使用Redis自增的数据，而是拼接一些其他的数据</p>
<p><img lazyload="" src="/images/loading.svg" data-src="https://s2.loli.net/2023/06/28/ViaI6ejqgHtvdAL.png" alt="1653363172079"></p>
<blockquote>
<p>符号位：1bit，永远为0</p>
<p>时间戳：31bit，以秒为单位，可以使用69年</p>
<p>序列号：32bit，秒内的计数器，每秒可以产生2^32个不同ID</p>
</blockquote>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisIdWorker</span> {</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开始的秒数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">BEGIN_TIMESTAMP</span> <span class="operator">=</span> <span class="number">1687947195L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 序列号的位数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">COUNT_BIT</span> <span class="operator">=</span> <span class="number">32</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">nextId</span><span class="params">(String keyPrefix)</span> {</span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">now</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">        <span class="type">long</span> <span class="variable">second</span> <span class="operator">=</span> now.toEpochSecond(ZoneOffset.UTC);</span><br><span class="line">        <span class="type">long</span> <span class="variable">timestamp</span> <span class="operator">=</span> second - BEGIN_TIMESTAMP;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 自增长</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">date</span> <span class="operator">=</span> now.format(DateTimeFormatter.ofPattern(<span class="string">"yyyy:MM:dd"</span>));</span><br><span class="line">        <span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().increment(<span class="string">"icr:"</span> + keyPrefix + <span class="string">":"</span> + date);</span><br><span class="line">		</span><br><span class="line">        <span class="comment">// 1位符号位 + 31位秒数 + 32位自增数字</span></span><br><span class="line">        <span class="keyword">return</span> timestamp &lt;&lt; <span class="number">32</span> | count;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>测试代码</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RedisIdWorkerTest</span> {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ExecutorService</span> <span class="variable">es</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedisIdWorker redisIdWorker;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException {</span><br><span class="line">        <span class="comment">// 这里使用了CountDownLatch，主线程需要在异步线程执行完后才能结束</span></span><br><span class="line">        <span class="type">CountDownLatch</span> <span class="variable">latch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(<span class="number">300</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">task</span> <span class="operator">=</span> () -&gt; {</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) {</span><br><span class="line">                <span class="type">long</span> <span class="variable">id</span> <span class="operator">=</span> redisIdWorker.nextId(<span class="string">"order"</span>);</span><br><span class="line">                System.out.println(<span class="string">"id = "</span> + id);</span><br><span class="line">            }</span><br><span class="line">            latch.countDown();</span><br><span class="line">        };</span><br><span class="line">        <span class="type">long</span> <span class="variable">begin</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// （利用线程池）开了300个线程，每个</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">300</span>; i++) {</span><br><span class="line">            es.submit(task);</span><br><span class="line">        }</span><br><span class="line">        latch.await();</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"time = "</span> + (end - begin));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h2 id="添加优惠卷"><a href="#添加优惠卷" class="headerlink" title="添加优惠卷"></a>添加优惠卷</h2><p>我们把优惠卷分为两种：普通优惠卷和特价优惠券。普通优惠卷可以任意领取，特价优惠卷需要抢购。</p>
<p>Voucher：普通优惠卷</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Voucher</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> {</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 主键</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="comment">// 商铺ID</span></span><br><span class="line">    <span class="keyword">private</span> Long shopId;</span><br><span class="line">    <span class="comment">// 代金券标题</span></span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="comment">// 副标题</span></span><br><span class="line">    <span class="keyword">private</span> String subTitle;</span><br><span class="line">	<span class="comment">// 使用规则</span></span><br><span class="line">    <span class="keyword">private</span> String rules;</span><br><span class="line">    <span class="comment">// 支付金额</span></span><br><span class="line">    <span class="keyword">private</span> Long payValue;</span><br><span class="line">	<span class="comment">// 抵扣金额</span></span><br><span class="line">    <span class="keyword">private</span> Long actualValue;</span><br><span class="line">	<span class="comment">// 优惠券类型</span></span><br><span class="line">    <span class="keyword">private</span> Integer type;</span><br><span class="line">    <span class="comment">// 库存</span></span><br><span class="line">    <span class="keyword">private</span> Integer stock;</span><br><span class="line">    <span class="comment">// 生效时间</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime beginTime;</span><br><span class="line">    <span class="comment">// 失效时间</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime endTime;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>SeckillVoucher：秒杀优惠卷</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SeckillVoucher</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> {</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 关联的优惠券ID</span></span><br><span class="line">    <span class="keyword">private</span> Long voucherId;</span><br><span class="line">    <span class="comment">// 库存</span></span><br><span class="line">    <span class="keyword">private</span> Integer stock;</span><br><span class="line">    <span class="comment">// 生效时间</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime beginTime;</span><br><span class="line">    <span class="comment">// 失效时间</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime endTime;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p><code>VoucherService</code>中，模拟添加优惠券到数据库，并在Redis中存储秒杀优惠卷库存信息</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addVoucher</span><span class="params">(Voucher voucher)</span> {</span><br><span class="line">    <span class="comment">// 模拟存储到数据库</span></span><br><span class="line">    voucher.setId(<span class="number">1001L</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addSeckillVoucher</span><span class="params">(Voucher voucher)</span> {</span><br><span class="line">    <span class="comment">// 模拟保存到数据库</span></span><br><span class="line">    voucher.setId(<span class="number">1002L</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 保存秒杀信息到数据库（模拟）</span></span><br><span class="line">    <span class="type">SeckillVoucher</span> <span class="variable">seckillVoucher</span> <span class="operator">=</span> SeckillVoucher.builder()</span><br><span class="line">            .voucherId(voucher.getId())</span><br><span class="line">            .stock(voucher.getStock())</span><br><span class="line">            .beginTime(voucher.getBeginTime())</span><br><span class="line">            .endTime(voucher.getEndTime())</span><br><span class="line">            .build();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 保存库存到redis</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">"seckill:stock:"</span> + voucher.getId();</span><br><span class="line">    stringRedisTemplate.opsForValue().set(key, voucher.getStock().toString());</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h2 id="实现秒杀下单"><a href="#实现秒杀下单" class="headerlink" title="实现秒杀下单"></a>实现秒杀下单</h2><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Result <span class="title function_">orderSeckillVoucher</span><span class="params">(Long voucherId)</span> {</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询优惠卷（模拟）</span></span><br><span class="line">    <span class="type">SeckillVoucher</span> <span class="variable">voucher</span> <span class="operator">=</span> seckillVoucherService.getById(voucherId);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (voucher.getBeginTime().isAfter(LocalDateTime.now())) {</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">"秒杀尚未开始"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (voucher.getEndTime().isBefore(LocalDateTime.now())) {</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">"秒杀已经结束"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (voucher.getStock() &lt; <span class="number">1</span>) {</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">"库存不足"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 扣减库存（模拟）</span></span><br><span class="line">    voucher.setStock(voucher.getStock() - <span class="number">1</span>);</span><br><span class="line">    <span class="type">Boolean</span> <span class="variable">success</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">	</span><br><span class="line">    <span class="keyword">if</span> (!success) {</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">"库存不足"</span>);</span><br><span class="line">    }</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 创建订单，记录：订单唯一ID，用户ID，优惠卷ID</span></span><br><span class="line">    <span class="type">VoucherOrder</span> <span class="variable">voucherOrder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VoucherOrder</span>();</span><br><span class="line">    <span class="type">long</span> <span class="variable">orderId</span> <span class="operator">=</span> redisIdWorker.nextId(<span class="string">"order"</span>);</span><br><span class="line">    voucherOrder.setId(orderId);</span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">    voucherOrder.setUserId(userId);</span><br><span class="line">    voucherOrder.setVoucherId(voucherId);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 保存voucherOrder（模拟）</span></span><br><span class="line">    save(voucherOrder);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Result.ok(orderId);</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h2 id="库存超卖问题"><a href="#库存超卖问题" class="headerlink" title="库存超卖问题"></a>库存超卖问题</h2><p>在判断库存不足时，出现了问题。假如库存为1：可能线程1判断还有库存，正准备扣去库存时，线程2也查询库存，发现库存还够。最终两个人在库存为1的情况下，都成功减去了库存。</p>
<p>常规来说，我们可以使用乐观锁或悲观锁来解决这个问题：</p>
<ul>
<li><p><strong>乐观锁</strong></p>
<p>认为线程安全问题不一定会发生，只在更新数据时去判断有没有其他线程也做了修改</p>
</li>
<li><p><strong>悲观锁</strong></p>
<p>认为线程安全问题一定会发生，操作数据前先获取锁</p>
</li>
</ul>
<blockquote>
<p>我们可以使用乐观锁来解决之前的问题</p>
</blockquote>
<h3 id="修改更新方案（一）"><a href="#修改更新方案（一）" class="headerlink" title="修改更新方案（一）"></a>修改更新方案（一）</h3><p>核心思想：只要我扣减库存的时候，库存和我之前查询到的库存是一样的，就意味着中间没有人修改过</p>
<p>伪SQL语句</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">update voucher</span><br><span class="line">set stock = stock - 1</span><br><span class="line">where voucher_id = voucherId and stock = {判断库存是否足够时的值}</span><br></pre></td></tr></table></figure></div>

<h3 id="修改更新方案（二）"><a href="#修改更新方案（二）" class="headerlink" title="修改更新方案（二）"></a>修改更新方案（二）</h3><p>如果使用方案一的话，成功率太低了，我们可以改一下判断条件。只要修改的时候库存大于零即可</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">update voucher</span><br><span class="line">set stock = stock - 1</span><br><span class="line">where voucher_id = voucherId and stock &gt; 0</span><br></pre></td></tr></table></figure></div>

<h2 id="一人一单问题"><a href="#一人一单问题" class="headerlink" title="一人一单问题"></a>一人一单问题</h2><p>我们需要添加功能，使得一个人只能抢购一张优惠卷</p>
<p>具体逻辑应该如下：先判断时间；进一步判断库存；再根据优惠卷id和用户id查询是否已下过订单</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Result <span class="title function_">orderSeckillVoucher</span><span class="params">(Long voucherId)</span> {</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询优惠卷（模拟）</span></span><br><span class="line">    <span class="type">SeckillVoucher</span> <span class="variable">voucher</span> <span class="operator">=</span> seckillVoucherService.getById(voucherId);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (voucher.getBeginTime().isAfter(LocalDateTime.now())) {</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">"秒杀尚未开始"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (voucher.getEndTime().isBefore(LocalDateTime.now())) {</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">"秒杀已经结束"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (voucher.getStock() &lt; <span class="number">1</span>) {</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">"库存不足"</span>);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 一人一单逻辑</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> query().eq(<span class="string">"user_id"</span>, userId).eq(<span class="string">"voucher_id"</span>, voucherId).count();</span><br><span class="line">    <span class="keyword">if</span> (count &gt; <span class="number">0</span>) {</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">"用户已经购买过一次！"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 扣减库存（模拟）</span></span><br><span class="line">    voucher.setStock(voucher.getStock() - <span class="number">1</span>);</span><br><span class="line">    <span class="type">Boolean</span> <span class="variable">success</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">	</span><br><span class="line">    <span class="keyword">if</span> (!success) {</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">"库存不足"</span>);</span><br><span class="line">    }</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 创建订单，记录：订单唯一ID，用户ID，优惠卷ID</span></span><br><span class="line">    <span class="type">VoucherOrder</span> <span class="variable">voucherOrder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VoucherOrder</span>();</span><br><span class="line">    <span class="type">long</span> <span class="variable">orderId</span> <span class="operator">=</span> redisIdWorker.nextId(<span class="string">"order"</span>);</span><br><span class="line">    voucherOrder.setId(orderId);</span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">    voucherOrder.setUserId(userId);</span><br><span class="line">    voucherOrder.setVoucherId(voucherId);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 保存voucherOrder（模拟）</span></span><br><span class="line">    save(voucherOrder);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Result.ok(orderId);</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>这样还是有问题，如果一开始某一用户进行大量并发请求，可能出现：第一笔订单还没来得及保存，后续请求就来了…查询到的订单数量还是0，进而放行…</p>
<h3 id="解决一致性问题"><a href="#解决一致性问题" class="headerlink" title="解决一致性问题"></a>解决一致性问题</h3><p>我们首先创建一个<code>createVoucherOrder()</code>方法，同时为了线程安全，在方法上加<code>synchronized</code>，<code>@Transactional</code></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> Result <span class="title function_">createVoucherOrder</span><span class="params">(Long voucherId)</span> { </span><br><span class="line">	<span class="comment">// 一人一单逻辑</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> query().eq(<span class="string">"user_id"</span>, userId).eq(<span class="string">"voucher_id"</span>, voucherId).count();</span><br><span class="line">    <span class="keyword">if</span> (count &gt; <span class="number">0</span>) {</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">"用户已经购买过一次！"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 扣减库存（模拟）</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">success</span> <span class="operator">=</span> seckillVoucherService.update()</span><br><span class="line">            .setSql(<span class="string">"stock = stock - 1"</span>)</span><br><span class="line">            .eq(<span class="string">"voucher_id"</span>, voucherId).gt(<span class="string">"stock"</span>, <span class="number">0</span>)</span><br><span class="line">            .update()</span><br><span class="line">    <span class="keyword">if</span> (!success) {</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">"库存不足"</span>);</span><br><span class="line">    }</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 创建订单，记录：订单唯一ID，用户ID，优惠卷ID</span></span><br><span class="line">    <span class="type">VoucherOrder</span> <span class="variable">voucherOrder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VoucherOrder</span>();</span><br><span class="line">    <span class="type">long</span> <span class="variable">orderId</span> <span class="operator">=</span> redisIdWorker.nextId(<span class="string">"order"</span>);</span><br><span class="line">    voucherOrder.setId(orderId);			<span class="comment">// 订单ID</span></span><br><span class="line">    voucherOrder.setUserId(userId);			<span class="comment">// 用户ID</span></span><br><span class="line">    voucherOrder.setVoucherId(voucherId);	<span class="comment">// 优惠卷ID</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 保存voucherOrder（模拟）</span></span><br><span class="line">    save(voucherOrder);</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 返回订单ID</span></span><br><span class="line">    <span class="keyword">return</span> Result.ok(orderId);</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p> 这样的话锁的粒度太粗了</p>
</blockquote>
<p>改进，在<code>userId.toString().intern()</code>上加锁</p>
<blockquote>
<p><code>userId.toString()</code> 拿到的对象实际上是不同的对象，<code>intern()</code>这个方法是从常量池中拿到数据，能保证是唯一的相同对象</p>
</blockquote>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">createVoucherOrder</span><span class="params">(Long voucherId)</span> {</span><br><span class="line">    </span><br><span class="line">	<span class="comment">// 一人一单逻辑</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">    <span class="keyword">synchronized</span>(userId.toString().intern()) {</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> query().eq(<span class="string">"user_id"</span>, userId).eq(<span class="string">"voucher_id"</span>, voucherId).count();</span><br><span class="line">        <span class="keyword">if</span> (count &gt; <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">"用户已经购买过一次！"</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 扣减库存（模拟）</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">success</span> <span class="operator">=</span> seckillVoucherService.update()</span><br><span class="line">                .setSql(<span class="string">"stock = stock - 1"</span>)</span><br><span class="line">                .eq(<span class="string">"voucher_id"</span>, voucherId).gt(<span class="string">"stock"</span>, <span class="number">0</span>)</span><br><span class="line">                .update()</span><br><span class="line">        <span class="keyword">if</span> (!success) {</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">"库存不足"</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建订单，记录：订单唯一ID，用户ID，优惠卷ID</span></span><br><span class="line">        <span class="type">VoucherOrder</span> <span class="variable">voucherOrder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VoucherOrder</span>();</span><br><span class="line">        <span class="type">long</span> <span class="variable">orderId</span> <span class="operator">=</span> redisIdWorker.nextId(<span class="string">"order"</span>);</span><br><span class="line">        voucherOrder.setId(orderId);			<span class="comment">// 订单ID</span></span><br><span class="line">        voucherOrder.setUserId(userId);			<span class="comment">// 用户ID</span></span><br><span class="line">        voucherOrder.setVoucherId(voucherId);	<span class="comment">// 优惠卷ID</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 保存voucherOrder（模拟）</span></span><br><span class="line">        save(voucherOrder);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回订单ID</span></span><br><span class="line">        <span class="keyword">return</span> Result.ok(orderId);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>上述方法依然有问题，整个方法被Spring事务管理，但可能出现：锁已经释放了，但事务还没来得及提交的情况。此时如果有一个新的请求碰巧拿到了锁，并且查询订单时也顺利通过，就会出现问题。</p>
<p>可以将<code>synchronized</code>包在方法外部，解决这个问题：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line"><span class="keyword">synchronized</span> (userId.toString().intern()) {</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.createVoucherOrder(voucherId)</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>上述方法依然有问题，我们调用的方法是由this调用的。我们要是想要事务生效，必须使用代理对象。所以这个地方，我们需要获得代理对象：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line"><span class="keyword">synchronized</span> (userId.toString().intern()) {</span><br><span class="line">    <span class="type">VoucherOrderService</span> <span class="variable">proxy</span> <span class="operator">=</span> (VoucherOrderService) AopContext.currentProxy();</span><br><span class="line">    <span class="keyword">return</span> proxy.createVoucherOrder(voucherId);</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h2 id="秒杀优化"><a href="#秒杀优化" class="headerlink" title="秒杀优化"></a>秒杀优化</h2><p>目前逻辑是串行执行的，会比较慢。</p>
<p><img lazyload="" src="/images/loading.svg" data-src="https://s2.loli.net/2023/07/13/9SUuiZfOcDo1P3v.png" alt="image-20230713113428231"></p>
<p>我们可以用消息队列，将当前任务优化为异步的。</p>
<p><img lazyload="" src="/images/loading.svg" data-src="https://s2.loli.net/2023/07/13/1OqGEaYBTNyRFCb.png" alt="image-20230713113234287"></p>
<h3 id="Redis缓存的数据类型"><a href="#Redis缓存的数据类型" class="headerlink" title="Redis缓存的数据类型"></a>Redis缓存的数据类型</h3><ul>
<li>库存</li>
</ul>
<table>
<thead>
<tr>
<th>KEY</th>
<th>VALUE</th>
</tr>
</thead>
<tbody><tr>
<td>stock:vid:7</td>
<td>100</td>
</tr>
</tbody></table>
<ul>
<li>订单（使用set）</li>
</ul>
<table>
<thead>
<tr>
<th>KEY</th>
<th>VALUE</th>
</tr>
</thead>
<tbody><tr>
<td>order:vid:7</td>
<td>1001, 1002, 1003, 1005, 1010</td>
</tr>
</tbody></table>
<h3 id="流程总结"><a href="#流程总结" class="headerlink" title="流程总结"></a>流程总结</h3><p>Redis中判断资格，耗时的写操作异步进行</p>
<p><img lazyload="" src="/images/loading.svg" data-src="https://s2.loli.net/2023/07/13/6fhxVt95PpYORTS.png" alt="image-20230713113855897"></p>
]]></content>
      <categories>
        <category>Redis</category>
        <category>实战</category>
      </categories>
      <tags>
        <tag>Redis实战系列</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis实战系列（4）：分布式锁</title>
    <url>//post/25055/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本系列为Redis实战系列，旨在通过实际场景学习Redis相关使用方法。本系列项目使用<code>spring-boot-starter-data-redis</code>（SpringDataRedis）来操作Redis。</p>
<p>原文地址：<a href="https://xuedongyun.cn/post/25055/">https://xuedongyun.cn/post/25055/</a></p>
<h2 id="分布式锁-setnx"><a href="#分布式锁-setnx" class="headerlink" title="分布式锁-setnx"></a>分布式锁-setnx</h2><p><strong>分布式锁</strong>：在分布式系统中，多进程可见且互斥的锁</p>
<p><strong>核心思想</strong>：让大家都用同一把锁，只要能锁住线程，就能让大家顺序执行</p>
<p><strong>分布式锁应当满足的条件</strong>：</p>
<ul>
<li>可见性</li>
<li>互斥</li>
<li>高可用</li>
<li>高性能</li>
<li>安全性</li>
</ul>
<p><strong>常见的分布式锁方案</strong>：</p>
<ul>
<li>MySQL：性能一般，比较少见</li>
<li>Redis：非常常见的方式，利用setnx这个方法</li>
<li>Zookeeper：也是企业级开发中较好的实现分布式锁的方案，本文不涉及</li>
</ul>
<p><strong>实现核心思路</strong>：</p>
<ul>
<li>获取锁：<ul>
<li>互斥：只有一个线程获取锁</li>
<li>非阻塞：尝试一次，成功true，失败false</li>
</ul>
</li>
<li>释放锁：<ul>
<li>手动释放</li>
<li>超时释放：获取锁时，添加超时时间</li>
</ul>
</li>
</ul>
<h3 id="一-简单版本"><a href="#一-简单版本" class="headerlink" title="(一)简单版本"></a>(一)简单版本</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleRedisLock</span> {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SimpleRedisLock</span><span class="params">(String name, StringRedisTemplate stringRedisTemplate)</span> {</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.stringRedisTemplate = stringRedisTemplate;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">KEY_PREFIX</span> <span class="operator">=</span> <span class="string">"lock:"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ID_PREFIX</span> <span class="operator">=</span> UUID.randomUUID().toString(<span class="literal">true</span>) + <span class="string">"-"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">(<span class="type">long</span> timeoutSec)</span> {</span><br><span class="line">        <span class="comment">// 获取线程标示</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">threadId</span> <span class="operator">=</span> ID_PREFIX + Thread.currentThread().getId();</span><br><span class="line">        <span class="comment">// 获取锁</span></span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">success</span> <span class="operator">=</span> stringRedisTemplate.opsForValue()</span><br><span class="line">            .setIfAbsent(KEY_PREFIX + name, threadId, timeoutSec, TimeUnit.SECONDS);</span><br><span class="line">        <span class="keyword">return</span> Boolean.TRUE.equals(success);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">()</span> {</span><br><span class="line">        stringRedisTemplate.delete(KEY_PREFIX + name);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h3 id="二-分布式锁误删情况"><a href="#二-分布式锁误删情况" class="headerlink" title="(二)分布式锁误删情况"></a>(二)分布式锁误删情况</h3><ul>
<li>假如线程A内部阻塞，导致锁超时自动释放</li>
<li>线程B拿到了这把锁</li>
<li>线程A突然又恢复了，正常执行并释放了锁</li>
<li>这将导致线程A误删线程B的锁</li>
</ul>
<p>我们需要在释放锁之前，查看锁存储的value是不是自己</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">()</span> {</span><br><span class="line">    <span class="type">String</span> <span class="variable">threadId</span> <span class="operator">=</span> ID_PREFIX + Thread.currentThread().getId();</span><br><span class="line">    </span><br><span class="line">    <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(KEY_PREFIX + name);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(threadId.equals(id)) {</span><br><span class="line">        stringRedisTemplate.delete(KEY_PREFIX + name);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h3 id="三-进一步的原子性问题"><a href="#三-进一步的原子性问题" class="headerlink" title="(三)进一步的原子性问题"></a>(三)进一步的原子性问题</h3><ul>
<li><p>假如线程A已确定当前这把锁的确是自己的，正要删除，突然锁到期了。</p>
</li>
<li><p>线程B拿到了这把锁</p>
</li>
<li><p>线程A正常释放锁</p>
</li>
<li><p>这将导致线程A误删线程B的锁</p>
</li>
</ul>
<h4 id="编写lua脚本"><a href="#编写lua脚本" class="headerlink" title="编写lua脚本"></a>编写lua脚本</h4><p>我们可以使用lua脚本操作Redis，实现该原子性操作。我们简单了解一下lua脚本的使用：</p>
<p>Redis为lua提供了调用函数</p>
<div class="highlight-container" data-rel="Lua"><figure class="iseeu highlight lua"><table><tr><td class="code"><pre><span class="line">redis.call(<span class="string">'命令名称'</span>, <span class="string">'key'</span>, <span class="string">'其它参数'</span>, ...)</span><br></pre></td></tr></table></figure></div>

<p>例如：</p>
<div class="highlight-container" data-rel="Lua"><figure class="iseeu highlight lua"><table><tr><td class="code"><pre><span class="line">redis.call(<span class="string">'set'</span>, <span class="string">'name'</span>, <span class="string">'Rose'</span>)</span><br><span class="line"><span class="keyword">local</span> name = redis.call(<span class="string">'get'</span>, <span class="string">'name'</span>)</span><br><span class="line"><span class="keyword">return</span> name</span><br></pre></td></tr></table></figure></div>

<p>使用Redis命令调用lua脚本</p>
<p><img lazyload="" src="/images/loading.svg" data-src="https://s2.loli.net/2023/07/10/KNmMebgGYSW5Lxz.png" alt="1653392438917"></p>
<p>我们最终的lua脚本如下</p>
<div class="highlight-container" data-rel="Lua"><figure class="iseeu highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (redis.call(<span class="string">'GET'</span>, KEYS[<span class="number">1</span>]) == ARGV[<span class="number">1</span>]) <span class="keyword">then</span></span><br><span class="line">  <span class="comment">-- 一致，则删除锁</span></span><br><span class="line">  <span class="keyword">return</span> redis.call(<span class="string">'DEL'</span>, KEYS[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">-- 不一致，则直接返回</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure></div>

<h4 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h4><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> DefaultRedisScript&lt;Long&gt; UNLOCK_SCRIPT = <span class="keyword">new</span> <span class="title class_">DefaultRedisScript</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">static</span> {</span><br><span class="line">    UNLOCK_SCRIPT.setLocation(<span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="string">"unlock.lua"</span>));</span><br><span class="line">    UNLOCK_SCRIPT.setResultType(Long.class);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">()</span> {</span><br><span class="line">    stringRedisTemplate.execute(UNLOCK_SCRIPT,</span><br><span class="line">            Collections.singletonList(KEY_PREFIX + name),</span><br><span class="line">            ID_PREFIX + Thread.currentThread().getId());</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h2 id="分布式锁-redisson"><a href="#分布式锁-redisson" class="headerlink" title="分布式锁-redisson"></a>分布式锁-redisson</h2><h3 id="基于setnx的问题"><a href="#基于setnx的问题" class="headerlink" title="基于setnx的问题"></a>基于setnx的问题</h3><ul>
<li><p><strong>不可重入</strong></p>
<p>同一线程无法所次获取同一把锁</p>
</li>
<li><p><strong>不可重试</strong></p>
<p>指目前的分布式只能尝试一次，我们认为合理的情况是：当线程在获得锁失败后，他应该能再次尝试获得锁。</p>
</li>
<li><p><strong>超时释放</strong></p>
<p>我们在加锁时增加了过期时间，这样的我们可以防止死锁。但是如果卡顿的时间超长，虽然我们采用了lua表达式防止删锁的时候，误删别人的锁。但是毕竟没有锁住，有安全隐患</p>
</li>
<li><p><strong>主从一致性</strong></p>
<p>如果Redis提供了主从集群，当我们向集群写数据时，主机需要异步的将数据同步给从机，而万一在同步过去之前，主机宕机了，就会出现死锁问题。</p>
</li>
</ul>
<h3 id="什么是Redisson"><a href="#什么是Redisson" class="headerlink" title="什么是Redisson"></a>什么是Redisson</h3><p>是一个在Redis的基础上实现的Java驻内存数据网格（In-Memory Data Grid）。它不仅提供了一系列的分布式的Java常用对象，还提供了许多分布式服务，其中就包含了各种分布式锁的实现。</p>
<h3 id="分布式锁-Redisson快速入门"><a href="#分布式锁-Redisson快速入门" class="headerlink" title="分布式锁-Redisson快速入门"></a>分布式锁-Redisson快速入门</h3><p>引入依赖</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.redisson&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;redisson&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">3.22</span><span class="number">.1</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></div>

<p>配置Redisson客户端</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedissonConfig</span> {</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedissonClient <span class="title function_">redissonClient</span><span class="params">()</span>{</span><br><span class="line">        <span class="type">Config</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Config</span>();</span><br><span class="line">        config.useSingleServer().setAddress(<span class="string">"redis://127.0.0.1:6379"</span>).setPassword(<span class="string">"123456"</span>);</span><br><span class="line">        <span class="keyword">return</span> Redisson.create(config);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>使用Redisson分布式锁</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">RLock</span> <span class="variable">lock</span> <span class="operator">=</span> redissonClient.getLock(<span class="string">"anyLock"</span>);</span><br><span class="line"><span class="keyword">try</span> {</span><br><span class="line">    <span class="comment">// 参数：获取锁的等待时间，锁释放时间</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">isLock</span> <span class="operator">=</span> lock.tryLock(<span class="number">1</span>, <span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line">    <span class="keyword">if</span> (isLock) {</span><br><span class="line">        System.out.println(<span class="string">"执行业务"</span>);</span><br><span class="line">    }</span><br><span class="line">} <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">} <span class="keyword">finally</span> {</span><br><span class="line">    lock.unlock();</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h3 id="redission可重入锁原理"><a href="#redission可重入锁原理" class="headerlink" title="redission可重入锁原理"></a>redission可重入锁原理</h3><p><strong>在Lock锁中</strong>：借助于底层的一个voaltile的state变量，来记录重入的状态的。比如，没有人持有这把锁时，state=0。若有人持有这把锁，那么state=1。若持有这把锁的人再次持有这把锁，那么state就会+1 </p>
<p><strong>对于synchronized而言</strong>：他在c语言代码中会有一个count，原理和state类似。也是重入一次就+1，释放一次就-1 。直到减少成0时，表示当前这把锁没有被人持有  </p>
<p><strong>redission中</strong>，使用Redis中的hash来存储锁。可以重复获取自己的锁。释放锁时，重入次数需要减1，重入次数为0时需要删除key。</p>
<table>
<thead>
<tr>
<th>key</th>
<th>field</th>
<th>value</th>
</tr>
</thead>
<tbody><tr>
<td>lock</td>
<td>thread1</td>
<td>1</td>
</tr>
</tbody></table>
<img lazyload="" src="/images/loading.svg" data-src="https://s2.loli.net/2023/07/11/2Q1zJ76FHtATO9S.png" alt="image-20230711112309723" style="zoom: 80%;">

<p>底层使用lua脚本保证操作的原子性：</p>
<ul>
<li>获取锁</li>
</ul>
<div class="highlight-container" data-rel="Lua"><figure class="iseeu highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> key = KEYS[<span class="number">1</span>]; <span class="comment">-- 锁的key</span></span><br><span class="line"><span class="keyword">local</span> threadId = ARGV[l]; <span class="comment">-- 线程唯一标识</span></span><br><span class="line"><span class="keyword">local</span> releaseTime = ARGV[<span class="number">2</span>]; <span class="comment">-- 锁的自动释放时间</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 判断是否存在</span></span><br><span class="line"><span class="keyword">if</span> (redis.call(<span class="string">'exists'</span>, key) == <span class="number">0</span>) <span class="keyword">then</span></span><br><span class="line">    <span class="comment">-- 不存在，获取锁</span></span><br><span class="line">    redis.call(<span class="string">'hset'</span>, key, threadId, <span class="string">'1'</span>);</span><br><span class="line">    <span class="comment">-- 设置有效期</span></span><br><span class="line">    redis.call(<span class="string">'expire'</span>, key, releaseTime);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">-- 返回结果</span></span><br><span class="line"><span class="keyword">end</span> ;</span><br><span class="line"></span><br><span class="line"><span class="comment">--锁已经存在，判断threadId是否是自己</span></span><br><span class="line"><span class="keyword">if</span> (redis.call(<span class="string">'hexists'</span>, key, threadId) == <span class="number">1</span>) <span class="keyword">then</span></span><br><span class="line">    <span class="comment">-- 获取锁，重入次数+1</span></span><br><span class="line">    redis.call(<span class="string">'hincrby'</span>, key, threadId, <span class="string">'1'</span>);</span><br><span class="line">    <span class="comment">-- 设置有效期</span></span><br><span class="line">    redis.call(<span class="string">'expire'</span>, key, releaseTime);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">-- 返回结果</span></span><br><span class="line"><span class="keyword">end</span> ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; <span class="comment">-- 代码走到这里，说明获取锁的不是自己，获取锁失收</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li>释放锁</li>
</ul>
<div class="highlight-container" data-rel="Lua"><figure class="iseeu highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> key = KEYS[<span class="number">1</span>]; <span class="comment">-- 锁的key</span></span><br><span class="line"><span class="keyword">local</span> threadId = ARGV[l]; <span class="comment">-- 线程唯-标识</span></span><br><span class="line"><span class="keyword">local</span> releaseTime = ARGV[<span class="number">2</span>]; <span class="comment">-- 锁的自动释放时间</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 判断当前锁是否还是被自己持有</span></span><br><span class="line"><span class="keyword">if</span> (redis.call(<span class="string">'HEXISTS'</span>, key, threadId) == <span class="number">0</span>) <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>; <span class="comment">-- 如果已经不是自己，则直接返回</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 是自己的锁，则重入次数-1</span></span><br><span class="line"><span class="keyword">local</span> count = redis.call(<span class="string">'HINCRBY'</span>, key, threadId, <span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 判断是否重入次数是否已经为0</span></span><br><span class="line"><span class="keyword">if</span> (count &gt; <span class="number">0</span>) <span class="keyword">then</span></span><br><span class="line">    <span class="comment">-- 大于0说明不能释放锁，重置有效期然后返回</span></span><br><span class="line">    redis.call(<span class="string">'EXPIRE'</span>, key, releaseTime);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="comment">-- 等于0说明可以释放锁，直接删除</span></span><br><span class="line">    redis.call(<span class="string">'DEL'</span>, key);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>获取锁，Redisson底层源码（其实就是lua脚本）</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">&lt;T&gt; RFuture&lt;T&gt; <span class="title function_">tryLockInnerAsync</span><span class="params">(<span class="type">long</span> waitTime, </span></span><br><span class="line"><span class="params">                                 <span class="type">long</span> leaseTime, </span></span><br><span class="line"><span class="params">                                 TimeUnit unit, </span></span><br><span class="line"><span class="params">                                 <span class="type">long</span> threadId, </span></span><br><span class="line"><span class="params">                                 RedisStrictCommand&lt;T&gt; command)</span> {</span><br><span class="line">    <span class="keyword">return</span> commandExecutor.syncedEval(getRawName(), LongCodec.INSTANCE, command,</span><br><span class="line">            <span class="string">"if ((redis.call('exists', KEYS[1]) == 0) "</span> +</span><br><span class="line">                <span class="string">"or (redis.call('hexists', KEYS[1], ARGV[2]) == 1)) then "</span> +</span><br><span class="line">                    <span class="string">"redis.call('hincrby', KEYS[1], ARGV[2], 1); "</span> +</span><br><span class="line">                    <span class="string">"redis.call('pexpire', KEYS[1], ARGV[1]); "</span> +</span><br><span class="line">                    <span class="string">"return nil; "</span> +</span><br><span class="line">            <span class="string">"end; "</span> +</span><br><span class="line">            <span class="string">"return redis.call('pttl', KEYS[1]);"</span>,</span><br><span class="line">            Collections.singletonList(getRawName()), unit.toMillis(leaseTime), getLockName(threadId));</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<ul>
<li>释放锁，Redisson底层源码（其实就是lua脚本）</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> RFuture&lt;Boolean&gt; <span class="title function_">unlockInnerAsync</span><span class="params">(<span class="type">long</span> threadId)</span> {</span><br><span class="line">    <span class="keyword">return</span> evalWriteAsync(getRawName(), LongCodec.INSTANCE, RedisCommands.EVAL_BOOLEAN,</span><br><span class="line">            	<span class="string">"if (redis.call('hexists', KEYS[1], ARGV[3]) == 0) then "</span> +</span><br><span class="line">                    <span class="string">"return nil;"</span> +</span><br><span class="line">                <span class="string">"end; "</span> +</span><br><span class="line">                <span class="string">"local counter = redis.call('hincrby', KEYS[1], ARGV[3], -1); "</span> +</span><br><span class="line">                <span class="string">"if (counter &gt; 0) then "</span> +</span><br><span class="line">                    <span class="string">"redis.call('pexpire', KEYS[1], ARGV[2]); "</span> +</span><br><span class="line">                    <span class="string">"return 0; "</span> +</span><br><span class="line">                <span class="string">"else "</span> +</span><br><span class="line">                    <span class="string">"redis.call('del', KEYS[1]); "</span> +</span><br><span class="line">                    <span class="string">"redis.call(ARGV[4], KEYS[2], ARGV[1]); "</span> + <span class="comment">// 这里publish了消息</span></span><br><span class="line">                    <span class="string">"return 1; "</span> +</span><br><span class="line">                <span class="string">"end; "</span> +</span><br><span class="line">                <span class="string">"return nil;"</span>,</span><br><span class="line">            Arrays.asList(getRawName(), getChannelName()),</span><br><span class="line">            LockPubSub.UNLOCK_MESSAGE, </span><br><span class="line">          	internalLockLeaseTime,</span><br><span class="line">          	getLockName(threadId), </span><br><span class="line">          	getSubscribeService().getPublishCommand());</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h3 id="redisson锁重试原理"><a href="#redisson锁重试原理" class="headerlink" title="redisson锁重试原理"></a>redisson锁重试原理</h3><ul>
<li>锁重试部分，利用了发布订阅机制、信号量机制。保证了CPU不会无意义的不断重试。</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 代码有删改</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">(<span class="type">long</span> waitTime, <span class="type">long</span> leaseTime, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException {</span><br><span class="line">    <span class="type">long</span> <span class="variable">time</span> <span class="operator">=</span> unit.toMillis(waitTime);</span><br><span class="line">    <span class="type">long</span> <span class="variable">current</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    <span class="type">long</span> <span class="variable">threadId</span> <span class="operator">=</span> Thread.currentThread().getId();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取剩余时间，返回null说明获取到锁</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">ttl</span> <span class="operator">=</span> tryAcquire(waitTime, leaseTime, unit, threadId);</span><br><span class="line">    <span class="keyword">if</span> (ttl == <span class="literal">null</span>) {</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    }</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 没拿到锁，如果已经超时，直接返回false</span></span><br><span class="line">    time -= System.currentTimeMillis() - current;</span><br><span class="line">    <span class="keyword">if</span> (time &lt;= <span class="number">0</span>) {</span><br><span class="line">        acquireFailed(waitTime, unit, threadId);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 否则一直等待，等到有人释放锁时publish消息</span></span><br><span class="line">    current = System.currentTimeMillis();</span><br><span class="line">    CompletableFuture&lt;RedissonLockEntry&gt; subscribeFuture = subscribe(threadId);</span><br><span class="line">    <span class="keyword">try</span> {</span><br><span class="line">        subscribeFuture.get(time, TimeUnit.MILLISECONDS);</span><br><span class="line">    } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">        unsubscribe(res, threadId);</span><br><span class="line">        acquireFailed(waitTime, unit, threadId);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line">	</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span> {</span><br><span class="line">        <span class="comment">// 开始尝试重新获取锁</span></span><br><span class="line">        <span class="comment">// 超时直接返回false</span></span><br><span class="line">        time -= System.currentTimeMillis() - current;</span><br><span class="line">        <span class="keyword">if</span> (time &lt;= <span class="number">0</span>) {</span><br><span class="line">            acquireFailed(waitTime, unit, threadId);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        }</span><br><span class="line">		</span><br><span class="line">        <span class="comment">// 循环获取锁</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) {</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 获取到了直接返回true</span></span><br><span class="line">            <span class="type">long</span> <span class="variable">currentTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">            ttl = tryAcquire(waitTime, leaseTime, unit, threadId);</span><br><span class="line">            <span class="keyword">if</span> (ttl == <span class="literal">null</span>) {</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            }</span><br><span class="line">			</span><br><span class="line">            <span class="comment">// 超时了直接返回false</span></span><br><span class="line">            time -= System.currentTimeMillis() - currentTime;</span><br><span class="line">            <span class="keyword">if</span> (time &lt;= <span class="number">0</span>) {</span><br><span class="line">                acquireFailed(waitTime, unit, threadId);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 还有时间，继续尝试获取锁</span></span><br><span class="line">            currentTime = System.currentTimeMillis();</span><br><span class="line">            <span class="comment">// 这里采用了一种信号量的方案，getLatch返回值就是信号量</span></span><br><span class="line">            <span class="comment">// 释放锁的人，将来会释放一个信号</span></span><br><span class="line">            <span class="comment">// 我们这里也会尝试获取信号量。当然，这里也有一个最大等待时间，超时会返回false。</span></span><br><span class="line">            <span class="keyword">if</span> (ttl &gt;= <span class="number">0</span> &amp;&amp; ttl &lt; time) {</span><br><span class="line">                commandExecutor.getNow(subscribeFuture).getLatch().tryAcquire(ttl, TimeUnit.MILLISECONDS);</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                commandExecutor.getNow(subscribeFuture).getLatch().tryAcquire(time, TimeUnit.MILLISECONDS);</span><br><span class="line">            }</span><br><span class="line">			</span><br><span class="line">            <span class="comment">// 等待信号量结束后，时间充足则继续尝试，时间不足则返回失败</span></span><br><span class="line">            time -= System.currentTimeMillis() - currentTime;</span><br><span class="line">            <span class="keyword">if</span> (time &lt;= <span class="number">0</span>) {</span><br><span class="line">                acquireFailed(waitTime, unit, threadId);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    } <span class="keyword">finally</span> {</span><br><span class="line">        unsubscribe(commandExecutor.getNow(subscribeFuture), threadId);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h3 id="redisson锁超时释放原理"><a href="#redisson锁超时释放原理" class="headerlink" title="redisson锁超时释放原理"></a>redisson锁超时释放原理</h3><p>Redisson是如何保证：某个线程获取到锁，的确是因为某线程释放了锁，而不是超时。避免拿到别人未释放的锁？</p>
<p>Redisson提供了一个watchDog机制，它的作用是在Redisson实例被关闭前，不断的延长锁的有效期。也就是说，如果一个拿到锁的线程一直没有完成逻辑，那么看门狗会帮助线程不断的延长锁超时时间，锁不会因为超时而被释放。Redisson默认加锁30秒，每隔10秒刷新加锁时间。</p>
<blockquote>
<p>想要触发Redisson看门狗机制，不能自定义 leaseTime（或者传参 -1）</p>
</blockquote>
<ul>
<li>总结<img lazyload="" src="/images/loading.svg" data-src="https://s2.loli.net/2023/07/12/op1CA86bXwjr2yt.png" alt="image-20230712154241540"></li>
</ul>
<h3 id="redisson主从一致性问题"><a href="#redisson主从一致性问题" class="headerlink" title="redisson主从一致性问题"></a>redisson主从一致性问题</h3><p>举例：主机宕机，某个锁来不及写到从机，出现问题</p>
<img lazyload="" src="/images/loading.svg" data-src="https://s2.loli.net/2023/07/12/EW5gdGfszr8tU19.png" alt="image-20230712155155957" style="zoom: 50%;">

<p>解决方案：没有主从（也可以建一点从节点），向所有节点都获取锁才有效。只要有一个节点还活着，就不会拿到别人的锁。</p>
<p><img lazyload="" src="/images/loading.svg" data-src="https://s2.loli.net/2023/07/12/CVTBNXDPIzkZdqr.png" alt="image-20230712155714147"></p>
<p>代码实现</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> RedissonClient <span class="title function_">redissonClient1</span><span class="params">()</span>{</span><br><span class="line">    <span class="type">Config</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Config</span>();</span><br><span class="line">    config.useSingleServer().setAddress(<span class="string">"redis://127.0.0.1:6379"</span>).setPassword(<span class="string">"12345678"</span>);</span><br><span class="line">    <span class="keyword">return</span> Redisson.create(config);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> RedissonClient <span class="title function_">redissonClient2</span><span class="params">()</span>{</span><br><span class="line">    <span class="type">Config</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Config</span>();</span><br><span class="line">    config.useSingleServer().setAddress(<span class="string">"redis://127.0.0.1:6380"</span>).setPassword(<span class="string">"12345678"</span>);</span><br><span class="line">    <span class="keyword">return</span> Redisson.create(config);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> RedissonClient <span class="title function_">redissonClient3</span><span class="params">()</span>{</span><br><span class="line">    <span class="type">Config</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Config</span>();</span><br><span class="line">    config.useSingleServer().setAddress(<span class="string">"redis://127.0.0.1:6381"</span>).setPassword(<span class="string">"12345678"</span>);</span><br><span class="line">    <span class="keyword">return</span> Redisson.create(config);</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建联锁</span></span><br><span class="line"><span class="type">RLock</span> <span class="variable">lock1</span> <span class="operator">=</span> redissonClient1.getLock(<span class="string">":order"</span>);</span><br><span class="line"><span class="type">RLock</span> <span class="variable">lock2</span> <span class="operator">=</span> redissonClient2.getLock(<span class="string">":order"</span>);</span><br><span class="line"><span class="type">RLock</span> <span class="variable">lock3</span> <span class="operator">=</span> redissonClient3.getLock(<span class="string">":order"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一种方法：本质和第二种一样</span></span><br><span class="line"><span class="type">RLock</span> <span class="variable">lock</span> <span class="operator">=</span> redissonClient1.getMultiLock(lock1, lock2, lock3);</span><br><span class="line"><span class="comment">// 第二种方法</span></span><br><span class="line"><span class="type">RLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RedissonMultiLock</span>(lock1, lock2, lock3)</span><br></pre></td></tr></table></figure></div>

<p>当设置多个锁时，redission会将多个锁添加到一个集合中，然后用while循环去不停去尝试拿锁。</p>
<p>但是会有一个总共的加锁时间，这个时间是用需要加锁的个数 * 1500ms ，假设有3个锁，那么时间就是4500ms。</p>
<p>假设在这4500ms内，所有的锁都加锁成功， 那么此时才算是加锁成功。</p>
<p>如果在4500ms有线程加锁失败，则会再次去进行重试。</p>
<p><img lazyload="" src="/images/loading.svg" data-src="https://s2.loli.net/2023/07/12/15TXHyObSANmKv9.png" alt="1653553093967"></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>普通Redis分布式锁</p>
<ul>
<li>原理：利用setnx的互斥性；利用expire避免死锁；释放锁时判断线程标识</li>
<li>缺陷：不可重入、无法重试、锁超时失效</li>
</ul>
<p>Redisson分布式锁原理</p>
<ul>
<li><strong>可重入</strong>：利用hash结构记录线程id和重入次数</li>
<li><strong>可重试</strong>：利用PubSub和信号量机制实现：等待、唤醒、获取锁失败的重试机制</li>
<li><strong>锁超时释放</strong>：利用watchDog，获取锁后每隔一段时间（releaseTime/3），重置超时时间</li>
<li><strong>主从一致性（multiLock）</strong>：多个独立的Redis节点，必须所有节点都获取重入锁，才算获取成功</li>
</ul>
]]></content>
      <categories>
        <category>Redis</category>
        <category>实战</category>
      </categories>
      <tags>
        <tag>Redis实战系列</tag>
      </tags>
  </entry>
  <entry>
    <title>Java泛型上下限</title>
    <url>//post/3373/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Java中支持泛型机制。泛型的本质是参数化类型，即所操作的数据类型被指定为一个参数。</p>
<p>泛型信息只存在于代码编译阶段，在Java的运行期（已经生成字节码文件后）会被擦除掉，专业术语叫做类型擦除。</p>
<p>Java 泛型中的 <code>extends</code> 和 <code>super</code> 是用来限制泛型类型参数的上限和下限的关键字。</p>
<p>原文地址：<a href="https://xuedongyun.cn/post/3373/">https://xuedongyun.cn/post/3373/</a></p>
<h2 id="T的用法"><a href="#T的用法" class="headerlink" title="T的用法"></a>T的用法</h2><ul>
<li>可以作用在类上</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>&lt;T&gt; {</span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">function</span><span class="params">(List&lt;T&gt; data)</span> {</span><br><span class="line">        <span class="keyword">return</span> data.get(<span class="number">0</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">Test&lt;String&gt; test = <span class="keyword">new</span> <span class="title class_">Test</span>&lt;&gt;(); <span class="comment">// 在类初始化时，就已经定死T的类型</span></span><br><span class="line">test.function(list);</span><br></pre></td></tr></table></figure></div>

<ul>
<li>也可以作用在方法上</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span> {</span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T <span class="title function_">function</span><span class="params">(List&lt;T&gt; data)</span> {</span><br><span class="line">        <span class="keyword">return</span> data.get(<span class="number">0</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">Test</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>&lt;&gt;();</span><br><span class="line">test.function(list); <span class="comment">// 自动完成类型推断</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li>还可以使用<code>extends</code>限制：T类型为某类型的子类</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T <span class="keyword">extends</span> <span class="title class_">Number</span>&gt; <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(T number)</span> {</span><br><span class="line">    System.out.println(number.intValue());</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h2 id="的用法"><a href="#的用法" class="headerlink" title="?的用法"></a>?的用法</h2><ul>
<li><code>&lt;? extends T&gt;</code>：是指 “上界通配符”</li>
<li><code>&lt;? super T&gt;</code>：是指 “下界通配符”</li>
</ul>
<p>这两个用法令我们在使用带泛型类型的容器时，能很方便的处理容器内部泛型类型的多态问题</p>
<h3 id="为什么使用"><a href="#为什么使用" class="headerlink" title="为什么使用"></a>为什么使用</h3><p>我们为什么要使用通配符和边界呢？我们来看一个例子：</p>
<p>假设我们的继承关系如下：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Food</span> { }</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Fruit</span> <span class="keyword">extends</span> <span class="title class_">Food</span> { }</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Apple</span> <span class="keyword">extends</span> <span class="title class_">Fruit</span> { }</span><br></pre></td></tr></table></figure></div>

<p>现在我们有一个盘子类，可以用来装水果</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Plate</span>&lt;T&gt; {</span><br><span class="line">    <span class="keyword">private</span> T item;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getItem</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> item;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setItem</span><span class="params">(T item)</span> {</span><br><span class="line">        <span class="built_in">this</span>.item = item;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>理论上，我们有一个装水果的盘子，当然也能用来装苹果对吧？然而事实是，Java编译器会报错。即：即使容器里装的东西有继承关系，但容器之间并没有继承关系。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">Plate&lt;Fruit&gt; applePlate = <span class="keyword">new</span> <span class="title class_">Plate</span>&lt;Apple&gt;(); <span class="comment">// 编译器报错</span></span><br></pre></td></tr></table></figure></div>

<p>为了让容器的泛型用起来更舒服，<code>&lt;? extends T&gt;</code>和<code>&lt;? super T&gt;</code>应运而生</p>
<h3 id="上界-extends"><a href="#上界-extends" class="headerlink" title="上界(extends)"></a>上界(extends)</h3><p><code>&lt;? extends T&gt;</code>：表示只能存放T的子类型（包括T）</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">Plate&lt;? <span class="keyword">extends</span> <span class="title class_">Fruit</span>&gt; plate = <span class="keyword">new</span> <span class="title class_">Plate</span>&lt;Apple&gt;();</span><br></pre></td></tr></table></figure></div>

<p>上界不能往里存，只能往外取（以父类作为类型）</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">Plate&lt;? <span class="keyword">extends</span> <span class="title class_">Fruit</span>&gt; plate = <span class="keyword">new</span> <span class="title class_">Plate</span>&lt;Apple&gt;();</span><br><span class="line"></span><br><span class="line">plate.setItem(<span class="keyword">new</span> <span class="title class_">Fruit</span>()); <span class="comment">// 不能往里存</span></span><br><span class="line"></span><br><span class="line"><span class="type">Food</span> <span class="variable">item</span> <span class="operator">=</span> plate.getItem(); <span class="comment">// 可以往外取（以父类作为类型）</span></span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>原因：</p>
<p>编译器只知道容器内是Fruit或者它的派生类，但具体是什么类型不知道。可能是Fruit？可能是Apple？也可能是Banana？即使编译器在看到后面用Plate赋值以后，盘子里也没有被标上有“Apple”。而是标上一个占位符：CAP#1，来表示捕获一个Food或Food的子类，具体是什么类不知道。无论是想往里插入Apple或者Fruit或者Food编译器都不知道能不能和这个CAP#1匹配，所以就都不允许。</p>
<p>这是为了泛型安全，因为其会在编译期间生成桥接方法<code>&lt;Bridge Methods&gt;</code>该方法中会出现强制转换，若出现多种子类型，则会强制转换失败</p>
<p>虽然不能添加元素，但是其中的元素都有一个共性：有相同的父类。所以可以在获取元素时，统一转化为父类取出。</p>
</blockquote>
<h3 id="下界-super"><a href="#下界-super" class="headerlink" title="下界(super)"></a>下界(super)</h3><p><strong><code>&lt;? super T&gt;</code>：表示只能存放T的父类型（包括T）</strong></p>
<p>下界能往里存，但往外取只能取Object</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">Plate&lt;? <span class="built_in">super</span> Fruit&gt; plate = <span class="keyword">new</span> <span class="title class_">Plate</span>&lt;Food&gt;();</span><br><span class="line"></span><br><span class="line">plate.setItem(<span class="keyword">new</span> <span class="title class_">Fruit</span>());	<span class="comment">// 可以存放子类</span></span><br><span class="line">plate.setItem(<span class="keyword">new</span> <span class="title class_">Apple</span>());</span><br><span class="line"></span><br><span class="line"><span class="type">Object</span> <span class="variable">item</span> <span class="operator">=</span> plate.getItem(); <span class="comment">// 只能取Object</span></span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>由于存放的都是T的父类（包括T），添加元素时，只能向其添加T的子类，才能保证转化为T类型时是类型安全的。</p>
<p>但其中的元素类型众多，在获取元素时我们无法判断是哪一种类型，只有所有类的基类Object对象才能装下。</p>
</blockquote>
<h3 id="PECS原则"><a href="#PECS原则" class="headerlink" title="PECS原则"></a>PECS原则</h3><p>Producer Extends Consumer Super</p>
<ul>
<li>频繁往外读取内容的，适合用上界extends</li>
<li>经常往里插入的，适合用下界super</li>
</ul>
<h3 id="方便容器使用"><a href="#方便容器使用" class="headerlink" title="方便容器使用"></a>方便容器使用</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 只能往外读，读取类型为父类</span></span><br><span class="line">Plate&lt;? <span class="keyword">extends</span> <span class="title class_">Fruit</span>&gt; plate = <span class="keyword">new</span> <span class="title class_">Plate</span>&lt;Apple&gt;();</span><br><span class="line"><span class="type">Food</span> <span class="variable">item</span> <span class="operator">=</span> plate.getItem();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 只能往里存，存放类型为T的子类。读取只能读为Object</span></span><br><span class="line">Plate&lt;? <span class="built_in">super</span> Fruit&gt; plate = <span class="keyword">new</span> <span class="title class_">Plate</span>&lt;Food&gt;();</span><br><span class="line">plate.setItem(<span class="keyword">new</span> <span class="title class_">Fruit</span>());</span><br><span class="line">plate.setItem(<span class="keyword">new</span> <span class="title class_">Apple</span>());</span><br><span class="line"><span class="type">Object</span> <span class="variable">item</span> <span class="operator">=</span> plate.getItem();</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Java中List.of与Arrays.asList的区别</title>
    <url>//post/8447/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Java中List.of和Arrays.asList都可以用来快速创建一个List容器</p>
<p>在Java中<code>List.of</code>和<code>Arrays.asList</code>都可以用来快速创建一个<code>List</code>容器</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 直接创建</span></span><br><span class="line">List&lt;Integer&gt; list1 = List.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">List&lt;Integer&gt; list2 = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 从数组创建</span></span><br><span class="line">Integer[] ints = {<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>};</span><br><span class="line">List&lt;Integer&gt; list1 = List.of(ints);</span><br><span class="line">List&lt;Integer&gt; list2 = Arrays.asList(ints);</span><br></pre></td></tr></table></figure></div>

<p>原文地址：<a href="https://xuedongyun.cn/post/8447/">https://xuedongyun.cn/post/8447/</a></p>
<h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><p><code>List.of</code>和<code>Arrays.asList</code>的区别在于：</p>
<table>
<thead>
<tr>
<th></th>
<th>List.of</th>
<th>Arrays.asList</th>
</tr>
</thead>
<tbody><tr>
<td>能否包含null</td>
<td>不可以</td>
<td>可以</td>
</tr>
<tr>
<td>能否修改</td>
<td>不可以</td>
<td>可以</td>
</tr>
<tr>
<td>修改原数组是否影响List</td>
<td>不影响</td>
<td>影响</td>
</tr>
</tbody></table>
<h2 id="List-of不能包含null的原因"><a href="#List-of不能包含null的原因" class="headerlink" title="List.of不能包含null的原因"></a>List.of不能包含null的原因</h2><ul>
<li><code>List.of</code>源代码中明确有写，不能包含null</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SafeVarargs</span></span><br><span class="line"><span class="meta">@SuppressWarnings("varargs")</span></span><br><span class="line"><span class="keyword">static</span> &lt;E&gt; List&lt;E&gt; <span class="title function_">of</span><span class="params">(E... elements)</span> {</span><br><span class="line">    <span class="keyword">switch</span> (elements.length) { <span class="comment">// implicit null check of elements</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            <span class="meta">@SuppressWarnings("unchecked")</span></span><br><span class="line">            <span class="type">var</span> <span class="variable">list</span> <span class="operator">=</span> (List&lt;E&gt;) ImmutableCollections.EMPTY_LIST;</span><br><span class="line">            <span class="keyword">return</span> list;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ImmutableCollections</span>.List12&lt;&gt;(elements[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ImmutableCollections</span>.List12&lt;&gt;(elements[<span class="number">0</span>], elements[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> ImmutableCollections.listFromArray(elements);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SafeVarargs</span></span><br><span class="line"><span class="keyword">static</span> &lt;E&gt; List&lt;E&gt; <span class="title function_">listFromArray</span><span class="params">(E... input)</span> {</span><br><span class="line">    </span><br><span class="line">    E[] tmp = (E[])<span class="keyword">new</span> <span class="title class_">Object</span>[input.length];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; input.length; i++) {</span><br><span class="line">        <span class="comment">// 元素不能为null，否则抛出错误</span></span><br><span class="line">        tmp[i] = Objects.requireNonNull(input[i]);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ListN</span>&lt;&gt;(tmp, <span class="literal">false</span>);</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h2 id="List-of不能修改的原因"><a href="#List-of不能修改的原因" class="headerlink" title="List.of不能修改的原因"></a>List.of不能修改的原因</h2><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 底层存储的数组用final修饰</span></span><br><span class="line"><span class="meta">@Stable</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> E[] elements;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="title function_">ListN</span><span class="params">(E[] elements, <span class="type">boolean</span> allowNulls)</span> {</span><br><span class="line">    <span class="built_in">this</span>.elements = elements;</span><br><span class="line">    <span class="built_in">this</span>.allowNulls = allowNulls;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h2 id="原数组是否影响List的原因"><a href="#原数组是否影响List的原因" class="headerlink" title="原数组是否影响List的原因"></a>原数组是否影响List的原因</h2><p>对<code>List.of</code>而言，底层创建了新的<code>new Object[]</code>，所以修改数组不影响<code>List</code></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SafeVarargs</span></span><br><span class="line"><span class="keyword">static</span> &lt;E&gt; List&lt;E&gt; <span class="title function_">listFromArray</span><span class="params">(E... input)</span> {</span><br><span class="line">    <span class="comment">// 新建了数组，并复制了值</span></span><br><span class="line">    E[] tmp = (E[])<span class="keyword">new</span> <span class="title class_">Object</span>[input.length];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; input.length; i++) {</span><br><span class="line">        <span class="comment">// 元素不能为null，否则抛出错误</span></span><br><span class="line">        tmp[i] = Objects.requireNonNull(input[i]);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ListN</span>&lt;&gt;(tmp, <span class="literal">false</span>);</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>对<code>Arrays.ofList</code>而言，直接使用了传入的数组作为底层存储，所以修改数组影响<code>List</code></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; List&lt;T&gt; <span class="title function_">asList</span><span class="params">(T... a)</span> {</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(a);</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">ArrayList(E[] array) {</span><br><span class="line">    a = Objects.requireNonNull(array);</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 只要传入的数组不是null就行</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">requireNonNull</span><span class="params">(T obj)</span> {</span><br><span class="line">    <span class="keyword">if</span> (obj == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Java中的IO流</title>
    <url>//post/17650/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java基础</tag>
      </tags>
  </entry>
</search>
